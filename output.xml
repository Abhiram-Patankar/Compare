<?xml version="1.0" encoding="UTF-8" ?>
<outputs>

	<output>
	    <target dest="table" truncate="true">BATCH_STATUS</target>
	    <queries>
	        <prequery><![CDATA[EXEC UBS_BUSINESS_UNITS_PROC]]></prequery>
	    </queries>
	</output>
    <output>
	    <target dest="table" truncate="true">BATCH_STATUS</target>
	    <queries>
	        <prequery><![CDATA[EXEC UBS_USERS_ROLES_PROC]]></prequery>
	    </queries>
	</output>

	<output>
	<target dest="table" truncate="true">BATCH_STATUS</target>
	<queries>
	<prequery><![CDATA[EXEC UBS_STG_TRIM_KEY_COLUMNS;EXEC UBS_STG_DATA_LOG_PROC; EXEC UBS_STG_MERGING_PROC; EXEC UBS_DATA_LOAD_LOG_PROC;EXEC UPDATE_ENTITY_ADDRESS_IS_PRIMARY; ]]></prequery>
	<query>
		select top 1 SUBSTRING(FILE_NAME,20,10) as BATCH_DATE,'BATCH_START' as PARAMETER,'YES' as STATUS from UBS_STG_ACCOUNT_MASTER order by BATCH_DATE DESC ;
	</query>
	</queries>
	</output>
	<output>
		<target dest="file" row-delimeter="~@^*^@~" col-delimeter="~##~">OCCUPATION.DAT</target>
		<queries>
			<prequery></prequery>
			<query>
				<![CDATA[SELECT DISTINCT EDC_EMPT_FUNC_T AS  OCCUPATION_CD,NULL,NULL,EDC_EMPT_FUNC_C AS OCCUPATION_DESC  , NULL,	 NULL,NULL,NULL, NULL FROM UBS_OCCUPATION_REFERENCE]]>
			</query>
		</queries>
	</output>
	<output>
		<target dest="file" row-delimeter="~@^*^@~" col-delimeter="~##~">CURRENCY.DAT</target>
		<queries>
			<prequery></prequery>
			<query>
				<![CDATA[SELECT DISTINCT UC.currency_cd,  NULL AS TENANT_CD,      UC.currency_desc,       NULL AS CURRENCY_SYMBOL,     NULL AS ROUND_AMOUNT_ZEROES,          NULL AS CUSTOM_BOOLEAN_01,                 NULL AS CUSTOM_INTEGER_01,                 NULL AS CUSTOM_MEDIUM_STRING_01,                 NULL AS CUSTOM_SMALL_STRING_01,                 NULL AS CUSTOM_SMALL_STRING_02,                 NULL AS CUSTOM_SMALL_STRING_03,   NULL AS PARTITIONING_KEY,     ed_end_m FROM   ubs_currency UC JOIN V_CURRENCY AS VC ON UC.CURRENCY_CD = VC.CURRENCY_CD ]]>			</query>
		</queries>
	</output>
			<output>
		<target dest="file" row-delimeter="~@^*^@~" col-delimeter="~##~">PARTY_ACCOUNT_RELATION.DAT</target>
		<queries>
			<prequery></prequery>
			<query>
				<![CDATA[SELECT DISTINCT UATAR.account_key,                 UATAR.party_key,                 relation_type_cd,                 NULL,                 NULL,                 NULL,                 NULL,                 NULL,                 NULL,                 NULL,                 NULL,                 NULL,                 NULL,                 NULL,                 NULL,                 NULL,                 NULL,                 NULL,                 NULL,                 NULL,                 NULL,                 NULL,                 NULL,                 NULL FROM   ubs_account_to_account_relationship AS UATAR JOIN V_ACCOUNT_TO_ACCOUNT_RELATIONSHIP AS VATAR ON UATAR.ACCOUNT_KEY = VATAR.ACCOUNT_KEY AND UATAR.PARTY_KEY = VATAR.PARTY_KEY]]>
			</query>
		</queries>
	</output>
			<output>
		<target dest="file" row-delimeter="~@^*^@~" col-delimeter="~##~">PARTY.DAT</target>
		<queries>
			<prequery></prequery>
			<query>
				<![CDATA[ SELECT ac.party_key,        NULL,        NULL,        NULL,        NULL,        NULL,        Replace(cfp.base_curr_annual_income,'+','') AS base_curr_annual_income,        base_curr_cd,        NULL, 				CASE     WHEN ac.PARTY_TYPE_CD = '1' THEN         CASE             WHEN ac.BIRTH_INCORP_DATE IS NOT NULL THEN                 CONCAT(                    CONVERT(VARCHAR, CAST(ac.BIRTH_INCORP_DATE AS DATE), 103),                     ' 00:00:00.000'                )            ELSE                 NULL        END    WHEN co.CLI_INC_D IS NOT NULL THEN         CONCAT(            CONVERT(VARCHAR, CAST(co.CLI_INC_D AS DATE), 103),             ' 00:00:00.000'        )    ELSE         CASE             WHEN ac.BIRTH_INCORP_DATE IS NOT NULL THEN                 CONCAT(                    CONVERT(VARCHAR, CAST(ac.BIRTH_INCORP_DATE AS DATE), 103),                     ' 00:00:00.000'                )            ELSE                 NULL        END END AS "birth_incorp_date",  NULL,        NULL,        NULL,        NULL,        CASE               WHEN party_name ='' THEN Rtrim(Ltrim(first_name))+' '+Rtrim(Ltrim(last_name))               ELSE party_name        END AS party_name,        NULL,        NULL,        NULL,        NULL                                                                             AS education,               Concat(CONVERT(VARCHAR,Cast(effective_date AS DATE),103),' 00:00:00.000') AS effective_date,        NULL,        NULL,        NULL,        NULL,        NULL,        CASE               WHEN first_name ='' THEN ac.ip_cli_org_x               ELSE first_name        END AS first_name,        NULL,        NULL,        CASE WHEN GENDER = 'M' THEN 'Male' WHEN GENDER = 'F' THEN 'Female' ELSE 'Unknown' END AS GENDER_CD,        NULL,        NULL,        Replace(mie.investment_experience,'+','') AS investment_experiencelast_name ='' THEN NULL               ELSE last_name        END AS last_name,        CASE               WHEN last_review_date ='' THEN NULL               WHEN last_review_date <>'' THEN Concat(CONVERT(VARCHAR,Cast(last_review_date AS DATE),103),' 00:00:00.000')        END AS last_review_date,        NULL,        NULL,        CASE               WHEN marital_status_cd ='D' THEN 'Divorced'               WHEN marital_status_cd ='M' THEN 'Married'               WHEN marital_status_cd ='W' THEN 'Widowed'               WHEN marital_status_cd ='S' THEN 'Unmarried'               WHEN marital_status_cd ='P' THEN 'Separated'        END AS marital_status_cd,        CASE               WHEN middle_name =''THEN NULL               ELSE middle_name        END AS middle_name, NAME_PREFIX,   NAME_SUFFIX,        NULL,        NULL,        NULL,        NULL,        NULL,        occupation_cd,        NULL,        NULL,        NULL,        NULL,        NULL,        NULL,        party_curr_cd,        NULL,        NULL,        party_type_cd,        NULL,        NULL,        NULL,        NULL AS primary_representative_key,        NULL  AS  region_cd,        NULL,        NULL,        NULL,        NULL,        NULL,        NULL,        NULL,        case        /*INDIVIDUAL*/        WHEN ac.party_type_cd = 1 AND    ac.tax_bracket_cd = 'A' then 'AI' WHEN ac.party_type_cd = 1 AND    ac.tax_bracket_cd = 'B' then 'BI' WHEN ac.party_type_cd = 1 AND    ac.tax_bracket_cd = 'C' then 'CI' WHEN ac.party_type_cd = 1 AND    ac.tax_bracket_cd = 'D' then 'DI' WHEN ac.party_type_cd = 1 AND    ac.tax_bracket_cd = 'E' then 'EI'        /*CORPORATE*/        WHEN ac.party_type_cd = 2 AND    ac.tax_bracket_cd = 'A' then 'AC' WHEN ac.party_type_cd = 2 AND    ac.tax_bracket_cd = 'B' then 'BC' WHEN ac.party_type_cd = 2 AND    ac.tax_bracket_cd = 'C' then 'CC' WHEN ac.party_type_cd = 2 AND    ac.tax_bracket_cd = 'D' then 'DC' WHEN ac.party_type_cd = 2 AND    ac.tax_bracket_cd = 'E' then 'EC'        /*TRUST*/        WHEN ac.party_type_cd = 3 AND    ac.tax_bracket_cd = 'A' then 'AT' WHEN ac.party_type_cd = 3 AND    ac.tax_bracket_cd = 'B' then 'BT' WHEN ac.party_type_cd = 3 AND    ac.tax_bracket_cd = 'C' then 'CT' WHEN ac.party_type_cd = 3 AND    ac.tax_bracket_cd = 'D' then 'DT' WHEN ac.party_type_cd = 3 AND    ac.tax_bracket_cd = 'E' then 'ET'        /*ESTATE*/        WHEN ac.party_type_cd = 5 AND    ac.tax_bracket_cd = 'A' then 'AE' WHEN ac.party_type_cd = 5 AND    ac.tax_bracket_cd = 'B' then 'BE' WHEN ac.party_type_cd = 5 AND    ac.tax_bracket_cd = 'C' then 'CE' WHEN ac.party_type_cd = 5 AND    ac.tax_bracket_cd = 'D' then 'DE' WHEN ac.party_type_cd = 5 AND    ac.tax_bracket_cd = 'E' then 'EE' WHEN ac.party_type_cd = 5 AND    ac.tax_bracket_cd = 'F' then 'FE' WHEN ac.party_type_cd = 5 AND    ac.tax_bracket_cd = 'G' then 'GE' WHEN ac.party_type_cd = 5 AND    ac.tax_bracket_cd = 'H' then 'HE' WHEN ac.party_type_cd = 5 AND    ac.tax_bracket_cd = 'I' then 'IE' WHEN ac.party_type_cd = 5 AND    ac.tax_bracket_cd = 'J' then 'JE' WHEN ac.party_type_cd = 5 AND    ac.tax_bracket_cd = 'K' then 'KE' WHEN ac.party_type_cd = 5 AND    ac.tax_bracket_cd = 'L' then 'LE' WHEN ac.party_type_cd = 5 AND    ac.tax_bracket_cd = 'M' then 'ME' WHEN ac.party_type_cd = 5 AND    ac.tax_bracket_cd = 'N' then 'NE' WHEN ac.party_type_cd = 5 AND    ac.tax_bracket_cd = 'O' then 'OE' WHEN ac.party_type_cd = 5 AND    ac.tax_bracket_cd = 'P' then 'PE' WHEN ac.party_type_cd = 5 AND    ac.tax_bracket_cd = 'Q' then 'QE' END AS tax_bracket_cd , NULL,NULL,NULL,NULL,NULL,NULL FROM ubs_active_client AS ac JOIN V_ACTIVE_CLIENT AS VAC ON VAC.party_key=AC.party_key LEFT JOIN ubs_client_financial_profile AS cfp ON ac.party_key = cfp.party_key  LEFT JOIN ubs_client_origination AS co ON ac.party_key=co.party_key  LEFT JOIN ubs_client_financial_product_experience AS mie ON mie.party_key=ac.party_key   ]]>
			</query>
		</queries>
	</output>
	<output>
		<target dest="file" row-delimeter="~@^*^@~" col-delimeter="~##~">ACCOUNT_STATUS.DAT</target>
		<queries>
			<prequery></prequery>
			<query>
				<![CDATA[ SELECT   DISTINCT   CASE WHEN USCR.APP_CRDB_RFRC_C = 'A' THEN 'O'       WHEN USCR.APP_CRDB_RFRC_C = 'D' THEN 'C'       WHEN USCR.APP_CRDB_RFRC_C = 'H' THEN 'P'       WHEN USCR.APP_CRDB_RFRC_C = 'N' THEN 'S'       WHEN USCR.APP_CRDB_RFRC_C = 'Q' THEN 'O'       WHEN USCR.APP_CRDB_RFRC_C = 'T' THEN 'C'       WHEN USCR.APP_CRDB_RFRC_C = 'U' THEN 'P'       WHEN USCR.APP_CRDB_RFRC_C = 'V' THEN 'P'       WHEN USCR.APP_CRDB_RFRC_C = 'W' THEN 'P'       WHEN USCR.APP_CRDB_RFRC_C = 'X' THEN 'C'       WHEN USCR.APP_CRDB_RFRC_C = 'Z' THEN 'C'       END  AS ACCOUNT_STATUS_CD,   NULL AS TENANT_CD,   CASE WHEN APP_RFRC_X = 'ACTIVE' THEN 'OPEN' WHEN APP_RFRC_X IN (     'CLOSED', 'Marked for Deletion',     'Rejected'   ) THEN 'CLOSED' WHEN APP_RFRC_X IN (     'On Hold', 'Pending', 'Partially Saved',     'Waiting For Approval'   ) THEN 'PENDING' WHEN APP_RFRC_X = 'Inactive' THEN 'SUSPENDED' END AS ACCOUNT_STATUS_DESC,   NULL AS IS_TO_BE_DELETED,   NULL AS SHORT_NAME,   NULL AS DEFINITION,   NULL AS CUSTOM_BOOLEAN_01   ,   NULL AS CUSTOM_MEDIUM_STRING_01,   NULL AS CUSTOM_SMALL_STRING_01,   NULL AS CUSTOM_SMALL_STRING_02,   NULL AS CUSTOM_SMALL_STRING_03,   NULL AS PARTITIONING_KEY FROM   UBS_STATUS_CODES_REFERENCE AS USCR   JOIN V_STATUS_CODES_REFERENCE AS VSCR ON USCR.APP_CRDB_RFRC_C = VSCR.APP_CRDB_RFRC_C WHERE   APP_CATG_C = '700AST']]>
			</query>
		</queries>
	</output>	
	<output>
		<target dest="file" row-delimeter="~@^*^@~" col-delimeter="~##~">SECTOR.DAT</target>
		<queries>
			<prequery></prequery>
			<query>
				<![CDATA[SELECT SECTOR_CD,NULL AS TENANT_CD,NULL AS IS_BANK,NULL AS IS_BSA,NULL AS IS_CIB,NULL AS IS_FRGN_EMBASSY_OR_CONSULATE,NULL AS IS_MSB,NULL AS IS_NBFI,NULL AS IS_NGO,NULL AS IS_PSP,NULL AS IS_TO_BE_DELETED,SECTOR_DESC AS SECTOR_NAME,NULL AS SHORT_NAME,NULL AS DEFINITION,NULL AS CUSTOM_BOOLEAN_01,NULL AS CUSTOM_BOOLEAN_02,NULL AS CUSTOM_BOOLEAN_03,NULL AS CUSTOM_BOOLEAN_04,NULL AS CUSTOM_BOOLEAN_05,NULL AS CUSTOM_BOOLEAN_06,NULL AS CUSTOM_BOOLEAN_07,NULL AS CUSTOM_DATE_01,NULL AS CUSTOM_DATE_02,NULL AS CUSTOM_DOUBLE_01,NULL AS CUSTOM_MEDIUM_STRING_01,NULL AS CUSTOM_SMALL_STRING_01,NULL AS CUSTOM_SMALL_STRING_02,NULL AS CUSTOM_SMALL_STRING_03,NULL AS CUSTOM_SMALL_STRING_04,NULL AS CUSTOM_SMALL_STRING_05 FROM UBS_INDUSTRY_SECTOR]]>
			</query>
		</queries>
	</output>
	<output>
		<target dest="file" row-delimeter="~@^*^@~" col-delimeter="~##~">BALANCE.DAT</target>
		<queries>
			<prequery></prequery>
			<query>
				<![CDATA[SELECT   DISTINCT UAC.ACCT_UAN AS ACCOUNT_KEY,   CASE WHEN CAST(BALANCE_LOCAL_DATE_TIME AS DATE) < '01/01/1900' THEN '01/01/1900 00:00:00.000' ELSE CONCAT(     CONVERT(       VARCHAR,       CAST(BALANCE_LOCAL_DATE_TIME AS DATE),       103     ),     ' 00:00:00.000'   ) END as BALANCE_LOCAL_DATE_TIME,   CASE WHEN BAL_TYPE_CD = '97'   and BAL_CD = '40' THEN '1001' WHEN BAL_TYPE_CD = '02'   and BAL_CD = '10' THEN '1003' END AS BALANCE_TYPE_CD,   NULL AS TENANT_CD,   NULL AS ACCT_CURR_VALUE,   NULL AS BALANCE_GLOBAL_DATE_TIME,   BASE_CURR_CD AS BASE_CURR_CD,   replace(BASE_CURR_VALUE, '+', '') AS BASE_CURR_VALUE,   NULL AS LOCAL_TIME_ZONE_CD,   ORIG_CURR_CD AS ORIG_CURR_CD,   replace(ORIG_CURR_VALUE, '+', '') AS ORIG_CURR_VALUE,   NULL AS CUSTOM_BOOLEAN_01,   NULL AS CUSTOM_BOOLEAN_02,   NULL AS CUSTOM_DATE_01,   NULL AS CUSTOM_DATE_02,   NULL AS CUSTOM_DOUBLE_01,   NULL AS CUSTOM_DOUBLE_02,   NULL AS CUSTOM_MEDIUM_STRING_01,   NULL AS CUSTOM_SMALL_STRING_01,   NULL AS CUSTOM_SMALL_STRING_02,   NULL AS CUSTOM_SMALL_STRING_03,   NULL AS CUSTOM_SMALL_STRING_04,   NULL AS CUSTOM_SMALL_STRING_05,   NULL AS BALANCE_CURR_CD FROM   UBS_BALANCE UB   LEFT JOIN UBS_ACCOUNT_CONVERSION UAC ON UB.ACCOUNT_KEY = UAC.ACCOUNT_NUMBER WHERE   UAC.ACCT_STAT_CDE = 'A' ]]>
			</query>
		</queries>
	</output>
	<output>
		<target dest="file" row-delimeter="~@^*^@~" col-delimeter="~##~">TRADE.DAT</target>
		<queries>
			<prequery></prequery>
			<query>
				<![CDATA[ WITH SPLIT_RR_CD AS (   SELECT     A.REPRESENTATIVE_KEY,     A.SPLIT_KEY,     A.REPRESENTATIVE_SPLIT,     A.TRADE_KEY,     CASE WHEN CNT >= 1 THEN 'S' ELSE 'R' END AS SPLIT_RR_CD   FROM     (       SELECT         S.REPRESENTATIVE_KEY,         F2.REPRESENTATIVE_SPLIT,         F2.SPLIT_KEY,         S.TRADE_KEY,         COUNT(*) AS CNT,         DENSE_RANK() OVER(           PARTITION BY F2.REPRESENTATIVE_SPLIT           ORDER BY             F2.REPRESENTATIVE_SPLIT,             F2.SPLIT_KEY         ) AS RNK       FROM         (           SELECT             F1.REPRESENTATIVE_KEY,             F1.SOURCE_REP_ID,             T.T_TRANSACTION_NUMBER + T.T_TRANS_NUM_ALL + REPLACE(T.T_OTHER_MESS_CODE,' ','N' ) + RIGHT('0' + CONVERT(VARCHAR(2), DAY(T.BUSINESS_DATE)), 2) AS TRADE_KEY           FROM             UBS_TRADE AS T             LEFT JOIN UBS_FA_01 as F1 ON T.EXECUTING_TRADER_KEY = F1.REPRESENTATIVE_KEY           WHERE             V_ANNUITY = 'N'         ) AS S         LEFT JOIN UBS_FA_02 AS F2 ON S.SOURCE_REP_ID = F2.REPRESENTATIVE_SPLIT       GROUP BY         F2.REPRESENTATIVE_SPLIT,         F2.SPLIT_KEY,         S.REPRESENTATIVE_KEY,         S.TRADE_KEY     ) AS A   WHERE     A.RNK = 1     AND A.SPLIT_KEY IS NOT NULL     AND A.REPRESENTATIVE_SPLIT IS NOT NULL ) , CUSTOM_SMALL_STRING_01 AS (       SELECT         UP3.PRODUCT_KEY,         UP11.PRO_APPVL_C,         UP11.ED_END_DATE,         CASE WHEN UP11.PRO_APPVL_C = 'PE' THEN '1' ELSE '0' END AS CUSTOM_SMALL_STRING_01       FROM         UBS_PRODUCT_03 AS UP3         LEFT JOIN UBS_PRODUCT_11 AS UP11 ON UP3.PRO_I = UP11.PRO_I       WHERE         UP11.PRO_APPVL_C = 'PE' AND ED_END_DATE =' ' ), CUSTOM_SMALL_STRING_02 AS (  SELECT UP3.PRODUCT_KEY, CASE WHEN UP3.CUSIP_ID = UP12.FINRA_CUSIP THEN '1' ELSE '0' END AS CUSTOM_SMALL_STRING_02 FROM UBS_PRODUCT_03 AS UP3 LEFT JOIN UBS_PRODUCT_12 AS UP12 ON UP3.CUSIP_ID = UP12.FINRA_CUSIP ) SELECT   * FROM   (     SELECT       NULL AS TENANT_CD,       T.T_TRANSACTION_NUMBER + T.T_TRANS_NUM_ALL  + REPLACE(T.T_OTHER_MESS_CODE,' ','N') + RIGHT('0' + CONVERT(VARCHAR(2), DAY(T.BUSINESS_DATE)), 2) AS TRADE_KEY,       AC.ACCT_UAN AS ACCOUNT_KEY,       NULL AS ACCRUED_INTEREST,       NULL AS ACCT_CURR_AMOUNT,       NULL AS ACCT_CURR_COMMISSION,       CAST(T_PWJC_ORIG_COMM AS FLOAT) - CAST(BASE_CURR_COMMISSION AS FLOAT) AS ACCT_CURR_COMMISSION_WAIVED,       NULL AS ACCT_CURR_MARKUP,       NULL AS ACCT_CURR_MF_SALES_CHRG_AMOUNT,       NULL AS ACCT_CURR_NET_AMOUNT,       NULL AS ACCT_CURR_OTHER_FEES,       NULL AS ACCT_CURR_PENALTY,       NULL AS ACCT_CURR_TRADE_PRICE,       NULL AS AGG_UNIT_CD,       '0' AS AUTOMATIC_TRADE_CD,       BASE_CURR_AMOUNT,       'USD' AS BASE_CURR_CD,       BASE_CURR_COMMISSION,       CAST(T_PWJC_ORIG_COMM AS FLOAT) - CAST(BASE_CURR_COMMISSION AS FLOAT) AS BASE_CURR_COMMISSION_WAIVED,       BASE_CURR_MARKUP,       T_GROSS_PROFIT AS BASE_CURR_MF_SALES_CHRG_AMOUNT,       BASE_CURR_NET_AMOUNT,       CAST(         T_STATM_TAX AS DECIMAL(10, 2)       )+ CAST(         T_SEC_FEE AS DECIMAL(10, 2)       )+ CAST(         T_POSTAGE AS DECIMAL(10, 2)       )+ CAST(         T_FTAX_TAX_AMT2 AS DECIMAL(10, 2)       ) AS BASE_CURR_OTHER_FEES,       NULL AS BASE_CURR_PENALTY,       BASE_CURR_TRADE_PRICE,       CONCAT(         CONVERT(           VARCHAR,           CAST(BUSINESS_DATE AS DATE),           103         ),         ' 00:00:00.000'       ) AS BUSINESS_DATE,       CAPACITY_CD,       NULL AS COL1,       CASE WHEN DIRECTION_CD = '0' THEN 'B' WHEN DIRECTION_CD = '1' THEN 'S' END AS DIRECTION_CD,       DISCRETIONARY_CD,       NULL AS EXECUTER_ID,       NULL AS EXECUTER_PARTY_KEY,       T.EXECUTING_TRADER_KEY,       EXECUTION_BRANCH_KEY,       CONCAT(         CONVERT(           VARCHAR,           CAST(             substring(               EXECUTION_GLOBAL_DATE_TIME, 1, 10             ) AS DATE           ),           103         ),         ' 00:00:00.000'       ) AS EXECUTION_GLOBAL_DATE_TIME,       CONCAT(         CONVERT(           VARCHAR,           CAST(             substring(EXECUTION_LOCAL_DATE_TIME, 1, 10) AS DATE           ),           103         ),         ' 00:00:00.000'       ) AS EXECUTION_LOCAL_DATE_TIME,       NULL AS EXECUTION_ORGANIZATION_KEY,       NULLIF(EXCHANGE_CD, '') AS EXCHANGE_CD,       NULL AS FOREIGN_COUNTRY_CD,       IS_AVERAGE_PRICE,       CASE WHEN T_OTHER_MESS_CODE = '5' THEN 1 ELSE 0 END AS IS_CANCEL,       '0' AS IS_CORRECT,       NULL AS IS_CROSS,       IS_MF_FREE_EXCHANGE,       IS_OPTION_EXERCISED,     CASE WHEN  IS_SOLICITED = 0 THEN 1 ELSE 0 END as IS_SOLICITED,       NULL AS LEAVES_QUANTITY,       NULL AS LOCAL_TIME_ZONE_CD,       NULL AS OPP_ACCOUNT_CATEGORY_CD,       NULL AS OPP_ACCOUNT_KEY,       NULL AS OPP_ACCOUNT_NUMBER,       NULL AS OPP_ORGANIZATION_KEY,       NULL AS ORDER_ENTRY_DATE_TIME,       NULL AS ORDER_ID,       NULL AS COL2,       ORDER_TYPE_CD,       ORIG_CURR_AMOUNT AS ORIG_CURR_AMOUNT,       'USD' AS ORIG_CURR_CD,       ORIG_CURR_COMMISSION AS ORIG_CURR_COMMISSION,       NULL AS ORIG_CURR_MARKUP,       T_GROSS_PROFIT AS ORIG_CURR_MF_SALES_CHRG_AMOUNT,       ORIG_CURR_NET_AMOUNT AS ORIG_CURR_NET_AMOUNT,       CAST(         T_STATM_TAX AS DECIMAL(10, 2)       )+ CAST(         T_SEC_FEE AS DECIMAL(10, 2)       )+ CAST(         T_POSTAGE AS DECIMAL(10, 2)       )+ CAST(         T_FTAX_TAX_AMT2 AS DECIMAL(10, 2)       ) AS ORIG_CURR_OTHER_FEES,       NULL AS ORIG_CURR_PENALTY,       BASE_CURR_TRADE_PRICE AS ORIG_CURR_TRADE_PRICE,       NULL AS ORIG_ORDER_ID,       ORIG_TRADE_ID,       NULL AS PERSON_INVOLVED_KEY,       NULL AS PERSON_INVOLVED_ROLE_CD,       T_SEC_NUMBER_SYMBOL AS PRODUCT_KEY,       NULL AS REGION_CD,       NULL AS SETTLE_DATE,       NULLIF(T_ORIGIN_SYSTEM, '') AS SOURCE_SYSTEM_CD,       T_ORIGIN_SYSTEM + T_TRADE_SYSTEM_CDE AS SOURCE_TRADE_ID,       NULL AS SOURCE_TRANSACTION_ID,       ISNULL(S.SPLIT_RR_CD, 'R') AS SPLIT_RR_CD,       TRADE_ID,       CASE WHEN T_EXCHANGE_BLOTTER <> '37' THEN T_QUANTITY ELSE (         CAST(           T_QUANTITY AS DECIMAL(10, 0)         ) + (           CAST(             T_MF_FSHR_QUAN AS DECIMAL(10, 5)           ) / 1000         )       ) END AS INSTRUMENT_QUANTITY,       CASE WHEN T_EXCHANGE_BLOTTER <> '37' THEN T_QUANTITY ELSE (         CAST(           T_QUANTITY AS DECIMAL(10, 0)         ) + (           CAST(             T_MF_FSHR_QUAN AS DECIMAL(10, 5)           ) / 1000         )       ) END AS QUANTITY,       TRANSACTION_CODE_CD,       NULL AS CUSTOM_DATE_01,       NULL AS CUSTOM_DATE_02,       NULL AS CUSTOM_DATE_03,       NULL AS CUSTOM_DOUBLE_01,       NULL AS CUSTOM_DOUBLE_02,       NULL AS CUSTOM_DOUBLE_03,       NULL AS CUSTOM_DOUBLE_04,       NULL AS CUSTOM_DOUBLE_05,       NULL AS CUSTOM_DOUBLE_06,       NULL AS CUSTOM_DOUBLE_07,       NULL AS CUSTOM_DOUBLE_08,       NULL AS CUSTOM_DOUBLE_09,       NULL AS CUSTOM_DOUBLE_10,       NULL AS CUSTOM_DOUBLE_11,       NULL AS CUSTOM_DOUBLE_12,       NULL AS CUSTOM_DOUBLE_13,       NULL AS CUSTOM_DOUBLE_14,       NULL AS CUSTOM_MEDIUM_STRING_01,       CSS.CUSTOM_SMALL_STRING_01,  CSS2.CUSTOM_SMALL_STRING_02,       NULL AS CUSTOM_SMALL_STRING_03,       NULL AS CUSTOM_SMALL_STRING_04,       NULL AS CUSTOM_SMALL_STRING_05,       NULL AS CUSTOM_SMALL_STRING_06,       NULL AS CUSTOM_SMALL_STRING_07,       NULL AS CUSTOM_SMALL_STRING_08,       NULL AS CUSTOM_SMALL_STRING_09,       NULL AS CUSTOM_SMALL_STRING_10,       NULL AS CUSTOM_SMALL_STRING_11,       NULL AS CUSTOM_SMALL_STRING_12,       NULL AS CUSTOM_SMALL_STRING_13,       NULL AS CUSTOM_SMALL_STRING_14,       NULL AS CUSTOM_SMALL_STRING_15,       NULL AS CUSTOM_SMALL_STRING_16,       NULL AS CUSTOM_SMALL_STRING_17,       NULL AS CUSTOM_SMALL_STRING_18,       NULL AS CUSTOM_SMALL_STRING_19,       NULL AS CUSTOM_SMALL_STRING_20,       NULL AS CLEARING_BROKER_ACCOUNT_KEY,       NULL AS CLEARING_BROKER_FEE_AMT,       NULL AS CLEARING_BROKER_RATE,       NULL AS CLEARING_BROKER_RATE_CURR_CD,       NULL AS CLEARING_BROKER_RATE_UOM_CD,       NULL AS CLEARING_BUSINESS_DATE,       NULL AS EXECUTING_BROKER_FIRM_CD,       NULL AS EXECUTING_BROKER_RATE,       NULL AS HAS_TIME_IND,       NULL AS LEGAL_ENTITY_ID,       NULL AS OPP_DESK_ID,       NULL AS OPP_LEGAL_ENTITY_ID,       NULL AS OPP_PORTFOLIO_ID,       NULL AS OPP_TRADER_KEY,       NULL AS VENUE_CD,       NULL AS CLEARING_BROKER_FIRM,       NULL AS CLEARING_STATUS_IND,       NULL AS DELTA,       NULL AS CONTRACT_PERIOD_CD,       NULL AS OPP_BRANCH_KEY,       NULL AS EXCHANGE_TRADE_TYPE_CD,       NULL AS EXCHANGE_TRADE_SUB_TYPE_CD,       NULL AS CLEARING_STATUS_CD,       NULL AS DELIVERY_TERM_CD,       CONCAT(         CONVERT(           VARCHAR,           CAST(REPORTED_DATE AS DATE),           103         ),         ' 00:00:00.000'       ) AS REPORTED_DATE,       NULL AS CORRECTION_TYPE_CD,       TRANSACTION_ACTION_CD,       CAST(         CASE WHEN T_MATURITY_DATE <> '' THEN CAST(           DATEDIFF(             DD,             CAST(T_TRADE_DATE AS DATE),             CAST(T_MATURITY_DATE AS DATE)           )/ (365.25 / 12) AS DECIMAL(10, 2)         ) END as int       ) AS TIME_TO_MATURITY,       NULLIF(COVERED_CD, '') AS COVERD_CD     FROM       UBS_TRADE AS T       LEFT JOIN SPLIT_RR_CD AS S ON S.TRADE_KEY = T.T_TRANSACTION_NUMBER + T.T_TRANS_NUM_ALL+ REPLACE(T.T_OTHER_MESS_CODE, ' ', 'N') + RIGHT('0' + CONVERT(VARCHAR(2), DAY(T.BUSINESS_DATE)), 2) LEFT JOIN UBS_ACCOUNT_CONVERSION AS AC ON REPLACE(AC.ACCOUNT_NUMBER, ' ', '') = SUBSTRING(T.ACCOUNT_KEY, 1, 7) 	  LEFT JOIN CUSTOM_SMALL_STRING_01 AS CSS ON CSS.PRODUCT_KEY = T.T_SEC_NUMBER_SYMBOL        LEFT JOIN CUSTOM_SMALL_STRING_02 AS CSS2 ON CSS2.PRODUCT_KEY = T.T_SEC_NUMBER_SYMBOL    WHERE       V_ANNUITY = 'N'       AND T_MATURITY_DATE <> '**********'       AND T_TRANS_NUM_ALL <> ''   ) PP   JOIN V_UDM_ACCOUNT AS UAM ON UAM.ACCOUNT_KEY = PP.ACCOUNT_KEY   JOIN V_UDM_PRODUCT AS UP3 ON UP3.PRODUCT_KEY = PP.PRODUCT_KEY   JOIN V_UDM_REPRESENTATIVE AS UR ON UR.REPRESENTATIVE_KEY = PP.EXECUTING_TRADER_KEY  ]]>
			</query>
		</queries>
	</output>
	<output>
	<target dest="file" row-delimeter="~@^*^@~" col-delimeter="~##~">VA_TRADE.DAT</target>
		<queries>
			<prequery></prequery>
			<query>
				<![CDATA[WITH CUSTOM_SMALL_STRING_01 AS (       SELECT         UP3.PRODUCT_KEY,         UP11.PRO_APPVL_C,         UP11.ED_END_DATE,         CASE WHEN UP11.PRO_APPVL_C = 'PE' THEN '1' ELSE '0' END AS CUSTOM_SMALL_STRING_01       FROM         UBS_PRODUCT_03 AS UP3         LEFT JOIN UBS_PRODUCT_11 AS UP11 ON UP3.PRO_I = UP11.PRO_I       WHERE         UP11.PRO_APPVL_C = 'PE' AND ED_END_DATE =' ') SELECT   * FROM   (     SELECT       NULL AS TENANT_CD,       T.T_TRANSACTION_NUMBER + T.T_TRANS_NUM_ALL + REPLACE(T.T_OTHER_MESS_CODE,' ','N') + RIGHT('0' + CONVERT(VARCHAR(2), DAY(T.BUSINESS_DATE)), 2) AS TRADE_KEY,       AC.ACCT_UAN AS ACCOUNT_KEY,       NULL AS ACCT_CURR_TRADE_PRICE,       '0' AS AUTOMATIC_TRADE_CD,       BASE_CURR_AMOUNT,       'USD' AS BASE_CURR_CD,       BASE_CURR_COMMISSION,       BASE_CURR_TRADE_PRICE,       NULL AS CONTRACT_KEY,       EXECUTION_BRANCH_KEY,       CASE WHEN T_OTHER_MESS_CODE = '5' THEN 1 ELSE 0 END AS IS_CANCEL,       ORIG_CURR_AMOUNT,       'USD' AS ORIG_CURR_CD,       ORIG_CURR_COMMISSION,       BASE_CURR_TRADE_PRICE AS ORIG_CURR_TRADE_PRICE,       T_SEC_NUMBER_SYMBOL AS PRODUCT_KEY,       NULL AS TRADE_DATE_TIME,       NULL AS TRADE_QUANTITY,       TRANSACTION_CODE_CD,       NULL AS CUSTOM_BOOLEAN_01,       NULL AS CUSTOM_BOOLEAN_02,       NULL AS CUSTOM_DATE_01,       NULL AS CUSTOM_DATE_02,       NULL AS CUSTOM_DOUBLE_01,       NULL AS CUSTOM_DOUBLE_02,       NULL AS CUSTOM_DOUBLE_03,       NULL AS CUSTOM_MEDIUM_STRING_01,       CSS.CUSTOM_SMALL_STRING_01,       NULL AS CUSTOM_SMALL_STRING_02,       NULL AS CUSTOM_SMALL_STRING_03,       NULL AS CUSTOM_SMALL_STRING_04,       NULL AS CUSTOM_SMALL_STRING_05,       CONCAT(         CONVERT(           VARCHAR,           CAST(REPORTED_DATE AS DATE),           103         ),         ' 00:00:00.000'       ) AS REPORTED_DATE,       CAST(         CASE WHEN T_MATURITY_DATE <> '' THEN CAST(           DATEDIFF(             DD,             CAST(T_TRADE_DATE AS DATE),             CAST(T_MATURITY_DATE AS DATE)           )/ (365.25 / 12) AS DECIMAL(10, 2)         ) END as int       ) AS TIME_TO_MATURITY,       EXECUTING_TRADER_KEY,       CASE WHEN  IS_SOLICITED = 0 THEN 1 ELSE 0 END as IS_SOLICITED     FROM       UBS_TRADE AS T       LEFT JOIN UBS_ACCOUNT_CONVERSION AS AC ON REPLACE(AC.ACCOUNT_NUMBER, ' ', '') = SUBSTRING(T.ACCOUNT_KEY, 1, 7) 	  LEFT JOIN CUSTOM_SMALL_STRING_01 AS CSS ON CSS.PRODUCT_KEY = T.T_SEC_NUMBER_SYMBOL 	WHERE       V_ANNUITY = 'Y'       AND T_MATURITY_DATE <> '**********'       AND T_TRANS_NUM_ALL <> ''   ) PP   JOIN V_UDM_ACCOUNT AS UAM ON UAM.ACCOUNT_KEY = PP.ACCOUNT_KEY   JOIN V_UDM_PRODUCT AS UP3 ON UP3.PRODUCT_KEY = PP.PRODUCT_KEY   JOIN V_UDM_REPRESENTATIVE AS UR ON UR.REPRESENTATIVE_KEY = PP.EXECUTING_TRADER_KEY ]]>
			</query>
		</queries>
	</output>
	<output>
		<target dest="file" row-delimeter="~@^*^@~" col-delimeter="~##~">TRANSACTIONS.DAT</target>
		<queries>
			<prequery></prequery>
			<query>
				<![CDATA[ SELECT    transaction_key,     NULL,     AC.acct_uan AS ACCOUNT_KEY,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     Replace(      Ltrim(        Replace(base_curr_amount, '+', ' ')     ),       ' ',      '0'    ) AS BASE_CURR_AMOUNT,    NULL,    NULL,    NULL,    NULL,    NULL,    NULL,    NULL,    NULL,    NULL,    NULL,    NULL,    execution_branch_key,    NULL,    Concat(      CONVERT(        VARCHAR,        Cast(          execution_local_date_time AS DATE       ),         103     ),       ' 00:00:00.000'   ) AS EXECUTION_LOCAL_DATE_TIME,    NULL,    NULL,    NULL,    NULL,    NULL,    NULL,    NULL,    NULL,    NULL,    NULL,    NULL,    NULL,    NULL,    NULL,    NULL,    NULL,    NULL,    NULL,    NULL,    NULL,    NULL,    NULL,    NULL,    NULL,    NULL,    Replace(     Ltrim(       Replace(base_curr_amount, '+', ' ')      ),      ' ',       '0'   ) AS ORIG_CURR_AMOUNT,     NULL,     NULL,     NULL,     NULL,     NULL,     case when UT.product_key = '000000' then 'USD000000' else UT.product_key end as product_key,    NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     CASE WHEN TRANSACTION_CODE_CD IN (      'PWCK', 'LOCL', 'FRGN', 'THRD', 'LOCL',       'DEP1', 'RTNA', 'D023', 'NONL', 'DEPK',       'RTNM', '113M', 'GOVT', 'DEP3', 'CERT',       'DEPK', 'CINT', 'THRD', 'RTNN', 'DEPB',       'RTNA', 'DEPB', 'PWCK', 'FTS2', 'DESW',       'RTNL', 'DEMF', 'RTNI', 'D025', 'LOCL',       'DEPR', 'RTNC', 'RTNF', 'MONY', 'GOVT',       'RTNF', 'D027', 'TRAV', 'RTNB', 'RTNA',       'D036', 'DESO', 'DEPH', 'DEP3', 'BANK',       'DEPH', 'CERT', 'TRAV', 'THRD', '113A',       'DEPR', 'MONY', 'RTNC', 'DESO', 'DEP9',       'FRGN', 'BANK', 'CINT', '819', '169',       'DEMF', 'RTNC', 'TRAV', 'D035', 'MONY',       'RTNK', 'BANK', 'NONL', 'D026', 'DEP1',       'RTNE', 'CERT', 'DESW', 'RTNL', 'FTS2',       'CINT', 'RTNH', 'RTNJ', 'RTND', 'PWCK',       'D024', 'RTNG', 'GOVT', 'NONL', 'DEP9',       'RTNJ', 'FRGN', 'NCD8'    ) THEN '1' WHEN TRANSACTION_CODE_CD IN (      'ACH1', 'W025', 'LOC9', 'FTS1', 'ACH1',       'WITO', 'WIT9', 'WMMF', 'MMR4', 'WIT2',       'WITG', 'WISO', 'WITZ', 'WITU', 'WITU',       'WIT1', 'WITN', 'WIT9', 'WISW', 'WITH',       'WIMF', 'WITQ', 'W023', 'WIT8', 'ACH1',       'WITN', 'W027', 'WISO', 'WIT1', 'MMR4',       'WIST', 'WITA', 'WPWK', 'W035', 'WIT7',       'WITY', 'WIT3', 'FTS1', 'W024', 'WPWK',       'FEFP', 'WIMF', 'WITX', 'W026', 'WITY',       'WITF', 'WITJ', 'WITC', 'W036', '659',      'FEFS', 'WIST', 'WISW'   ) THEN '3' WHEN TRANSACTION_CODE_CD IN (     'PWCK', 'LOCL', 'FRGN', 'THRD', 'LOCL',      'DEP1', 'RTNA', 'D023', 'NONL', 'DEPK',      'RTNM', '113M', 'GOVT', 'DEP3', 'CERT',      'DEPK', 'CINT', 'THRD', 'RTNN', 'DEPB',      'RTNA', 'DEPB', 'PWCK', 'FTS2', 'DESW',      'RTNL', 'DEMF', 'RTNI', 'D025', 'LOCL',      'DEPR', 'RTNC', 'RTNF', 'MONY', 'GOVT',      'RTNF', 'D027', 'TRAV', 'RTNB', 'RTNA',      'D036', 'DESO', 'DEPH', 'DEP3', 'BANK',      'DEPH', 'CERT', 'TRAV', 'THRD', '113A',      'DEPR', 'MONY', 'RTNC', 'DESO', 'DEP9',      'FRGN', 'BANK', 'CINT', '819', '169',      'DEMF', 'RTNC', 'TRAV', 'D035', 'MONY',      'RTNK', 'BANK', 'NONL', 'D026', 'DEP1',      'RTNE', 'CERT', 'DESW', 'RTNL', 'FTS2',      'CINT', 'RTNH', 'RTNJ', 'RTND', 'PWCK',      'D024', 'RTNG', 'GOVT', 'NONL', 'DEP9',      'RTNJ', 'FRGN', 'NCD8'   ) THEN '5' WHEN TRANSACTION_CODE_CD IN (     'ACH1', 'W025', 'LOC9', 'FTS1', 'ACH1',      'WITO', 'WIT9', 'WMMF', 'MMR4', 'WIT2',      'WITG', 'WISO', 'WITZ', 'WITU', 'WITU',      'WIT1', 'WITN', 'WIT9', 'WISW', 'WITH',      'WIMF', 'WITQ', 'W023', 'WIT8', 'ACH1',      'WITN', 'W027', 'WISO', 'WIT1', 'MMR4',      'WIST', 'WITA', 'WPWK', 'W035', 'WIT7',      'WITY', 'WIT3', 'FTS1', 'W024', 'WPWK',      'FEFP', 'WIMF', 'WITX', 'W026', 'WITY',      'WITF', 'WITJ', 'WITC', 'W036', '659',       'FEFS', 'WIST', 'WISW'    ) THEN '7' WHEN TRANSACTION_CODE_CD IN (      'ACH1', 'W025', 'LOC9', 'FTS1', 'ACH1',       'WITO', 'WIT9', 'WMMF', 'MMR4', 'WIT2',       'WITG', 'WISO', 'WITZ', 'WITU', 'WITU',       'WIT1', 'WITN', 'WIT9', 'WISW', 'WITH',       'WIMF', 'WITQ', 'W023', 'WIT8', 'ACH1',       'WITN', 'W027', 'WISO', 'WIT1', 'MMR4',       'WIST', 'WITA', 'WPWK', 'W035', 'WIT7',       'WITY', 'WIT3', 'FTS1', 'W024', 'WPWK',       'FEFP', 'WIMF', 'WITX', 'W026', 'WITY',       'WITF', 'WITJ', 'WITC', 'W036', '659',      'FEFS', 'WIST', 'WISW'   ) THEN '13' WHEN TRANSACTION_CODE_CD IN (      'PWCK', 'LOCL', 'FRGN', 'THRD', 'LOCL',       'DEP1', 'RTNA', 'D023', 'NONL', 'DEPK',       'RTNM', '113M', 'GOVT', 'DEP3', 'CERT',       'DEPK', 'CINT', 'THRD', 'RTNN', 'DEPB',       'RTNA', 'DEPB', 'PWCK', 'FTS2', 'DESW',       'RTNL', 'DEMF', 'RTNI', 'D025', 'LOCL',       'DEPR', 'RTNC', 'RTNF', 'MONY', 'GOVT',       'RTNF', 'D027', 'TRAV', 'RTNB', 'RTNA',       'D036', 'DESO', 'DEPH', 'DEP3', 'BANK',       'DEPH', 'CERT', 'TRAV', 'THRD', '113A',       'DEPR', 'MONY', 'RTNC', 'DESO', 'DEP9',       'FRGN', 'BANK', 'CINT', '819', '169',       'DEMF', 'RTNC', 'TRAV', 'D035', 'MONY',       'RTNK', 'BANK', 'NONL', 'D026', 'DEP1',       'RTNE', 'CERT', 'DESW', 'RTNL', 'FTS2',       'CINT', 'RTNH', 'RTNJ', 'RTND', 'PWCK',       'D024', 'RTNG', 'GOVT', 'NONL', 'DEP9',       'RTNJ', 'FRGN', 'NCD8'    ) THEN '15' WHEN TRANSACTION_CODE_CD IN ('ESPR', 'ESPR') THEN '17' WHEN TRANSACTION_CODE_CD IN (      'PWCK', 'LOCL', 'FRGN', 'THRD', 'LOCL',       'DEP1', 'RTNA', 'D023', 'NONL', 'DEPK',       'RTNM', '113M', 'GOVT', 'DEP3', 'CERT',       'DEPK', 'CINT', 'THRD', 'RTNN', 'DEPB',       'RTNA', 'DEPB', 'PWCK', 'FTS2', 'DESW',       'RTNL', 'DEMF', 'RTNI', 'D025', 'LOCL',       'DEPR', 'RTNC', 'RTNF', 'MONY', 'GOVT',       'RTNF', 'D027', 'TRAV', 'RTNB', 'RTNA',       'D036', 'DESO', 'DEPH', 'DEP3', 'BANK',       'DEPH', 'CERT', 'TRAV', 'THRD', '113A',       'DEPR', 'MONY', 'RTNC', 'DESO', 'DEP9',       'FRGN', 'BANK', 'CINT', '819', '169',       'DEMF', 'RTNC', 'TRAV', 'D035', 'MONY',       'RTNK', 'BANK', 'NONL', 'D026', 'DEP1',       'RTNE', 'CERT', 'DESW', 'RTNL', 'FTS2',       'CINT', 'RTNH', 'RTNJ', 'RTND', 'PWCK',       'D024', 'RTNG', 'GOVT', 'NONL', 'DEP9',       'RTNJ', 'FRGN', 'NCD8'    ) THEN '18' WHEN TRANSACTION_CODE_CD IN (     'PWCK', 'LOCL', 'FRGN', 'THRD', 'LOCL',      'DEP1', 'RTNA', 'D023', 'NONL', 'DEPK',      'RTNM', '113M', 'GOVT', 'DEP3', 'CERT',      'DEPK', 'CINT', 'THRD', 'RTNN', 'DEPB',      'RTNA', 'DEPB', 'PWCK', 'FTS2', 'DESW',      'RTNL', 'DEMF', 'RTNI', 'D025', 'LOCL',      'DEPR', 'RTNC', 'RTNF', 'MONY', 'GOVT',      'RTNF', 'D027', 'TRAV', 'RTNB', 'RTNA',      'D036', 'DESO', 'DEPH', 'DEP3', 'BANK',      'DEPH', 'CERT', 'TRAV', 'THRD', '113A',      'DEPR', 'MONY', 'RTNC', 'DESO', 'DEP9',      'FRGN', 'BANK', 'CINT', '819', '169',      'DEMF', 'RTNC', 'TRAV', 'D035', 'MONY',      'RTNK', 'BANK', 'NONL', 'D026', 'DEP1',      'RTNE', 'CERT', 'DESW', 'RTNL', 'FTS2',      'CINT', 'RTNH', 'RTNJ', 'RTND', 'PWCK',      'D024', 'RTNG', 'GOVT', 'NONL', 'DEP9',      'RTNJ', 'FRGN', 'NCD8'   ) THEN '20' WHEN TRANSACTION_CODE_CD IN (      'ACH1', 'W025', 'LOC9', 'FTS1', 'ACH1',       'WITO', 'WIT9', 'WMMF', 'MMR4', 'WIT2',       'WITG', 'WISO', 'WITZ', 'WITU', 'WITU',       'WIT1', 'WITN', 'WIT9', 'WISW', 'WITH',       'WIMF', 'WITQ', 'W023', 'WIT8', 'ACH1',       'WITN', 'W027', 'WISO', 'WIT1', 'MMR4',       'WIST', 'WITA', 'WPWK', 'W035', 'WIT7',       'WITY', 'WIT3', 'FTS1', 'W024', 'WPWK',       'FEFP', 'WIMF', 'WITX', 'W026', 'WITY',       'WITF', 'WITJ', 'WITC', 'W036', '659',      'FEFS', 'WIST', 'WISW'   ) THEN '21' WHEN TRANSACTION_CODE_CD IN (      'DIV9', 'DIV1', 'DIV1', 'DIVA', 'DIV9',       'DIVF', 'DINP', 'DIVP', 'DIVA', 'CIL1',       'DIV1', 'DIVN', 'DIV1'    ) THEN '22' WHEN TRANSACTION_CODE_CD IN (     'FEEF', '123A', '129R', 'FEE5', '114R',      'FEFC', '122Q', 'LOC7', 'FEE4', 'FEEP',      '127A', 'FEAD', '113M', 'MBC1', 'FERT',      '131A', 'FEFC', 'FEES', 'MBC4', 'LFEE',      '413M', 'FPGF', 'FEEF', 'REB4', '129I',      'FEE4', '119M', 'MBCE', 'MBC3', 'FERB',      'BRK1', 'FERT', 'LFEE', '114I', 'LFEE',      '653D', 'FEED', 'LOC6', 'MBC2', 'OCD1',      '119C', '653T', 'FEE8', '117M', 'FEE9',      'FEFA', '116A', 'MBC3', '113A', '115Q',      '118M', 'OCD3', 'LOC8', 'OCD2', '121I',      'FEEF', '131M', 'FEE9', '132M', 'FEFP',      '116M', 'FEI1', 'FEE3', 'FEEP', '113A',      '130Q', 'FEAD', 'FEE5', '125A', 'MBC2',      ' ', 'FEFS', 'LOC5', '134M', 'FERB'    ) THEN '23' WHEN TRANSACTION_CODE_CD IN (     'PINT', 'INT1', 'INT9', 'REB3', 'CSCI',      'FINT', 'INT1', 'REB5', 'INTA', 'LPI1',      'IBAB', 'INT1', 'INT9'   ) THEN '25' WHEN TRANSACTION_CODE_CD IN (      'FEEF', '123A', '129R', 'FEE5', '114R',       'FEFC', '122Q', 'LOC7', 'FEE4', 'FEEP',       '127A', 'FEAD', '113M', 'MBC1', 'FERT',       '131A', 'FEFC', 'FEES', 'MBC4', 'LFEE',       '413M', 'FPGF', 'FEEF', 'REB4', '129I',       'FEE4', '119M', 'MBCE', 'MBC3', 'FERB',       'BRK1', 'FERT', 'LFEE', '114I', 'LFEE',       '653D', 'FEED', 'LOC6', 'MBC2', 'OCD1',       '119C', '653T', 'FEE8', '117M', 'FEE9',       'FEFA', '116A', 'MBC3', '113A', '115Q',       '118M', 'OCD3', 'LOC8', 'OCD2', '121I',       'FEEF', '131M', 'FEE9', '132M', 'FEFP',       '116M', 'FEI1', 'FEE3', 'FEEP', '113A',       '130Q', 'FEAD', 'FEE5', '125A', 'MBC2',       ' ', 'FEFS', 'LOC5', '134M', 'FERB'   ) THEN '26' WHEN TRANSACTION_CODE_CD IN (      'FEEF', '123A', '129R', 'FEE5', '114R',       'FEFC', '122Q', 'LOC7', 'FEE4', 'FEEP',       '127A', 'FEAD', '113M', 'MBC1', 'FERT',       '131A', 'FEFC', 'FEES', 'MBC4', 'LFEE',       '413M', 'FPGF', 'FEEF', 'REB4', '129I',       'FEE4', '119M', 'MBCE', 'MBC3', 'FERB',       'BRK1', 'FERT', 'LFEE', '114I', 'LFEE',       '653D', 'FEED', 'LOC6', 'MBC2', 'OCD1',       '119C', '653T', 'FEE8', '117M', 'FEE9',       'FEFA', '116A', 'MBC3', '113A', '115Q',       '118M', 'OCD3', 'LOC8', 'OCD2', '121I',       'FEEF', '131M', 'FEE9', '132M', 'FEFP',       '116M', 'FEI1', 'FEE3', 'FEEP', '113A',       '130Q', 'FEAD', 'FEE5', '125A', 'MBC2',       ' ', 'FEFS', 'LOC5', '134M', 'FERB'   ) THEN '27' WHEN TRANSACTION_CODE_CD IN (      'LFEE', 'LFEE', 'LFEE', 'LTF2', '656',      'MGN4', '656I', 'MGN4', 'LLC1'   ) THEN '30' WHEN TRANSACTION_CODE_CD IN (      'LFEE', 'LFEE', 'LFEE', 'LTF2', '656',      'MGN4', '656I', 'MGN4', 'LLC1'   ) THEN '31' WHEN TRANSACTION_CODE_CD IN (      'LFEE', 'LFEE', 'LFEE', 'LTF2', '656',      'MGN4', '656I', 'MGN4', 'LLC1'   ) THEN '33' WHEN TRANSACTION_CODE_CD IN (      'LFEE', 'LFEE', 'LFEE', 'LTF2', '656',      'MGN4', '656I', 'MGN4', 'LLC1'   ) THEN '34' WHEN TRANSACTION_CODE_CD IN (      'LFEE', 'LFEE', 'LFEE', 'LTF2', '656',      'MGN4', '656I', 'MGN4', 'LLC1'   ) THEN '36' WHEN TRANSACTION_CODE_CD IN (      'LFEE', 'LFEE', 'LFEE', 'LTF2', '656',      'MGN4', '656I', 'MGN4', 'LLC1'   ) THEN '38' WHEN TRANSACTION_CODE_CD IN (      'LFEE', 'LFEE', 'LFEE', 'LTF2', '656',      'MGN4', '656I', 'MGN4', 'LLC1'   ) THEN '40' WHEN TRANSACTION_CODE_CD IN (      'LFEE', 'LFEE', 'LFEE', 'LTF2', '656',      'MGN4', '656I', 'MGN4', 'LLC1'   ) THEN '41' WHEN TRANSACTION_CODE_CD IN (      'LFEE', 'LFEE', 'LFEE', 'LTF2', '656',      'MGN4', '656I', 'MGN4', 'LLC1'   ) THEN '43' WHEN TRANSACTION_CODE_CD IN ('MMRC', 'MMR2', 'MMRC', 'MMR3') THEN '45' WHEN TRANSACTION_CODE_CD IN ('MMRC', 'MMR2', 'MMRC', 'MMR3')  THEN '47' WHEN TRANSACTION_CODE_CD IN ('MMRC', 'MMR2', 'MMRC', 'MMR3') THEN '49' WHEN TRANSACTION_CODE_CD IN ('MMRC', 'MMR2', 'MMRC', 'MMR3') THEN '51' WHEN TRANSACTION_CODE_CD IN ('MMRC', 'MMR2', 'MMRC', 'MMR3') THEN '53' WHEN TRANSACTION_CODE_CD IN ('MMRC', 'MMR2', 'MMRC', 'MMR3')  THEN '55' WHEN TRANSACTION_CODE_CD IN ('MMRC', 'MMR2', 'MMRC', 'MMR3') THEN '57' WHEN TRANSACTION_CODE_CD IN (      '251Z', 'SUBP', 'DIV1', 'BILL', 'VIS1',       '150I', 'STP1', '150P', 'VIS1', 'SBPG',       'BILL', 'STP2', 'CTP1', 'SUBP', 'SBPG',       'SUBI', 'CTP1', 'SUBI', 'LLP5'    ) THEN '70' WHEN TRANSACTION_CODE_CD IN (     '251Z', 'SUBP', 'DIV1', 'BILL', 'VIS1',      '150I', 'STP1', '150P', 'VIS1', 'SBPG',      'BILL', 'STP2', 'CTP1', 'SUBP', 'SBPG',      'SUBI', 'CTP1', 'SUBI', 'LLP5'   ) THEN '72' WHEN TRANSACTION_CODE_CD IN (      '251Z', 'SUBP', 'DIV1', 'BILL', 'VIS1',       '150I', 'STP1', '150P', 'VIS1', 'SBPG',       'BILL', 'STP2', 'CTP1', 'SUBP', 'SBPG',       'SUBI', 'CTP1', 'SUBI', 'LLP5'    ) THEN '74' WHEN TRANSACTION_CODE_CD IN (     'TRF1', 'TRF8', 'TRF7', 'CNV4', 'TRF2',      'ONUS', 'TRFC', 'TRF1', 'TRF3', 'TRA1',      'TRF5', 'TRA2', 'TRF4', 'TRF4', 'WISP',      '411K', 'TRFA', 'ONUS', 'TRF7', '411I',      'TRFA', '251Z', 'LTF2', 'TRFN', 'TRF4',      'TRA2', '111K', 'TRFN', 'TRA1', 'CNV3',      'TRF2', '111I', 'TRF8', 'TRF5', '651Z',      '252Z', 'TRFC', '652Z', 'WISP', 'ASMS',      'TRF2'   ) THEN '109' WHEN TRANSACTION_CODE_CD IN (     'TRF1', 'TRF8', 'TRF7', 'CNV4', 'TRF2',      'ONUS', 'TRFC', 'TRF1', 'TRF3', 'TRA1',      'TRF5', 'TRA2', 'TRF4', 'TRF4', 'WISP',      '411K', 'TRFA', 'ONUS', 'TRF7', '411I',      'TRFA', '251Z', 'LTF2', 'TRFN', 'TRF4',      'TRA2', '111K', 'TRFN', 'TRA1', 'CNV3',      'TRF2', '111I', 'TRF8', 'TRF5', '651Z',      '252Z', 'TRFC', '652Z', 'WISP', 'ASMS',      'TRF2'   ) THEN '110' WHEN TRANSACTION_CODE_CD IN (     'TRF1', 'TRF8', 'TRF7', 'CNV4', 'TRF2',      'ONUS', 'TRFC', 'TRF1', 'TRF3', 'TRA1',      'TRF5', 'TRA2', 'TRF4', 'TRF4', 'WISP',      '411K', 'TRFA', 'ONUS', 'TRF7', '411I',      'TRFA', '251Z', 'LTF2', 'TRFN', 'TRF4',      'TRA2', '111K', 'TRFN', 'TRA1', 'CNV3',      'TRF2', '111I', 'TRF8', 'TRF5', '651Z',      '252Z', 'TRFC', '652Z', 'WISP', 'ASMS',      'TRF2'   ) THEN '111' WHEN TRANSACTION_CODE_CD IN (     'TRF1', 'TRF8', 'TRF7', 'CNV4', 'TRF2',      'ONUS', 'TRFC', 'TRF1', 'TRF3', 'TRA1',      'TRF5', 'TRA2', 'TRF4', 'TRF4', 'WISP',      '411K', 'TRFA', 'ONUS', 'TRF7', '411I',      'TRFA', '251Z', 'LTF2', 'TRFN', 'TRF4',      'TRA2', '111K', 'TRFN', 'TRA1', 'CNV3',      'TRF2', '111I', 'TRF8', 'TRF5', '651Z',      '252Z', 'TRFC', '652Z', 'WISP', 'ASMS',      'TRF2'   ) THEN '112' WHEN TRANSACTION_CODE_CD IN (     'TRF1', 'TRF8', 'TRF7', 'CNV4', 'TRF2',      'ONUS', 'TRFC', 'TRF1', 'TRF3', 'TRA1',      'TRF5', 'TRA2', 'TRF4', 'TRF4', 'WISP',      '411K', 'TRFA', 'ONUS', 'TRF7', '411I',      'TRFA', '251Z', 'LTF2', 'TRFN', 'TRF4',      'TRA2', '111K', 'TRFN', 'TRA1', 'CNV3',      'TRF2', '111I', 'TRF8', 'TRF5', '651Z',      '252Z', 'TRFC', '652Z', 'WISP', 'ASMS',      'TRF2'   ) THEN '113' WHEN TRANSACTION_CODE_CD IN (     'TRF1', 'TRF8', 'TRF7', 'CNV4', 'TRF2',      'ONUS', 'TRFC', 'TRF1', 'TRF3', 'TRA1',      'TRF5', 'TRA2', 'TRF4', 'TRF4', 'WISP',      '411K', 'TRFA', 'ONUS', 'TRF7', '411I',      'TRFA', '251Z', 'LTF2', 'TRFN', 'TRF4',      'TRA2', '111K', 'TRFN', 'TRA1', 'CNV3',      'TRF2', '111I', 'TRF8', 'TRF5', '651Z',      '252Z', 'TRFC', '652Z', 'WISP', 'ASMS',      'TRF2'   ) THEN '114' WHEN TRANSACTION_CODE_CD IN (     'TRF1', 'TRF8', 'TRF7', 'CNV4', 'TRF2',      'ONUS', 'TRFC', 'TRF1', 'TRF3', 'TRA1',      'TRF5', 'TRA2', 'TRF4', 'TRF4', 'WISP',      '411K', 'TRFA', 'ONUS', 'TRF7', '411I',      'TRFA', '251Z', 'LTF2', 'TRFN', 'TRF4',      'TRA2', '111K', 'TRFN', 'TRA1', 'CNV3',      'TRF2', '111I', 'TRF8', 'TRF5', '651Z',      '252Z', 'TRFC', '652Z', 'WISP', 'ASMS',      'TRF2'   ) THEN '115' WHEN TRANSACTION_CODE_CD IN (     'TRF1', 'TRF8', 'TRF7', 'CNV4', 'TRF2',      'ONUS', 'TRFC', 'TRF1', 'TRF3', 'TRA1',      'TRF5', 'TRA2', 'TRF4', 'TRF4', 'WISP',      '411K', 'TRFA', 'ONUS', 'TRF7', '411I',      'TRFA', '251Z', 'LTF2', 'TRFN', 'TRF4',      'TRA2', '111K', 'TRFN', 'TRA1', 'CNV3',      'TRF2', '111I', 'TRF8', 'TRF5', '651Z',      '252Z', 'TRFC', '652Z', 'WISP', 'ASMS',      'TRF2'   ) THEN '116' WHEN TRANSACTION_CODE_CD IN (     'TRF1', 'TRF8', 'TRF7', 'CNV4', 'TRF2',      'ONUS', 'TRFC', 'TRF1', 'TRF3', 'TRA1',      'TRF5', 'TRA2', 'TRF4', 'TRF4', 'WISP',      '411K', 'TRFA', 'ONUS', 'TRF7', '411I',      'TRFA', '251Z', 'LTF2', 'TRFN', 'TRF4',      'TRA2', '111K', 'TRFN', 'TRA1', 'CNV3',      'TRF2', '111I', 'TRF8', 'TRF5', '651Z',      '252Z', 'TRFC', '652Z', 'WISP', 'ASMS',      'TRF2'   ) THEN '120' WHEN TRANSACTION_CODE_CD IN (     'TRF1', 'TRF8', 'TRF7', 'CNV4', 'TRF2',      'ONUS', 'TRFC', 'TRF1', 'TRF3', 'TRA1',      'TRF5', 'TRA2', 'TRF4', 'TRF4', 'WISP',      '411K', 'TRFA', 'ONUS', 'TRF7', '411I',      'TRFA', '251Z', 'LTF2', 'TRFN', 'TRF4',      'TRA2', '111K', 'TRFN', 'TRA1', 'CNV3',      'TRF2', '111I', 'TRF8', 'TRF5', '651Z',      '252Z', 'TRFC', '652Z', 'WISP', 'ASMS',      'TRF2'   ) THEN '121' WHEN TRANSACTION_CODE_CD IN (     'TRF1', 'TRF8', 'TRF7', 'CNV4', 'TRF2',      'ONUS', 'TRFC', 'TRF1', 'TRF3', 'TRA1',      'TRF5', 'TRA2', 'TRF4', 'TRF4', 'WISP',      '411K', 'TRFA', 'ONUS', 'TRF7', '411I',      'TRFA', '251Z', 'LTF2', 'TRFN', 'TRF4',      'TRA2', '111K', 'TRFN', 'TRA1', 'CNV3',      'TRF2', '111I', 'TRF8', 'TRF5', '651Z',      '252Z', 'TRFC', '652Z', 'WISP', 'ASMS',      'TRF2'   ) THEN '131' WHEN TRANSACTION_CODE_CD IN (     'TRF1', 'TRF8', 'TRF7', 'CNV4', 'TRF2',      'ONUS', 'TRFC', 'TRF1', 'TRF3', 'TRA1',      'TRF5', 'TRA2', 'TRF4', 'TRF4', 'WISP',      '411K', 'TRFA', 'ONUS', 'TRF7', '411I',      'TRFA', '251Z', 'LTF2', 'TRFN', 'TRF4',      'TRA2', '111K', 'TRFN', 'TRA1', 'CNV3',      'TRF2', '111I', 'TRF8', 'TRF5', '651Z',      '252Z', 'TRFC', '652Z', 'WISP', 'ASMS',      'TRF2'   ) THEN '132' WHEN TRANSACTION_CODE_CD IN (     'TRF1', 'TRF8', 'TRF7', 'CNV4', 'TRF2',      'ONUS', 'TRFC', 'TRF1', 'TRF3', 'TRA1',      'TRF5', 'TRA2', 'TRF4', 'TRF4', 'WISP',      '411K', 'TRFA', 'ONUS', 'TRF7', '411I',      'TRFA', '251Z', 'LTF2', 'TRFN', 'TRF4',      'TRA2', '111K', 'TRFN', 'TRA1', 'CNV3',      'TRF2', '111I', 'TRF8', 'TRF5', '651Z',      '252Z', 'TRFC', '652Z', 'WISP', 'ASMS',      'TRF2'   ) THEN '133' WHEN TRANSACTION_CODE_CD IN (     'TRF1', 'TRF8', 'TRF7', 'CNV4', 'TRF2',      'ONUS', 'TRFC', 'TRF1', 'TRF3', 'TRA1',      'TRF5', 'TRA2', 'TRF4', 'TRF4', 'WISP',      '411K', 'TRFA', 'ONUS', 'TRF7', '411I',      'TRFA', '251Z', 'LTF2', 'TRFN', 'TRF4',      'TRA2', '111K', 'TRFN', 'TRA1', 'CNV3',      'TRF2', '111I', 'TRF8', 'TRF5', '651Z',      '252Z', 'TRFC', '652Z', 'WISP', 'ASMS',      'TRF2'   ) THEN '134' WHEN TRANSACTION_CODE_CD IN (     'TRF1', 'TRF8', 'TRF7', 'CNV4', 'TRF2',      'ONUS', 'TRFC', 'TRF1', 'TRF3', 'TRA1',      'TRF5', 'TRA2', 'TRF4', 'TRF4', 'WISP',      '411K', 'TRFA', 'ONUS', 'TRF7', '411I',      'TRFA', '251Z', 'LTF2', 'TRFN', 'TRF4',      'TRA2', '111K', 'TRFN', 'TRA1', 'CNV3',      'TRF2', '111I', 'TRF8', 'TRF5', '651Z',      '252Z', 'TRFC', '652Z', 'WISP', 'ASMS',      'TRF2'   ) THEN '135' WHEN TRANSACTION_CODE_CD IN (     'TRF1', 'TRF8', 'TRF7', 'CNV4', 'TRF2',      'ONUS', 'TRFC', 'TRF1', 'TRF3', 'TRA1',      'TRF5', 'TRA2', 'TRF4', 'TRF4', 'WISP',      '411K', 'TRFA', 'ONUS', 'TRF7', '411I',      'TRFA', '251Z', 'LTF2', 'TRFN', 'TRF4',      'TRA2', '111K', 'TRFN', 'TRA1', 'CNV3',      'TRF2', '111I', 'TRF8', 'TRF5', '651Z',      '252Z', 'TRFC', '652Z', 'WISP', 'ASMS',      'TRF2'   ) THEN '136' WHEN TRANSACTION_CODE_CD IN (     'TRF1', 'TRF8', 'TRF7', 'CNV4', 'TRF2',      'ONUS', 'TRFC', 'TRF1', 'TRF3', 'TRA1',      'TRF5', 'TRA2', 'TRF4', 'TRF4', 'WISP',      '411K', 'TRFA', 'ONUS', 'TRF7', '411I',      'TRFA', '251Z', 'LTF2', 'TRFN', 'TRF4',      'TRA2', '111K', 'TRFN', 'TRA1', 'CNV3',      'TRF2', '111I', 'TRF8', 'TRF5', '651Z',      '252Z', 'TRFC', '652Z', 'WISP', 'ASMS',      'TRF2'   ) THEN '137' WHEN TRANSACTION_CODE_CD IN (     'TRF1', 'TRF8', 'TRF7', 'CNV4', 'TRF2',      'ONUS', 'TRFC', 'TRF1', 'TRF3', 'TRA1',      'TRF5', 'TRA2', 'TRF4', 'TRF4', 'WISP',      '411K', 'TRFA', 'ONUS', 'TRF7', '411I',      'TRFA', '251Z', 'LTF2', 'TRFN', 'TRF4',      'TRA2', '111K', 'TRFN', 'TRA1', 'CNV3',      'TRF2', '111I', 'TRF8', 'TRF5', '651Z',      '252Z', 'TRFC', '652Z', 'WISP', 'ASMS',      'TRF2'   ) THEN '138' WHEN TRANSACTION_CODE_CD IN (     'TRF1', 'TRF8', 'TRF7', 'CNV4', 'TRF2',      'ONUS', 'TRFC', 'TRF1', 'TRF3', 'TRA1',      'TRF5', 'TRA2', 'TRF4', 'TRF4', 'WISP',      '411K', 'TRFA', 'ONUS', 'TRF7', '411I',      'TRFA', '251Z', 'LTF2', 'TRFN', 'TRF4',      'TRA2', '111K', 'TRFN', 'TRA1', 'CNV3',      'TRF2', '111I', 'TRF8', 'TRF5', '651Z',      '252Z', 'TRFC', '652Z', 'WISP', 'ASMS',      'TRF2'   ) THEN '139' WHEN TRANSACTION_CODE_CD IN (     'TRF1', 'TRF8', 'TRF7', 'CNV4', 'TRF2',      'ONUS', 'TRFC', 'TRF1', 'TRF3', 'TRA1',      'TRF5', 'TRA2', 'TRF4', 'TRF4', 'WISP',      '411K', 'TRFA', 'ONUS', 'TRF7', '411I',      'TRFA', '251Z', 'LTF2', 'TRFN', 'TRF4',      'TRA2', '111K', 'TRFN', 'TRA1', 'CNV3',      'TRF2', '111I', 'TRF8', 'TRF5', '651Z',      '252Z', 'TRFC', '652Z', 'WISP', 'ASMS',      'TRF2'   ) THEN '140' WHEN TRANSACTION_CODE_CD IN (     'TRF1', 'TRF8', 'TRF7', 'CNV4', 'TRF2',      'ONUS', 'TRFC', 'TRF1', 'TRF3', 'TRA1',      'TRF5', 'TRA2', 'TRF4', 'TRF4', 'WISP',      '411K', 'TRFA', 'ONUS', 'TRF7', '411I',      'TRFA', '251Z', 'LTF2', 'TRFN', 'TRF4',      'TRA2', '111K', 'TRFN', 'TRA1', 'CNV3',      'TRF2', '111I', 'TRF8', 'TRF5', '651Z',      '252Z', 'TRFC', '652Z', 'WISP', 'ASMS',      'TRF2'   ) THEN '141' WHEN TRANSACTION_CODE_CD IN (     'TRF1', 'TRF8', 'TRF7', 'CNV4', 'TRF2',      'ONUS', 'TRFC', 'TRF1', 'TRF3', 'TRA1',      'TRF5', 'TRA2', 'TRF4', 'TRF4', 'WISP',      '411K', 'TRFA', 'ONUS', 'TRF7', '411I',      'TRFA', '251Z', 'LTF2', 'TRFN', 'TRF4',      'TRA2', '111K', 'TRFN', 'TRA1', 'CNV3',      'TRF2', '111I', 'TRF8', 'TRF5', '651Z',      '252Z', 'TRFC', '652Z', 'WISP', 'ASMS',      'TRF2'   ) THEN '142' WHEN TRANSACTION_CODE_CD IN ('MMRC', 'MMR2', 'MMRC', 'MMR3') THEN '143' WHEN TRANSACTION_CODE_CD IN ('MMRC', 'MMR2', 'MMRC',  'MMR3') THEN '144' WHEN TRANSACTION_CODE_CD IN ('MMRC', 'MMR2', 'MMRC', 'MMR3') THEN '145' WHEN TRANSACTION_CODE_CD IN ('MMRC', 'MMR2', 'MMRC', 'MMR3') THEN '146' WHEN TRANSACTION_CODE_CD IN ('MMRC', 'MMR2', 'MMRC', 'MMR3') THEN '147' WHEN TRANSACTION_CODE_CD IN ('MMRC', 'MMR2', 'MMRC',  'MMR3') THEN '148' WHEN TRANSACTION_CODE_CD IN ('MMRC', 'MMR2', 'MMRC', 'MMR3') THEN '149' WHEN TRANSACTION_CODE_CD IN ('MMRC', 'MMR2', 'MMRC', 'MMR3') THEN '150' WHEN TRANSACTION_CODE_CD IN (     'TRF1', 'TRF8', 'TRF7', 'CNV4', 'TRF2',      'ONUS', 'TRFC', 'TRF1', 'TRF3', 'TRA1',      'TRF5', 'TRA2', 'TRF4', 'TRF4', 'WISP',      '411K', 'TRFA', 'ONUS', 'TRF7', '411I',      'TRFA', '251Z', 'LTF2', 'TRFN', 'TRF4',      'TRA2', '111K', 'TRFN', 'TRA1', 'CNV3',      'TRF2', '111I', 'TRF8', 'TRF5', '651Z',      '252Z', 'TRFC', '652Z', 'WISP', 'ASMS',      'TRF2'   ) THEN '155' WHEN TRANSACTION_CODE_CD IN (     'TRF1', 'TRF8', 'TRF7', 'CNV4', 'TRF2',      'ONUS', 'TRFC', 'TRF1', 'TRF3', 'TRA1',      'TRF5', 'TRA2', 'TRF4', 'TRF4', 'WISP',      '411K', 'TRFA', 'ONUS', 'TRF7', '411I',      'TRFA', '251Z', 'LTF2', 'TRFN', 'TRF4',      'TRA2', '111K', 'TRFN', 'TRA1', 'CNV3',      'TRF2', '111I', 'TRF8', 'TRF5', '651Z',      '252Z', 'TRFC', '652Z', 'WISP', 'ASMS',      'TRF2'   ) THEN '156' WHEN TRANSACTION_CODE_CD IN (     'TRF1', 'TRF8', 'TRF7', 'CNV4', 'TRF2',      'ONUS', 'TRFC', 'TRF1', 'TRF3', 'TRA1',      'TRF5', 'TRA2', 'TRF4', 'TRF4', 'WISP',      '411K', 'TRFA', 'ONUS', 'TRF7', '411I',      'TRFA', '251Z', 'LTF2', 'TRFN', 'TRF4',      'TRA2', '111K', 'TRFN', 'TRA1', 'CNV3',      'TRF2', '111I', 'TRF8', 'TRF5', '651Z',      '252Z', 'TRFC', '652Z', 'WISP', 'ASMS',      'TRF2'   ) THEN '157' WHEN TRANSACTION_CODE_CD IN (     'TRF1', 'TRF8', 'TRF7', 'CNV4', 'TRF2',      'ONUS', 'TRFC', 'TRF1', 'TRF3', 'TRA1',      'TRF5', 'TRA2', 'TRF4', 'TRF4', 'WISP',      '411K', 'TRFA', 'ONUS', 'TRF7', '411I',      'TRFA', '251Z', 'LTF2', 'TRFN', 'TRF4',      'TRA2', '111K', 'TRFN', 'TRA1', 'CNV3',      'TRF2', '111I', 'TRF8', 'TRF5', '651Z',      '252Z', 'TRFC', '652Z', 'WISP', 'ASMS',      'TRF2'   ) THEN '158' WHEN TRANSACTION_CODE_CD IN (     'TRF1', 'TRF8', 'TRF7', 'CNV4', 'TRF2',      'ONUS', 'TRFC', 'TRF1', 'TRF3', 'TRA1',      'TRF5', 'TRA2', 'TRF4', 'TRF4', 'WISP',      '411K', 'TRFA', 'ONUS', 'TRF7', '411I',      'TRFA', '251Z', 'LTF2', 'TRFN', 'TRF4',      'TRA2', '111K', 'TRFN', 'TRA1', 'CNV3',      'TRF2', '111I', 'TRF8', 'TRF5', '651Z',      '252Z', 'TRFC', '652Z', 'WISP', 'ASMS',      'TRF2'   ) THEN '159' WHEN TRANSACTION_CODE_CD IN (     'TRF1', 'TRF8', 'TRF7', 'CNV4', 'TRF2',      'ONUS', 'TRFC', 'TRF1', 'TRF3', 'TRA1',      'TRF5', 'TRA2', 'TRF4', 'TRF4', 'WISP',      '411K', 'TRFA', 'ONUS', 'TRF7', '411I',      'TRFA', '251Z', 'LTF2', 'TRFN', 'TRF4',      'TRA2', '111K', 'TRFN', 'TRA1', 'CNV3',      'TRF2', '111I', 'TRF8', 'TRF5', '651Z',      '252Z', 'TRFC', '652Z', 'WISP', 'ASMS',      'TRF2'   ) THEN '160' WHEN TRANSACTION_CODE_CD IN (     'TRF1', 'TRF8', 'TRF7', 'CNV4', 'TRF2',      'ONUS', 'TRFC', 'TRF1', 'TRF3', 'TRA1',      'TRF5', 'TRA2', 'TRF4', 'TRF4', 'WISP',      '411K', 'TRFA', 'ONUS', 'TRF7', '411I',      'TRFA', '251Z', 'LTF2', 'TRFN', 'TRF4',      'TRA2', '111K', 'TRFN', 'TRA1', 'CNV3',      'TRF2', '111I', 'TRF8', 'TRF5', '651Z',      '252Z', 'TRFC', '652Z', 'WISP', 'ASMS',      'TRF2'   ) THEN '161' WHEN TRANSACTION_CODE_CD IN (     'TRF1', 'TRF8', 'TRF7', 'CNV4', 'TRF2',      'ONUS', 'TRFC', 'TRF1', 'TRF3', 'TRA1',      'TRF5', 'TRA2', 'TRF4', 'TRF4', 'WISP',      '411K', 'TRFA', 'ONUS', 'TRF7', '411I',      'TRFA', '251Z', 'LTF2', 'TRFN', 'TRF4',      'TRA2', '111K', 'TRFN', 'TRA1', 'CNV3',      'TRF2', '111I', 'TRF8', 'TRF5', '651Z',      '252Z', 'TRFC', '652Z', 'WISP', 'ASMS',      'TRF2'   ) THEN '162' WHEN TRANSACTION_CODE_CD IN (     'TRF1', 'TRF8', 'TRF7', 'CNV4', 'TRF2',      'ONUS', 'TRFC', 'TRF1', 'TRF3', 'TRA1',      'TRF5', 'TRA2', 'TRF4', 'TRF4', 'WISP',      '411K', 'TRFA', 'ONUS', 'TRF7', '411I',      'TRFA', '251Z', 'LTF2', 'TRFN', 'TRF4',      'TRA2', '111K', 'TRFN', 'TRA1', 'CNV3',      'TRF2', '111I', 'TRF8', 'TRF5', '651Z',      '252Z', 'TRFC', '652Z', 'WISP', 'ASMS',      'TRF2'   ) THEN '163' WHEN TRANSACTION_CODE_CD IN (     'TRF1', 'TRF8', 'TRF7', 'CNV4', 'TRF2',      'ONUS', 'TRFC', 'TRF1', 'TRF3', 'TRA1',      'TRF5', 'TRA2', 'TRF4', 'TRF4', 'WISP',      '411K', 'TRFA', 'ONUS', 'TRF7', '411I',      'TRFA', '251Z', 'LTF2', 'TRFN', 'TRF4',      'TRA2', '111K', 'TRFN', 'TRA1', 'CNV3',      'TRF2', '111I', 'TRF8', 'TRF5', '651Z',      '252Z', 'TRFC', '652Z', 'WISP', 'ASMS',      'TRF2'   ) THEN '164' WHEN TRANSACTION_CODE_CD IN (     'TRF1', 'TRF8', 'TRF7', 'CNV4', 'TRF2',      'ONUS', 'TRFC', 'TRF1', 'TRF3', 'TRA1',      'TRF5', 'TRA2', 'TRF4', 'TRF4', 'WISP',      '411K', 'TRFA', 'ONUS', 'TRF7', '411I',      'TRFA', '251Z', 'LTF2', 'TRFN', 'TRF4',      'TRA2', '111K', 'TRFN', 'TRA1', 'CNV3',      'TRF2', '111I', 'TRF8', 'TRF5', '651Z',      '252Z', 'TRFC', '652Z', 'WISP', 'ASMS',      'TRF2'   ) THEN '165' WHEN TRANSACTION_CODE_CD IN (     'TRF1', 'TRF8', 'TRF7', 'CNV4', 'TRF2',      'ONUS', 'TRFC', 'TRF1', 'TRF3', 'TRA1',      'TRF5', 'TRA2', 'TRF4', 'TRF4', 'WISP',      '411K', 'TRFA', 'ONUS', 'TRF7', '411I',      'TRFA', '251Z', 'LTF2', 'TRFN', 'TRF4',      'TRA2', '111K', 'TRFN', 'TRA1', 'CNV3',      'TRF2', '111I', 'TRF8', 'TRF5', '651Z',      '252Z', 'TRFC', '652Z', 'WISP', 'ASMS',      'TRF2'   ) THEN '166' WHEN TRANSACTION_CODE_CD IN ('DIR1', 'BOT3', 'REC2') THEN '260' WHEN TRANSACTION_CODE_CD IN ('SLD3') THEN '261' WHEN  TRANSACTION_CODE_CD IN ('DIR1', 'BOT3', 'REC2') THEN '262' WHEN TRANSACTION_CODE_CD IN ('SLD3') THEN '263' WHEN TRANSACTION_CODE_CD IN ('SLD3') THEN '264' WHEN TRANSACTION_CODE_CD IN ('SLD3') THEN '265' WHEN TRANSACTION_CODE_CD IN ('DIR1', 'BOT3', 'REC2') THEN '266' WHEN  TRANSACTION_CODE_CD IN ('DIR1', 'BOT3', 'REC2') THEN '270' WHEN TRANSACTION_CODE_CD IN (      'PWCK', 'LOCL', 'FRGN', 'THRD', 'LOCL',       'DEP1', 'RTNA', 'D023', 'NONL', 'DEPK',       'RTNM', '113M', 'GOVT', 'DEP3', 'CERT',       'DEPK', 'CINT', 'THRD', 'RTNN', 'DEPB',       'RTNA', 'DEPB', 'PWCK', 'FTS2', 'DESW',       'RTNL', 'DEMF', 'RTNI', 'D025', 'LOCL',       'DEPR', 'RTNC', 'RTNF', 'MONY', 'GOVT',       'RTNF', 'D027', 'TRAV', 'RTNB', 'RTNA',       'D036', 'DESO', 'DEPH', 'DEP3', 'BANK',       'DEPH', 'CERT', 'TRAV', 'THRD', '113A',       'DEPR', 'MONY', 'RTNC', 'DESO', 'DEP9',       'FRGN', 'BANK', 'CINT', '819', '169',       'DEMF', 'RTNC', 'TRAV', 'D035', 'MONY',       'RTNK', 'BANK', 'NONL', 'D026', 'DEP1',       'RTNE', 'CERT', 'DESW', 'RTNL', 'FTS2',       'CINT', 'RTNH', 'RTNJ', 'RTND', 'PWCK',       'D024', 'RTNG', 'GOVT', 'NONL', 'DEP9',       'RTNJ', 'FRGN', 'NCD8'    ) THEN '301' WHEN TRANSACTION_CODE_CD IN ('ESPR', 'ESPR') THEN '303' WHEN TRANSACTION_CODE_CD IN (      'PWCK', 'LOCL', 'FRGN', 'THRD', 'LOCL',       'DEP1', 'RTNA', 'D023', 'NONL', 'DEPK',       'RTNM', '113M', 'GOVT', 'DEP3', 'CERT',       'DEPK', 'CINT', 'THRD', 'RTNN', 'DEPB',       'RTNA', 'DEPB', 'PWCK', 'FTS2', 'DESW',       'RTNL', 'DEMF', 'RTNI', 'D025', 'LOCL',       'DEPR', 'RTNC', 'RTNF', 'MONY', 'GOVT',       'RTNF', 'D027', 'TRAV', 'RTNB', 'RTNA',       'D036', 'DESO', 'DEPH', 'DEP3', 'BANK',       'DEPH', 'CERT', 'TRAV', 'THRD', '113A',       'DEPR', 'MONY', 'RTNC', 'DESO', 'DEP9',       'FRGN', 'BANK', 'CINT', '819', '169',       'DEMF', 'RTNC', 'TRAV', 'D035', 'MONY',       'RTNK', 'BANK', 'NONL', 'D026', 'DEP1',       'RTNE', 'CERT', 'DESW', 'RTNL', 'FTS2',       'CINT', 'RTNH', 'RTNJ', 'RTND', 'PWCK',       'D024', 'RTNG', 'GOVT', 'NONL', 'DEP9',       'RTNJ', 'FRGN', 'NCD8'    ) THEN '305' WHEN TRANSACTION_CODE_CD IN ('ESPR', 'ESPR') THEN '307' WHEN TRANSACTION_CODE_CD IN (      'PWCK', 'LOCL', 'FRGN', 'THRD', 'LOCL',       'DEP1', 'RTNA', 'D023', 'NONL', 'DEPK',       'RTNM', '113M', 'GOVT', 'DEP3', 'CERT',       'DEPK', 'CINT', 'THRD', 'RTNN', 'DEPB',       'RTNA', 'DEPB', 'PWCK', 'FTS2', 'DESW',       'RTNL', 'DEMF', 'RTNI', 'D025', 'LOCL',       'DEPR', 'RTNC', 'RTNF', 'MONY', 'GOVT',       'RTNF', 'D027', 'TRAV', 'RTNB', 'RTNA',       'D036', 'DESO', 'DEPH', 'DEP3', 'BANK',       'DEPH', 'CERT', 'TRAV', 'THRD', '113A',       'DEPR', 'MONY', 'RTNC', 'DESO', 'DEP9',       'FRGN', 'BANK', 'CINT', '819', '169',       'DEMF', 'RTNC', 'TRAV', 'D035', 'MONY',       'RTNK', 'BANK', 'NONL', 'D026', 'DEP1',       'RTNE', 'CERT', 'DESW', 'RTNL', 'FTS2',       'CINT', 'RTNH', 'RTNJ', 'RTND', 'PWCK',       'D024', 'RTNG', 'GOVT', 'NONL', 'DEP9',       'RTNJ', 'FRGN', 'NCD8'    ) THEN '309' WHEN TRANSACTION_CODE_CD IN ('ESPR', 'ESPR') THEN '401' WHEN TRANSACTION_CODE_CD IN ('ESPR', 'ESPR') THEN '402' WHEN TRANSACTION_CODE_CD IN (     'RED2', 'RMP1', 'RED1', 'RED6', 'RTS4',      'RMP1', 'RTS4', 'RED3'   ) THEN '403' WHEN TRANSACTION_CODE_CD IN ('ESPR', 'ESPR') THEN '404' WHEN TRANSACTION_CODE_CD IN ('ESPR', 'ESPR') THEN '405' WHEN  TRANSACTION_CODE_CD IN (      'RED2', 'RMP1', 'RED1', 'RED6', 'RTS4',       'RMP1', 'RTS4', 'RED3'    ) THEN '406' WHEN TRANSACTION_CODE_CD IN ('ESPR', 'ESPR') THEN '407' WHEN TRANSACTION_CODE_CD IN (      'RED2', 'RMP1', 'RED1', 'RED6', 'RTS4',       'RMP1', 'RTS4', 'RED3'    ) THEN '408' WHEN TRANSACTION_CODE_CD IN ('ESPR', 'ESPR') THEN '409' WHEN TRANSACTION_CODE_CD IN ('ESPR', 'ESPR') THEN '410' WHEN TRANSACTION_CODE_CD IN (     'RED2', 'RMP1', 'RED1', 'RED6', 'RTS4',      'RMP1', 'RTS4', 'RED3'   ) THEN '411' WHEN TRANSACTION_CODE_CD IN (     'RED2', 'RMP1', 'RED1', 'RED6', 'RTS4',      'RMP1', 'RTS4', 'RED3'   ) THEN '412' WHEN TRANSACTION_CODE_CD IN ('ESPR', 'ESPR') THEN '414' WHEN TRANSACTION_CODE_CD IN (     'TRF1', 'TRF8', 'TRF7', 'CNV4', 'TRF2',      'ONUS', 'TRFC', 'TRF1', 'TRF3', 'TRA1',      'TRF5', 'TRA2', 'TRF4', 'TRF4', 'WISP',      '411K', 'TRFA', 'ONUS', 'TRF7', '411I',      'TRFA', '251Z', 'LTF2', 'TRFN', 'TRF4',      'TRA2', '111K', 'TRFN', 'TRA1', 'CNV3',      'TRF2', '111I', 'TRF8', 'TRF5', '651Z',      '252Z', 'TRFC', '652Z', 'WISP', 'ASMS',      'TRF2'   ) THEN '415' WHEN TRANSACTION_CODE_CD IN ('MMRC', 'MMR2', 'MMRC', 'MMR3') THEN '902' WHEN TRANSACTION_CODE_CD IN ('MMRC', 'MMR2', 'MMRC',  'MMR3') THEN '903' WHEN TRANSACTION_CODE_CD IN (      'LFEE', 'LFEE', 'LFEE', 'LTF2', '656',      'MGN4', '656I', 'MGN4', 'LLC1'   ) THEN '904' WHEN TRANSACTION_CODE_CD IN (     'LFEE', 'LFEE', 'LFEE', 'LTF2', '656',       'MGN4', '656I', 'MGN4', 'LLC1'    ) THEN '905' WHEN TRANSACTION_CODE_CD IN (      'ACH1', 'W025', 'LOC9', 'FTS1', 'ACH1',       'WITO', 'WIT9', 'WMMF', 'MMR4', 'WIT2',       'WITG', 'WISO', 'WITZ', 'WITU', 'WITU',       'WIT1', 'WITN', 'WIT9', 'WISW', 'WITH',       'WIMF', 'WITQ', 'W023', 'WIT8', 'ACH1',       'WITN', 'W027', 'WISO', 'WIT1', 'MMR4',       'WIST', 'WITA', 'WPWK', 'W035', 'WIT7',       'WITY', 'WIT3', 'FTS1', 'W024', 'WPWK',       'FEFP', 'WIMF', 'WITX', 'W026', 'WITY',       'WITF', 'WITJ', 'WITC', 'W036', '659',      'FEFS', 'WIST', 'WISW'   ) THEN '909' WHEN TRANSACTION_CODE_CD IN ('SSP8') THEN '950' END AS TRANSACTION_CODE_CD,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL,     NULL  FROM     ubs_transaction AS UT     LEFT JOIN ubs_account_conversion AS AC ON Replace(AC.account_number, ' ', '') = Substring(      Replace(UT.account_key, ' ', ''),       1,      7    )     JOIN v_udm_account AS UAM ON UAM.account_key = AC.acct_uan ]]>
			</query>
		</queries>
	</output>
	<output>
		<target dest="file" row-delimeter="~@^*^@~" col-delimeter="~##~">POSITION.DAT</target>
		<queries>
			<prequery></prequery>
			<query>
				<![CDATA[WITH COMPOSITE_PRODUCT_KEY AS( SELECT DISTINCT P.PRODUCT_KEY, Z.COMPOSITE_KEY FROM ( SELECT V.COMPOSITE_KEY, U.* FROM UBS_INSURANCE_01 AS U JOIN UBS_INSURANCE_02 AS V ON U.CONTRACT_NUMBER = V.CONTRACT_NUMBER) Z JOIN UBS_PRODUCT_03 AS P ON P.CUSIP_ID = Z.COMPOSITE_KEY JOIN UBS_PRODUCT_02 AS P2 ON P2.PRODUCT_KEY = P.PRODUCT_KEY WHERE Z.COMPOSITE_KEY <> ' ' AND P2.STMT_MAJOR_CD = '008' AND P2.STMT_MINOR_CD = '004' ) SELECT DISTINCT X.ACCOUNT_KEY, 'NA' AS CONTRACT_KEY, CASE WHEN QUANTITY LIKE '%-%' THEN 'Short' ELSE 'Long' END AS LONG_SHORT_CD, CONCAT( CONVERT( VARCHAR, CAST(POSITION_DATE_TIME AS DATE), 103 ), ' 00:00:00.000' ) AS POSITION_DATE_TIME, CASE WHEN X.POSITION_TYPE_CD IN ( 'BA', 'BAPR', 'BD', 'BL', 'CAT', 'CBCV', 'CDE', 'CDF', 'CDJ', 'CDM', 'CDP', 'CDPR', 'CDT', 'CDZ', 'COR', 'CORN', 'CORP', 'CORZ', 'CPC', 'CPD', 'CPN', 'CPPR', 'CSCD', 'CSCR', 'CYAN', 'DAPR', 'EDBD', 'EE', 'ELNP', 'ELNS', 'FAC', 'FAD', 'FAZ', 'FCBD', 'FCNT', 'FGBD', 'FGNT', 'HH', 'MBAC', 'MBCC', 'MBCF', 'MBNF', 'MBNR', 'MBVR', 'MBZ', 'N', 'TIPB', 'TIPN', 'TR', 'WSC', 'ZCVT', 'ZGV', 'WC', 'ALSV', 'TIPC', 'TIPP', 'ABS', 'CMO', 'CMZ', 'FG', 'FNP', 'FNT', 'FT', 'GP', 'GPM', 'GT', 'PCM', 'PGP', 'PGU', 'PRGM', 'MBCF', 'RSTB', 'WIBD', 'WIBL', 'WIFC', 'WIN', 'WIPB', 'WIPN' ) THEN 'FI' WHEN X.POSITION_TYPE_CD IN ( 'ADR', 'ADRP', 'CBI ', 'CFFL', 'CSTA', 'CSTB', 'CSTC', 'CSTK', 'ELNE', 'ELNC', 'EQOT', 'FSTK', 'MLP ', 'OUT', 'ROY', 'SBA', 'SBI', 'UBI', 'VTC', 'RTS', 'WTS', 'IWTS', 'PSTA', 'PSTB', 'PSTC', 'PSTK', 'PSTV', 'FSTP', 'PSTI', 'FSHR', 'RSTR' ) THEN 'EQ' WHEN X.POSITION_TYPE_CD IN ( 'MFPM', 'MFPN', 'MFPO', 'MFPP', 'MFPR', 'MUTC', 'MUTL', 'MUTM', 'MUTN', 'MUTR', 'MUTU', 'UNTC', 'UNTE', 'UNTF', 'UNTM', 'UNTO', 'UNTS', 'UNTT', 'UNTU', 'FMUT' ) THEN 'MFU' WHEN X.POSITION_TYPE_CD IN ( 'CUR', 'DPRC', 'ESRC', 'LTGY', 'OCC', 'OCP', 'OEC', 'OEP', 'OHC', 'OHP', 'OIC', 'OIP', 'OUN' ) THEN 'OPT' WHEN X.POSITION_TYPE_CD IN ( 'BULN', 'CBUN', 'CFF', 'CFFH', 'CFFP', 'COIN', 'HEDG', 'IAH', 'IDS', 'IFA', 'IFL', 'IHC', 'IIA', 'ILT', 'ILU', 'ILW', 'IMP', 'IMV', 'IOT', 'IVA', 'IVL', 'LOC', 'PTXF', 'PTXS', 'STUN', 'MSGM', 'WISS', 'WIST' ) THEN 'OTH' ELSE 'OTH' END AS POSITION_TYPE_CD, X.PRODUCT_KEY, NULL, NULL, NULL, NULL, 'USD' AS BASE_CURR_CD, CASE WHEN X.POSITION_TYPE_CD IN ( 'BA', 'BAPR', 'BD', 'BL', 'CAT', 'CBCV', 'CDE', 'CDF', 'CDJ', 'CDM', 'CDP', 'CDPR', 'CDT', 'CDZ', 'COR', 'CORN', 'CORP', 'CORZ', 'CPC', 'CPD', 'CPN', 'CPPR', 'CSCD', 'CSCR', 'CYAN', 'DAPR', 'EDBD', 'EE', 'ELNP', 'ELNS', 'FAC', 'FAD', 'FAZ', 'FCBD', 'FCNT', 'FGBD', 'FGNT', 'HH', 'MBAC', 'MBCC', 'MBCF', 'MBNF', 'MBNR', 'MBVR', 'MBZ', 'N', 'TIPB', 'TIPN', 'TR', 'WSC', 'ZCVT', 'ZGV', 'WC', 'ALSV', 'TIPC', 'TIPP', 'ABS', 'CMO', 'CMZ', 'FG', 'FNP', 'FNT', 'FT', 'GP', 'GPM', 'GT', 'PCM', 'PGP', 'PGU', 'PRGM', 'MBCF', 'RSTB', 'WIBD', 'WIBL', 'WIFC', 'WIN', 'WIPB', 'WIPN' ) THEN BASE_CURR_PRICE/100 ELSE BASE_CURR_PRICE END BASE_CURR_PRICE , BASE_CURR_VALUE, CPK.COMPOSITE_KEY AS COMPOSITE_PRODUCT_ID, NULL, NULL, 'USD' AS ORIG_CURR_CD, CASE WHEN X.POSITION_TYPE_CD IN ( 'BA', 'BAPR', 'BD', 'BL', 'CAT', 'CBCV', 'CDE', 'CDF', 'CDJ', 'CDM', 'CDP', 'CDPR', 'CDT', 'CDZ', 'COR', 'CORN', 'CORP', 'CORZ', 'CPC', 'CPD', 'CPN', 'CPPR', 'CSCD', 'CSCR', 'CYAN', 'DAPR', 'EDBD', 'EE', 'ELNP', 'ELNS', 'FAC', 'FAD', 'FAZ', 'FCBD', 'FCNT', 'FGBD', 'FGNT', 'HH', 'MBAC', 'MBCC', 'MBCF', 'MBNF', 'MBNR', 'MBVR', 'MBZ', 'N', 'TIPB', 'TIPN', 'TR', 'WSC', 'ZCVT', 'ZGV', 'WC', 'ALSV', 'TIPC', 'TIPP', 'ABS', 'CMO', 'CMZ', 'FG', 'FNP', 'FNT', 'FT', 'GP', 'GPM', 'GT', 'PCM', 'PGP', 'PGU', 'PRGM', 'MBCF', 'RSTB', 'WIBD', 'WIBL', 'WIFC', 'WIN', 'WIPB', 'WIPN' ) THEN ORIG_CURR_PRICE/100 ELSE ORIG_CURR_PRICE END ORIG_CURR_PRICE, ORIG_CURR_VALUE, NULL AS PORTFOLIO_ID, QUANTITY, NULL AS REGION_CD, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL AS TRADED_CONTRACT_ID, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL AS UNDERLYING_LEG, COALESCE(NULLIF(UPP.UNDERLYING_SEC_PRODUCT_KEY, ' '), X.PRODUCT_KEY) as  UNDERLYING_PRODUCT_KEY  , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL AS TRADER_KEY, NULL AS DESK_ID, NULL AS MATURITY_DATE FROM ( SELECT UAC.ACCT_UAN AS ACCOUNT_KEY, AGG_UNIT_CD, BASE_CURR_CD, SUM( CAST (BASE_CURR_PRICE AS FLOAT) ) AS BASE_CURR_PRICE, SUM( CAST (BASE_CURR_VALUE AS FLOAT) ) AS BASE_CURR_VALUE, SUM( CAST (ORIG_CURR_PRICE AS FLOAT) ) AS ORIG_CURR_PRICE, SUM( CAST (ORIG_CURR_VALUE AS FLOAT) ) AS ORIG_CURR_VALUE, POSITION_DATE_TIME, POSITION_TYPE_CD, LTRIM(RTRIM(PRODUCT_KEY)) AS PRODUCT_KEY, SUM( CAST (QUANTITY AS FLOAT) ) AS QUANTITY, REGION_CD FROM UBS_POSITION UP LEFT JOIN UBS_ACCOUNT_CONVERSION UAC ON UAC.ACCOUNT_NUMBER = UP.BRN_I + ' ' + UP.ACC_BASE_I GROUP BY UAC.ACCT_UAN, AGG_UNIT_CD, BASE_CURR_CD, POSITION_DATE_TIME, POSITION_TYPE_CD, PRODUCT_KEY, REGION_CD ) AS X   LEFT JOIN  UBS_PRODUCT_03  AS UPP ON UPP.PRODUCT_KEY=X.PRODUCT_KEY     LEFT JOIN COMPOSITE_PRODUCT_KEY AS CPK ON CPK.PRODUCT_KEY = X.PRODUCT_KEY JOIN V_UDM_ACCOUNT AS UAM ON UAM.ACCOUNT_KEY = X.ACCOUNT_KEY JOIN V_UDM_PRODUCT AS UP3 ON UP3.PRODUCT_KEY = X.PRODUCT_KEY]]>
			</query>				
		</queries>
	</output>
	<output>
		<target dest="file" row-delimeter="~@^*^@~" col-delimeter="~##~">ADDRESS.DAT</target>
		<queries>
			<prequery></prequery>
			<query>
				<![CDATA[SELECT UA.ADDRESS_KEY,NULL AS TENANT_CD,RTRIM(LTRIM(ADDRESS_LINE_1)) AS ADDRESS_LINE_1,NULL AS ADDRESS_LINE_2,NULL AS ADDRESS_LINE_3,NULL AS ADDRESS_LINE_4,NULL AS ADDRESS_LINE_5,NULL AS APARTMENT_SUITE_NUMBER,NULL AS BUILDING_NUMBER, NULLIF(CITY,'') AS CITY,NULLIF(COUNTRY_CD,'') AS COUNTRY_CD,NULL AS GEO_DEMOGRAPHIC_GROUP_CD,NULL AS IS_STRUCTURED,NULL AS IS_TO_BE_DELETED,NULL AS PO_BOX,NULLIF(STATE_PROVINCE_CD, '') AS STATE_PROVINCE_CD,NULL AS STREET,NULLIF(ZIP_POSTCODE,'') AS ZIP_POSTCODE,NULL AS CUSTOM_BOOLEAN_01,NULL AS CUSTOM_BOOLEAN_02,NULL AS CUSTOM_DATE_01,NULL AS CUSTOM_DATE_02,NULL AS CUSTOM_DOUBLE_01,NULL AS CUSTOM_MEDIUM_STRING_01,NULL AS CUSTOM_MEDIUM_STRING_02,NULL AS CUSTOM_MEDIUM_STRING_03,NULL AS CUSTOM_MEDIUM_STRING_04,NULL AS CUSTOM_MEDIUM_STRING_05,NULL AS CUSTOM_MEDIUM_STRING_06,NULL AS CUSTOM_MEDIUM_STRING_07,NULL AS CUSTOM_MEDIUM_STRING_08,NULL AS CUSTOM_SMALL_STRING_01,NULL AS CUSTOM_SMALL_STRING_02,NULL AS CUSTOM_SMALL_STRING_03,NULL AS CUSTOM_SMALL_STRING_04,NULL AS CUSTOM_SMALL_STRING_05,NULL AS ROW_UPDATE_DATE from UBS_ADDRESS AS UA JOIN V_ADDRESS AS VA ON UA.ADDRESS_KEY = VA.ADDRESS_KEY ]]>
			</query>
		</queries>
	</output>
	<output>
		<target dest="file" row-delimeter="~@^*^@~" col-delimeter="~##~">ENTITY_ADDRESS_RELATION.DAT</target>
		<queries>
			<prequery></prequery>
			<query>
				<![CDATA[SELECT   DD.ADDRESS_KEY,   CASE WHEN DD.IS_PRIMARY = '1' THEN 'LR' ELSE DD.ADDRESS_RELATION_TYPE_CD END AS ADDRESS_RELATION_TYPE_CD,   DD.ENTITY_KEY,   DD.ENTITY_TYPE_CD,   DD.TENANT_CD,   DD.EFFECTIVE_DATE,   DD.EXPIRATION_DATE,   DD.IS_PRIMARY,   DD.IS_TO_BE_DELETED,   DD.CUSTOM_BOOLEAN_01,   DD.CUSTOM_BOOLEAN_02,   DD.CUSTOM_DATE_01,   DD.CUSTOM_DATE_02,   DD.CUSTOM_DATE_03,   DD.CUSTOM_MEDIUM_STRING_01,   DD.CUSTOM_SMALL_STRING_01,   DD.CUSTOM_SMALL_STRING_02,   DD.CUSTOM_SMALL_STRING_03,   DD.CUSTOM_SMALL_STRING_04,   DD.CUSTOM_DOUBLE_01,   DD.CUSTOM_SMALL_STRING_05,   DD.ROW_UPDATE_DATE,   DD.IS_OVERALL_PRIMARY FROM   (     SELECT       D.ADDRESS_KEY,       CASE WHEN D.EDC_ADS_LOC_DESC_T in ('Bus-Primary', 'Bus-Secondary') THEN 'BS' WHEN D.EDC_ADS_LOC_DESC_T = 'Home Secondary ' THEN 'LA' WHEN D.EDC_ADS_LOC_DESC_T in ('Home-Legal Res') THEN 'LR' WHEN D.DDRNK = '1' THEN 'LR' END AS ADDRESS_RELATION_TYPE_CD,       D.ENTITY_KEY,       'PARTY' AS ENTITY_TYPE_CD,       NULL AS TENANT_CD,       CONCAT(         CONVERT(           VARCHAR,           CAST(D.EFFECTIVE_DATE AS DATE),           103         ),         ' 00:00:00.000'       ) as EFFECTIVE_DATE,       NULL AS EXPIRATION_DATE,       CASE WHEN D.DDRNK = '1' THEN '1' ELSE '0' END IS_PRIMARY,       NULL AS IS_TO_BE_DELETED,       NULL AS CUSTOM_BOOLEAN_01,       NULL AS CUSTOM_BOOLEAN_02,       NULL AS CUSTOM_DATE_01,       NULL AS CUSTOM_DATE_02,       NULL AS CUSTOM_DATE_03,       NULL AS CUSTOM_MEDIUM_STRING_01,       NULL AS CUSTOM_SMALL_STRING_01,       NULL AS CUSTOM_SMALL_STRING_02,       NULL AS CUSTOM_SMALL_STRING_03,       NULL AS CUSTOM_SMALL_STRING_04,       NULL AS CUSTOM_DOUBLE_01,       NULL AS CUSTOM_SMALL_STRING_05,       NULL AS ROW_UPDATE_DATE,       NULL AS IS_OVERALL_PRIMARY     FROM       (         SELECT           UA.ADDRESS_KEY,           ROW_NUMBER() OVER(             PARTITION BY CR.IP_CLI_I,             CR.ADS_LOC_C,             AC.PARTY_TYPE_CD             ORDER BY               CAST(UA.EFFECTIVE_DATE AS DATE) DESC           ) AS RNK,           ROW_NUMBER() OVER(             PARTITION BY CR.IP_CLI_I             ORDER BY               CAST(UA.EFFECTIVE_DATE AS DATE),               ALC.EDC_ADS_LOC_DESC_T DESC           ) AS DRNK,           ROW_NUMBER() OVER(             PARTITION BY CR.IP_CLI_I             ORDER BY               CAST(UA.EFFECTIVE_DATE AS DATE) DESC           ) AS DDRNK,           CASE WHEN ALC.EDC_ADS_LOC_DESC_T in ('Bus-Primary', 'Bus-Secondary') THEN 'BS' WHEN ALC.EDC_ADS_LOC_DESC_T = 'Home Secondary' THEN 'LA' WHEN ALC.EDC_ADS_LOC_DESC_T in ('Home-Legal Res') THEN 'LR' END AS ADDRESS_RELATION_TYPE_CD,           CR.IP_CLI_I AS ENTITY_KEY,           'PARTY' AS ENTITY_TYPE_CD,           NULL AS TENANT_CD,           UA.EFFECTIVE_DATE,           NULL AS EXPIRATION_DATE,           CASE WHEN CR.ADS_LOC_C = '1'           AND AC.PARTY_TYPE_CD in('1', '2', '3', '5')           AND ALC.EDC_ADS_LOC_DESC_T = 'Home-Legal Res' THEN '1' WHEN CR.ADS_LOC_C = '2'           AND AC.PARTY_TYPE_CD in('1', '2', '3', '5')           AND ALC.EDC_ADS_LOC_DESC_T = 'Bus-Primary' THEN '1' ELSE '0' END AS IS_PRIMARY,           EDC_ADS_LOC_DESC_T,           CR.ADS_TYP_C,           CR.ADS_LOC_C,           AC.PARTY_TYPE_CD,           NULL AS IS_TO_BE_DELETED,           NULL AS CUSTOM_BOOLEAN_01,           NULL AS CUSTOM_BOOLEAN_02,           NULL AS CUSTOM_DATE_01,           NULL AS CUSTOM_DATE_02,           NULL AS CUSTOM_DATE_03,           NULL AS CUSTOM_MEDIUM_STRING_01,           NULL AS CUSTOM_SMALL_STRING_01,           NULL AS CUSTOM_SMALL_STRING_02,           NULL AS CUSTOM_SMALL_STRING_03,           NULL AS CUSTOM_SMALL_STRING_04,           NULL AS CUSTOM_DOUBLE_01,           NULL AS CUSTOM_SMALL_STRING_05,           NULL AS ROW_UPDATE_DATE,           NULL AS IS_OVERALL_PRIMARY         FROM           UBS_ADDRESS AS UA           JOIN V_ENTITY_ADDRESS AS VEA ON UA.ADDRESS_KEY = VEA.ADDRESS_KEY           LEFT JOIN UBS_ADDRESS_CLIENT_XREF CR ON CR.ADS_I = UA.ADDRESS_KEY           LEFT JOIN UBS_ADDRESS_LOCATION_CODES AS ALC ON ALC.EDC_ADS_LOC_C = CR.ADS_LOC_C           LEFT JOIN UBS_ACTIVE_CLIENT AS AC ON AC.PARTY_KEY = CR.IP_CLI_I         where           ALC.EDC_ADS_LOC_DESC_T IN('Home-Legal Res', 'Bus-Primary')       ) AS D   ) AS DD UNION SELECT   D.ADDRESS_KEY,   CASE WHEN D.EDC_ADS_LOC_DESC_T in ('Bus-Primary', 'Bus-Secondary') THEN 'BS' WHEN D.EDC_ADS_LOC_DESC_T = 'Home Secondary' THEN 'LA' WHEN D.EDC_ADS_LOC_DESC_T in ('Home-Legal Res') THEN 'LR' END AS ADDRESS_RELATION_TYPE_CD,   D.ENTITY_KEY,   'PARTY' AS ENTITY_TYPE_CD,   NULL AS TENANT_CD,   CONCAT(     CONVERT(       VARCHAR,       CAST(D.EFFECTIVE_DATE AS DATE),       103     ),     ' 00:00:00.000'   ) as EFFECTIVE_DATE,   NULL AS EXPIRATION_DATE,   D.IS_PRIMARY,   NULL AS IS_TO_BE_DELETED,   NULL AS CUSTOM_BOOLEAN_01,   NULL AS CUSTOM_BOOLEAN_02,   NULL AS CUSTOM_DATE_01,   NULL AS CUSTOM_DATE_02,   NULL AS CUSTOM_DATE_03,   NULL AS CUSTOM_MEDIUM_STRING_01,   NULL AS CUSTOM_SMALL_STRING_01,   NULL AS CUSTOM_SMALL_STRING_02,   NULL AS CUSTOM_SMALL_STRING_03,   NULL AS CUSTOM_SMALL_STRING_04,   NULL AS CUSTOM_DOUBLE_01,   NULL AS CUSTOM_SMALL_STRING_05,   NULL AS ROW_UPDATE_DATE,   NULL AS IS_OVERALL_PRIMARY FROM   (     SELECT       UA.ADDRESS_KEY,       ROW_NUMBER() OVER(         PARTITION BY CR.IP_CLI_I,         CR.ADS_LOC_C,         AC.PARTY_TYPE_CD         ORDER BY           CAST(UA.EFFECTIVE_DATE AS DATE) DESC       ) AS RNK,       ROW_NUMBER() OVER(         PARTITION BY CR.IP_CLI_I         ORDER BY           CAST(UA.EFFECTIVE_DATE AS DATE),           ALC.EDC_ADS_LOC_DESC_T DESC       ) AS DRNK,       ROW_NUMBER() OVER(         PARTITION BY CR.IP_CLI_I         ORDER BY           CAST(UA.EFFECTIVE_DATE AS DATE) DESC       ) AS DDRNK,       CASE WHEN ALC.EDC_ADS_LOC_DESC_T in ('Bus-Primary', 'Bus-Secondary') THEN 'BS' WHEN ALC.EDC_ADS_LOC_DESC_T = 'Home Secondary' THEN 'LA' WHEN ALC.EDC_ADS_LOC_DESC_T in ('Home-Legal Res') THEN 'LR' END AS ADDRESS_RELATION_TYPE_CD,       CR.IP_CLI_I AS ENTITY_KEY,       'PARTY' AS ENTITY_TYPE_CD,       NULL AS TENANT_CD,       UA.EFFECTIVE_DATE,       NULL AS EXPIRATION_DATE,       '0' AS IS_PRIMARY,       EDC_ADS_LOC_DESC_T,       CR.ADS_TYP_C,       CR.ADS_LOC_C,       AC.PARTY_TYPE_CD,       NULL AS IS_TO_BE_DELETED,       NULL AS CUSTOM_BOOLEAN_01,       NULL AS CUSTOM_BOOLEAN_02,       NULL AS CUSTOM_DATE_01,       NULL AS CUSTOM_DATE_02,       NULL AS CUSTOM_DATE_03,       NULL AS CUSTOM_MEDIUM_STRING_01,       NULL AS CUSTOM_SMALL_STRING_01,       NULL AS CUSTOM_SMALL_STRING_02,       NULL AS CUSTOM_SMALL_STRING_03,       NULL AS CUSTOM_SMALL_STRING_04,       NULL AS CUSTOM_DOUBLE_01,       NULL AS CUSTOM_SMALL_STRING_05,       NULL AS ROW_UPDATE_DATE,       NULL AS IS_OVERALL_PRIMARY     FROM       UBS_ADDRESS AS UA       JOIN V_ENTITY_ADDRESS AS VEA ON UA.ADDRESS_KEY = VEA.ADDRESS_KEY       LEFT JOIN UBS_ADDRESS_CLIENT_XREF CR ON CR.ADS_I = UA.ADDRESS_KEY       LEFT JOIN UBS_ADDRESS_LOCATION_CODES AS ALC ON ALC.EDC_ADS_LOC_C = CR.ADS_LOC_C       LEFT JOIN UBS_ACTIVE_CLIENT AS AC ON AC.PARTY_KEY = CR.IP_CLI_I     where       ALC.EDC_ADS_LOC_DESC_T NOT IN('Home-Legal Res', 'Bus-Primary')   ) AS D   UNION   SELECT   DD.ADDRESS_KEY,   CASE WHEN DD.IS_PRIMARY = '1' THEN 'LR' ELSE DD.ADDRESS_RELATION_TYPE_CD END AS ADDRESS_RELATION_TYPE_CD,   DD.ENTITY_KEY,   DD.ENTITY_TYPE_CD,   DD.TENANT_CD,   DD.EFFECTIVE_DATE,   DD.EXPIRATION_DATE,   DD.IS_PRIMARY,   DD.IS_TO_BE_DELETED,   DD.CUSTOM_BOOLEAN_01,   DD.CUSTOM_BOOLEAN_02,   DD.CUSTOM_DATE_01,   DD.CUSTOM_DATE_02,   DD.CUSTOM_DATE_03,   DD.CUSTOM_MEDIUM_STRING_01,   DD.CUSTOM_SMALL_STRING_01,   DD.CUSTOM_SMALL_STRING_02,   DD.CUSTOM_SMALL_STRING_03,   DD.CUSTOM_SMALL_STRING_04,   DD.CUSTOM_DOUBLE_01,   DD.CUSTOM_SMALL_STRING_05,   DD.ROW_UPDATE_DATE,   DD.IS_OVERALL_PRIMARY FROM   (     SELECT       D.ADDRESS_KEY,       CASE WHEN D.EDC_ADS_LOC_DESC_T in ('Bus-Primary', 'Bus-Secondary') THEN 'BS' WHEN D.EDC_ADS_LOC_DESC_T = 'Home Secondary ' THEN 'LA' WHEN D.EDC_ADS_LOC_DESC_T in ('Home-Legal Res') THEN 'LR' WHEN D.DDRNK = '1' THEN 'LR' END AS ADDRESS_RELATION_TYPE_CD,       D.ENTITY_KEY,       'ACCOUNT' AS ENTITY_TYPE_CD,       NULL AS TENANT_CD,       CONCAT(         CONVERT(           VARCHAR,           CAST(D.EFFECTIVE_DATE AS DATE),           103         ),         ' 00:00:00.000'       ) as EFFECTIVE_DATE,       NULL AS EXPIRATION_DATE,       CASE WHEN D.DDRNK = '1' THEN '1' ELSE '0' END IS_PRIMARY,       NULL AS IS_TO_BE_DELETED,       NULL AS CUSTOM_BOOLEAN_01,       NULL AS CUSTOM_BOOLEAN_02,       NULL AS CUSTOM_DATE_01,       NULL AS CUSTOM_DATE_02,       NULL AS CUSTOM_DATE_03,       NULL AS CUSTOM_MEDIUM_STRING_01,       NULL AS CUSTOM_SMALL_STRING_01,       NULL AS CUSTOM_SMALL_STRING_02,       NULL AS CUSTOM_SMALL_STRING_03,       NULL AS CUSTOM_SMALL_STRING_04,       NULL AS CUSTOM_DOUBLE_01,       NULL AS CUSTOM_SMALL_STRING_05,       NULL AS ROW_UPDATE_DATE,       NULL AS IS_OVERALL_PRIMARY     FROM       (         SELECT           UA.ADDRESS_KEY,           ROW_NUMBER() OVER(             PARTITION BY CR.ACC_N,             CR.ADS_LOC_C             ORDER BY               CAST(UA.EFFECTIVE_DATE AS DATE) DESC           ) AS RNK,           ROW_NUMBER() OVER(             PARTITION BY CR.ACC_N             ORDER BY               CAST(UA.EFFECTIVE_DATE AS DATE),               ALC.EDC_ADS_LOC_DESC_T DESC           ) AS DRNK,           ROW_NUMBER() OVER(             PARTITION BY CR.ACC_N             ORDER BY               CAST(UA.EFFECTIVE_DATE AS DATE) DESC           ) AS DDRNK,           CASE WHEN ALC.EDC_ADS_LOC_DESC_T in ('Bus-Primary', 'Bus-Secondary') THEN 'BS' WHEN ALC.EDC_ADS_LOC_DESC_T = 'Home Secondary' THEN 'LA' WHEN ALC.EDC_ADS_LOC_DESC_T in ('Home-Legal Res') THEN 'LR' END AS ADDRESS_RELATION_TYPE_CD,           CR.ACC_N AS ENTITY_KEY,           'ACCOUNT' AS ENTITY_TYPE_CD,           NULL AS TENANT_CD,           UA.EFFECTIVE_DATE,           NULL AS EXPIRATION_DATE,           CASE WHEN CR.ADS_TYP_C = '1'  THEN '1' ELSE '0' END AS IS_PRIMARY,           EDC_ADS_LOC_DESC_T,           CR.ADS_TYP_C,           CR.ADS_LOC_C,           NULL AS IS_TO_BE_DELETED,           NULL AS CUSTOM_BOOLEAN_01,           NULL AS CUSTOM_BOOLEAN_02,           NULL AS CUSTOM_DATE_01,           NULL AS CUSTOM_DATE_02,           NULL AS CUSTOM_DATE_03,           NULL AS CUSTOM_MEDIUM_STRING_01,           NULL AS CUSTOM_SMALL_STRING_01,           NULL AS CUSTOM_SMALL_STRING_02,           NULL AS CUSTOM_SMALL_STRING_03,           NULL AS CUSTOM_SMALL_STRING_04,           NULL AS CUSTOM_DOUBLE_01,           NULL AS CUSTOM_SMALL_STRING_05,           NULL AS ROW_UPDATE_DATE,           NULL AS IS_OVERALL_PRIMARY         FROM           UBS_ADDRESS AS UA           JOIN V_ENTITY_ADDRESS AS VEA ON UA.ADDRESS_KEY = VEA.ADDRESS_KEY           LEFT JOIN UBS_ADDRESS_ACCOUNT_XREF CR ON CR.ADS_I = UA.ADDRESS_KEY           LEFT JOIN UBS_ADDRESS_LOCATION_CODES AS ALC ON ALC.EDC_ADS_LOC_C = CR.ADS_LOC_C         where           ALC.EDC_ADS_LOC_DESC_T IN('Home-Legal Res', 'Bus-Primary')       ) AS D   ) AS DD   UNION SELECT   D.ADDRESS_KEY,   CASE WHEN D.EDC_ADS_LOC_DESC_T in ('Bus-Primary', 'Bus-Secondary') THEN 'BS' WHEN D.EDC_ADS_LOC_DESC_T = 'Home Secondary' THEN 'LA' WHEN D.EDC_ADS_LOC_DESC_T in ('Home-Legal Res') THEN 'LR' END AS ADDRESS_RELATION_TYPE_CD,   D.ENTITY_KEY,   'ACCOUNT' AS ENTITY_TYPE_CD,   NULL AS TENANT_CD,   CONCAT(     CONVERT(       VARCHAR,       CAST(D.EFFECTIVE_DATE AS DATE),       103     ),     ' 00:00:00.000'   ) as EFFECTIVE_DATE,   NULL AS EXPIRATION_DATE,   D.IS_PRIMARY,   NULL AS IS_TO_BE_DELETED,   NULL AS CUSTOM_BOOLEAN_01,   NULL AS CUSTOM_BOOLEAN_02,   NULL AS CUSTOM_DATE_01,   NULL AS CUSTOM_DATE_02,   NULL AS CUSTOM_DATE_03,   NULL AS CUSTOM_MEDIUM_STRING_01,   NULL AS CUSTOM_SMALL_STRING_01,   NULL AS CUSTOM_SMALL_STRING_02,   NULL AS CUSTOM_SMALL_STRING_03,   NULL AS CUSTOM_SMALL_STRING_04,   NULL AS CUSTOM_DOUBLE_01,   NULL AS CUSTOM_SMALL_STRING_05,   NULL AS ROW_UPDATE_DATE,   NULL AS IS_OVERALL_PRIMARY FROM   (     SELECT       UA.ADDRESS_KEY,       ROW_NUMBER() OVER(         PARTITION BY CR.ACC_N,         CR.ADS_LOC_C         ORDER BY           CAST(UA.EFFECTIVE_DATE AS DATE) DESC       ) AS RNK,       ROW_NUMBER() OVER(         PARTITION BY CR.ACC_N         ORDER BY           CAST(UA.EFFECTIVE_DATE AS DATE),           ALC.EDC_ADS_LOC_DESC_T DESC       ) AS DRNK,       ROW_NUMBER() OVER(         PARTITION BY CR.ACC_N         ORDER BY           CAST(UA.EFFECTIVE_DATE AS DATE) DESC       ) AS DDRNK,       CASE WHEN ALC.EDC_ADS_LOC_DESC_T in ('Bus-Primary', 'Bus-Secondary') THEN 'BS' WHEN ALC.EDC_ADS_LOC_DESC_T = 'Home Secondary' THEN 'LA' WHEN ALC.EDC_ADS_LOC_DESC_T in ('Home-Legal Res') THEN 'LR' END AS ADDRESS_RELATION_TYPE_CD,       CR.ACC_N AS ENTITY_KEY,       'ACCOUNT' AS ENTITY_TYPE_CD,       NULL AS TENANT_CD,       UA.EFFECTIVE_DATE,       NULL AS EXPIRATION_DATE,       '0' AS IS_PRIMARY,       EDC_ADS_LOC_DESC_T,       CR.ADS_TYP_C,       CR.ADS_LOC_C,       NULL AS IS_TO_BE_DELETED,       NULL AS CUSTOM_BOOLEAN_01,       NULL AS CUSTOM_BOOLEAN_02,       NULL AS CUSTOM_DATE_01,       NULL AS CUSTOM_DATE_02,       NULL AS CUSTOM_DATE_03,       NULL AS CUSTOM_MEDIUM_STRING_01,       NULL AS CUSTOM_SMALL_STRING_01,       NULL AS CUSTOM_SMALL_STRING_02,       NULL AS CUSTOM_SMALL_STRING_03,       NULL AS CUSTOM_SMALL_STRING_04,       NULL AS CUSTOM_DOUBLE_01,       NULL AS CUSTOM_SMALL_STRING_05,       NULL AS ROW_UPDATE_DATE,       NULL AS IS_OVERALL_PRIMARY     FROM       UBS_ADDRESS AS UA       JOIN V_ENTITY_ADDRESS AS VEA ON UA.ADDRESS_KEY = VEA.ADDRESS_KEY       LEFT JOIN UBS_ADDRESS_ACCOUNT_XREF CR ON CR.ADS_I = UA.ADDRESS_KEY       LEFT JOIN UBS_ADDRESS_LOCATION_CODES AS ALC ON ALC.EDC_ADS_LOC_C = CR.ADS_LOC_C     where       ALC.EDC_ADS_LOC_DESC_T NOT IN('Home-Legal Res', 'Bus-Primary')   ) AS D]]>
			</query>
		</queries>
	</output>
	<output>
		<target dest="file" row-delimeter="~@^*^@~" col-delimeter="~##~">WORKING_DAY.DAT</target>
		<queries>
			<prequery></prequery>
			<query>
				<![CDATA[SELECT CONCAT( 	CONVERT( 	  VARCHAR, 	  CAST(CALENDAR_DATE AS DATE), 	  103 	), 	' 00:00:00.000'   ) AS  CALENDAR_DATE ,'US' AS COUNTRY_CD ,NULL AS TENANT_CD ,NULL AS EXCHANGE_CD ,'1' AS IS_BUSINESS_DAY ,NULL AS IS_HOLIDAY ,NULL AS IS_MONTH_END ,NULL AS IS_SHORT_DAY ,NULL AS IS_TO_BE_DELETED ,NULL AS CUSTOM_BOOLEAN_01 ,NULL AS CUSTOM_BOOLEAN_02 ,NULL AS CUSTOM_BOOLEAN_03 ,NULL AS CUSTOM_BOOLEAN_04 ,NULL AS CUSTOM_BOOLEAN_05 ,NULL AS CUSTOM_DATE_01 ,NULL AS CUSTOM_DATE_02 ,NULL AS CUSTOM_DOUBLE_01 ,NULL AS CUSTOM_MEDIUM_STRING_01 ,NULL AS CUSTOM_SMALL_STRING_01 ,NULL AS CUSTOM_SMALL_STRING_02 ,NULL AS CUSTOM_SMALL_STRING_03 ,NULL AS CUSTOM_SMALL_STRING_04 ,NULL AS CUSTOM_SMALL_STRING_05 FROM UBS_BUSINESS_DATE_FILE]]>
			</query>
		</queries>
	</output>
	<output>
		<target dest="file" row-delimeter="~@^*^@~" col-delimeter="~##~">MARKET_DATA_END_DAY.DAT</target>
		<queries>
			<prequery></prequery>
			<query>
				<![CDATA[SELECT DISTINCT CONCAT(CONVERT(VARCHAR,CAST(BUSINESS_DATE AS DATE),103),' 00:00:00.000') as BUSINESS_DATE, P.PRIMARY_EXCHANGE_CD AS EXCHANGE_CD, M.PRODUCT_KEY, NULL AS TENANT_CD, NULL AS ADPM, NULL AS ADTV, NULL AS BASE_CURR_ALL_TIME_HIGH, NULL AS BASE_CURR_ALL_TIME_LOW, NULL AS BASE_CURR_BASE_PRICE, 'USD' AS BASE_CURR_CD, BASE_CURR_CLOSING_PRICE, NULL AS BASE_CURR_DAY_HIGH_PRICE, NULL AS BASE_CURR_DAY_LOW_PRICE, NULL AS BASE_CURR_MARKET_CAP, NULL AS BASE_CURR_MARKET_MEAN, NULL AS BASE_CURR_OPENING_PRICE, NULL AS BASE_CURR_REFERENCE_PRICE, NULL AS DAILY_VOLUME, NULL AS DELIVERY_END_DAY, NULL AS DELIVERY_START_DAY, NULL AS FREE_FLOAT, NULL AS INDEX_NAME_ID, NULL AS INDEX_PUBLICATION_ID, NULL AS IS_MONTHLY_SUMMARY, NULL AS ORIG_CURR_ALL_TIME_HIGH, NULL AS ORIG_CURR_ALL_TIME_LOW, NULL AS ORIG_CURR_BASE_PRICE, 'USD' AS ORIG_CURR_CD, BASE_CURR_CLOSING_PRICE AS ORIG_CURR_CLOSING_PRICE, NULL AS ORIG_CURR_DAY_HIGH_PRICE, NULL AS ORIG_CURR_DAY_LOW_PRICE, NULL AS ORIG_CURR_MARKET_CAP, NULL AS ORIG_CURR_MARKET_MEAN, NULL AS ORIG_CURR_OPENING_PRICE, NULL AS ORIG_CURR_REFERENCE_PRICE, NULL AS OUTSTANDING_SHARES, NULL AS PRICING_ID, NULL AS SECTOR_INDEX_ID, NULL AS SECTOR_INDEX_VALUE, NULL AS VWAP, NULL AS WEIGHT_IN_SECTOR_INDEX, NULL AS CUSTOM_BOOLEAN_01, NULL AS CUSTOM_BOOLEAN_02, NULL AS CUSTOM_DATE_01, NULL AS CUSTOM_DATE_02, NULL AS CUSTOM_DOUBLE_01, NULL AS CUSTOM_DOUBLE_02, NULL AS CUSTOM_DOUBLE_03, NULL AS CUSTOM_DOUBLE_04, NULL AS CUSTOM_DOUBLE_05, NULL AS CUSTOM_DOUBLE_06, NULL AS CUSTOM_DOUBLE_07, NULL AS CUSTOM_DOUBLE_08, NULL AS CUSTOM_DOUBLE_09, NULL AS CUSTOM_DOUBLE_10, NULL AS CUSTOM_DOUBLE_11, NULL AS CUSTOM_DOUBLE_12, NULL AS CUSTOM_DOUBLE_13, NULL AS CUSTOM_MEDIUM_STRING_01, NULL AS CUSTOM_SMALL_STRING_01, NULL AS CUSTOM_SMALL_STRING_02, NULL AS CUSTOM_SMALL_STRING_03, NULL AS CUSTOM_SMALL_STRING_04, NULL AS CUSTOM_SMALL_STRING_05, NULL AS CUSTOM_SMALL_STRING_06, NULL AS CUSTOM_SMALL_STRING_07, NULL AS CUSTOM_SMALL_STRING_08, NULL AS CUSTOM_SMALL_STRING_09, NULL AS CUSTOM_SMALL_STRING_10, NULL AS ORIG_CURR_OPEN_AUCTION_PRICE, NULL AS BASE_CURR_OPEN_AUCTION_PRICE, NULL AS CTDV , NULL AS CDTV , NULL AS CLIENT_DAILY_VOLUME FROM UBS_MARKET_DATA_END_DAY AS M LEFT JOIN UBS_PRODUCT_03 AS P ON M.PRODUCT_KEY=P.PRODUCT_KEY]]>
			</query>
		</queries>
	</output>
	<output>
		<target dest="file" row-delimeter="~@^*^@~" col-delimeter="~##~">ACCOUNT.DAT</target>
		<queries>
			<prequery></prequery>
			<query>
				<![CDATA[ WITH FIRST_LAST_NAME AS (   SELECT       ACCOUNT_KEY,      IP_TIN_I,      TAX_BRACKET_CD,      ACCOUNT_FIRST_NAME,      ACCOUNT_LAST_NAME,       SECTOR_CD     FROM      (        SELECT          ATAR.ACCOUNT_KEY,          AC.IP_TIN_I,           CASE          /*INDIVIDUAL*/         WHEN AC.PARTY_TYPE_CD = 1          AND AC.TAX_BRACKET_CD = 'A' THEN 'AI' WHEN AC.PARTY_TYPE_CD = 1          AND AC.TAX_BRACKET_CD = 'B' THEN 'BI' WHEN AC.PARTY_TYPE_CD = 1          AND AC.TAX_BRACKET_CD = 'C' THEN 'CI' WHEN AC.PARTY_TYPE_CD = 1          AND AC.TAX_BRACKET_CD = 'D' THEN 'DI' WHEN AC.PARTY_TYPE_CD = 1          AND AC.TAX_BRACKET_CD = 'E' THEN 'EI'          /*CORPORATE*/          WHEN AC.PARTY_TYPE_CD = 2           AND AC.TAX_BRACKET_CD = 'A' THEN 'AC' WHEN AC.PARTY_TYPE_CD = 2           AND AC.TAX_BRACKET_CD = 'B' THEN 'BC' WHEN AC.PARTY_TYPE_CD = 2           AND AC.TAX_BRACKET_CD = 'C' THEN 'CC' WHEN AC.PARTY_TYPE_CD = 2           AND AC.TAX_BRACKET_CD = 'D' THEN 'DC' WHEN AC.PARTY_TYPE_CD = 2           AND AC.TAX_BRACKET_CD = 'E' THEN 'EC'           /*TRUST*/         WHEN AC.PARTY_TYPE_CD = 3          AND AC.TAX_BRACKET_CD = 'A' THEN 'AT' WHEN AC.PARTY_TYPE_CD = 3          AND AC.TAX_BRACKET_CD = 'B' THEN 'BT' WHEN AC.PARTY_TYPE_CD = 3          AND AC.TAX_BRACKET_CD = 'C' THEN 'CT' WHEN AC.PARTY_TYPE_CD = 3          AND AC.TAX_BRACKET_CD = 'D' THEN 'DT' WHEN AC.PARTY_TYPE_CD = 3          AND AC.TAX_BRACKET_CD = 'E' THEN 'ET'          /*ESTATE*/         WHEN AC.PARTY_TYPE_CD = 5          AND AC.TAX_BRACKET_CD = 'A' THEN 'AE' WHEN AC.PARTY_TYPE_CD = 5          AND AC.TAX_BRACKET_CD = 'B' THEN 'BE' WHEN AC.PARTY_TYPE_CD = 5          AND AC.TAX_BRACKET_CD = 'C' THEN 'CE' WHEN AC.PARTY_TYPE_CD = 5          AND AC.TAX_BRACKET_CD = 'D' THEN 'DE' WHEN AC.PARTY_TYPE_CD = 5          AND AC.TAX_BRACKET_CD = 'E' THEN 'EE' WHEN AC.PARTY_TYPE_CD = 5          AND AC.TAX_BRACKET_CD = 'F' THEN 'FE' WHEN AC.PARTY_TYPE_CD = 5          AND AC.TAX_BRACKET_CD = 'G' THEN 'GE' WHEN AC.PARTY_TYPE_CD = 5          AND AC.TAX_BRACKET_CD = 'H' THEN 'HE' WHEN AC.PARTY_TYPE_CD = 5          AND AC.TAX_BRACKET_CD = 'I' THEN 'IE' WHEN AC.PARTY_TYPE_CD = 5          AND AC.TAX_BRACKET_CD = 'J' THEN 'JE' WHEN AC.PARTY_TYPE_CD = 5          AND AC.TAX_BRACKET_CD = 'K' THEN 'KE' WHEN AC.PARTY_TYPE_CD = 5          AND AC.TAX_BRACKET_CD = 'L' THEN 'LE' WHEN AC.PARTY_TYPE_CD = 5          AND AC.TAX_BRACKET_CD = 'M' THEN 'ME' WHEN AC.PARTY_TYPE_CD = 5          AND AC.TAX_BRACKET_CD = 'N' THEN 'NE' WHEN AC.PARTY_TYPE_CD = 5          AND AC.TAX_BRACKET_CD = 'O' THEN 'OE' WHEN AC.PARTY_TYPE_CD = 5          AND AC.TAX_BRACKET_CD = 'P' THEN 'PE' WHEN AC.PARTY_TYPE_CD = 5          AND AC.TAX_BRACKET_CD = 'Q' THEN 'QE' END AS TAX_BRACKET_CD,           CASE WHEN AC.LAST_NAME <> '' THEN AC.FIRST_NAME ELSE AC.IP_CLI_ORG_X END AS ACCOUNT_FIRST_NAME,           CASE WHEN AC.LAST_NAME <> '' THEN AC.LAST_NAME ELSE '' END AS ACCOUNT_LAST_NAME,          NULLIF(AC.SECTOR_CD, '') AS SECTOR_CD,           ROW_NUMBER() OVER (           PARTITION BY ATAR.ACCOUNT_KEY            ORDER BY               ATAR.ED_EFF_D DESC          ) AS Rank1        FROM           UBS_ACCOUNT_TO_ACCOUNT_RELATIONSHIP ATAR          LEFT JOIN UBS_ACTIVE_CLIENT AC ON AC.PARTY_KEY = ATAR.PARTY_KEY        WHERE          ATAR.CAC_TAX_RPTG_C = 'Y'      ) ACC_NM    WHERE      Rank1 = 1  ),  CLI_LIQ_ASET_A AS(   SELECT       ATAR.ACCOUNT_KEY,       CFP.CLI_LIQ_ASET_A,       CFP.CLI_NET_WRTH_A    FROM       UBS_ACCOUNT_TO_ACCOUNT_RELATIONSHIP ATAR      LEFT JOIN UBS_CLIENT_FINANCIAL_PROFILE CFP ON CFP.PARTY_KEY = ATAR.PARTY_KEY     WHERE       ATAR.CAC_TAX_RPTG_C = 'Y' ),   IS_DISCRETIONARY  AS (    select      UACA.ACCOUNT_KEY,      count(*) CCOUNT    FROM       sp_ubs_APP.UBS_ACCOUNT_CLASSIFICATION_APPROVAL UACA     WHERE       UACA.CAC_CLASFN_C in ('CC1', 'DF1', 'PA2', 'PA5', 'PA6')    group by       ACCOUNT_KEY ),   FA_DISCRETIONARY AS (   SELECT       UACA.ACCOUNT_KEY,       UACA.CAC_CLASFN_C AS FA_DISCRETIONARY   FROM       sp_ubs_APP.UBS_ACCOUNT_CLASSIFICATION_APPROVAL UACA     WHERE       UACA.CAC_CLASFN_C in ('PA2', 'PA5') ),   STATE_529_CD AS (   SELECT       UACA.ACCOUNT_KEY,       UACA.CAC_CLASFN_C AS STATE_529_CD     FROM      UBS_ACCOUNT_CLASSIFICATION_APPROVAL UACA     WHERE       UACA.CAC_CLASFN_C IN ('ZAU')  ),  IS_DVP_RVP AS(   SELECT       UACA.ACCOUNT_KEY,       CASE WHEN UACA.CAC_CLASFN_C IN ('DV1', 'DV2') THEN 1 ELSE 0 END AS IS_DVP_RVP     FROM      UBS_ACCOUNT_CLASSIFICATION_APPROVAL UACA     WHERE       UACA.CAC_CLASFN_C IN ('DV1', 'DV2') ),   ACCOUNT_CATEGORY_CD AS(   SELECT       UACA.ACCOUNT_KEY,       UACA.CAC_CLASFN_C AS ACCOUNT_CATEGORY_CD    FROM       UBS_ACCOUNT_CLASSIFICATION_APPROVAL UACA  ),  FEE_BASED_ENROLL_DATE AS (   SELECT       UACA.ACCOUNT_KEY,       REG_APPVL_ACTN_D AS FEE_BASED_ENROLL_DATE     FROM      UBS_ACCOUNT_CLASSIFICATION_APPROVAL UACA     WHERE       UACA.CAC_CLASFN_C LIKE 'MA%'      AND UACA.REG_APPRVL_STAT_C = '00'  ),  IS_INSTITUTIONAL AS (    SELECT      UACA.ACCOUNT_KEY,      CASE WHEN UACA.CAC_CLASFN_C = 'IA1' THEN 1 ELSE 0 END AS IS_INSTITUTIONAL    FROM       UBS_ACCOUNT_CLASSIFICATION_APPROVAL UACA    WHERE      UACA.CAC_CLASFN_C = 'IA1'  ),  IS_MANAGED_ACCOUNT AS (    SELECT      UACA.ACCOUNT_KEY,      CASE WHEN UACA.CAC_CLASFN_C LIKE 'MA%' THEN 1 ELSE 0 END AS IS_MANAGED_ACCOUNT     FROM      UBS_ACCOUNT_CLASSIFICATION_APPROVAL UACA     WHERE       UACA.CAC_CLASFN_C LIKE 'MA%'  ),  INVEST_EXPERIENCE_COM AS(    SELECT      ATAR.ACCOUNT_KEY,      CFPR.INVESTMENT_EXPERIENCE AS INVESTMENT_EXPERIENCE_COM    FROM       UBS_ACCOUNT_TO_ACCOUNT_RELATIONSHIP ATAR      LEFT JOIN UBS_CLIENT_FINANCIAL_PRODUCT_EXPERIENCE CFPR ON CFPR.PARTY_KEY = ATAR.PARTY_KEY    WHERE      ATAR.CAC_TAX_RPTG_C = 'Y'      AND CFPR.CLI_FINL_XPRNC_C = 'C'  ),  INVEST_EXPERIENCE_EQ AS (    SELECT      ATAR.ACCOUNT_KEY,      CFPR.INVESTMENT_EXPERIENCE AS INVESTMENT_EXPERIENCE_EQ     FROM      UBS_ACCOUNT_TO_ACCOUNT_RELATIONSHIP ATAR       LEFT JOIN UBS_CLIENT_FINANCIAL_PRODUCT_EXPERIENCE CFPR ON CFPR.PARTY_KEY = ATAR.PARTY_KEY     WHERE       ATAR.CAC_TAX_RPTG_C = 'Y'       AND CFPR.CLI_FINL_XPRNC_C = 'E' ),   INVEST_EXPERIENCE_COM_AGGREGATED AS(    SELECT      X.ACCOUNT_KEY,       SUM(        CAST(         X.INVESTMENT_EXPERIENCE_OPT AS INT       )      ) AS INVESTMENT_EXPERIENCE_OPT,       SUM(        CAST(         X.INVESTMENT_EXPERIENCE_FI AS INT        )     ) AS INVESTMENT_EXPERIENCE_FI,       CASE WHEN SUM(        CAST(X.INVESTMENT_EXPERIENCE AS INT)      ) > 0 THEN 1 ELSE 0 END AS IS_TRADING_EXPERIENCE    FROM       (       SELECT           ATAR.ACCOUNT_KEY,           CFPR.INVESTMENT_EXPERIENCE,           CASE WHEN CFPR.CLI_FINL_XPRNC_C IN ('L', 'O', 'Y') THEN CFPR.INVESTMENT_EXPERIENCE ELSE 0 END AS INVESTMENT_EXPERIENCE_OPT,           CASE WHEN CFPR.CLI_FINL_XPRNC_C IN ('I', 'B') THEN CFPR.INVESTMENT_EXPERIENCE ELSE 0 END AS INVESTMENT_EXPERIENCE_FI        FROM           UBS_ACCOUNT_TO_ACCOUNT_RELATIONSHIP ATAR          LEFT JOIN UBS_CLIENT_FINANCIAL_PRODUCT_EXPERIENCE CFPR ON CFPR.PARTY_KEY = ATAR.PARTY_KEY        WHERE          ATAR.CAC_TAX_RPTG_C = 'Y'      ) AS X    GROUP BY       X.ACCOUNT_KEY ),   LAST_REVIEW_DATE AS (   SELECT       ATAR.PARTY_KEY,       ATAR.ACCOUNT_KEY,       UACA.CLI_CLASFN_C,      CASE WHEN UACA.CLI_CLASFN_C IN ('070', '071', '072', '073') THEN UACA.REG_APPVL_ACTN_D ELSE NULL END AS LAST_REVIEW_DATE     FROM      UBS_ACCOUNT_TO_ACCOUNT_RELATIONSHIP ATAR       LEFT JOIN UBS_CLIENT_CLASSIFICATION_APPROVALS UACA ON UACA.PARTY_KEY = ATAR.PARTY_KEY     WHERE       ATAR.CAC_TAX_RPTG_C = 'Y'       AND UACA.CLI_CLASFN_C IN ('070', '071', '072', '073') ),   VERIFICATION_STATUS_ID AS(    SELECT      ATAR.ACCOUNT_KEY,      CASE WHEN UACA.CLI_CLASFN_C IN ('070', '071', '072', '073') THEN (       CASE WHEN UACA.REG_APPVL_STAT_C = '00' THEN '0' ELSE UACA.REG_APPVL_STAT_C END     ) END AS VERIFICATION_STATUS_ID    FROM       UBS_ACCOUNT_TO_ACCOUNT_RELATIONSHIP ATAR      LEFT JOIN UBS_CLIENT_CLASSIFICATION_APPROVALS UACA ON UACA.PARTY_KEY = ATAR.PARTY_KEY    WHERE      ATAR.CAC_TAX_RPTG_C = 'Y'      AND UACA.CLI_CLASFN_C IN ('070', '071', '072', '073')  ),  PRIMARY_PARTY_KEY AS (   SELECT       ATAR.ACCOUNT_KEY,       ATAR.PARTY_KEY AS PRIMARY_PARTY_KEY     FROM      UBS_ACCOUNT_TO_ACCOUNT_RELATIONSHIP ATAR     WHERE       ATAR.CAC_TAX_RPTG_C = 'Y' ),   ACCT_STATUS_CD AS (   SELECT       SCR.APP_CRDB_RFRC_C AS ACCT_STATUS_CD     FROM      UBS_STATUS_CODES_REFERENCE SCR     WHERE       SCR.APP_CATG_C = '700AST' ),   HOUSEHOLD_ID AS (   SELECT       UAHC.ACCOUNT_KEY,       UAHC.HOUSEHOLD_ID AS HOUSEHOLD_ID     FROM      UBS_ACCOUNT_HH_COMS UAHC ),   ACCOUNT_FEE_TERM_DATE AS (    SELECT      UAFTD.ACCOUNT_NUMBER,      MAX(UAFTD.ED_END_D) AS FEE_TERM_DATE,      MAX(UAFTD.ED_EFF_D) AS FEE_ENROLL_DATE     FROM      UBS_ACCOUNT_FEE_TERM_DATE UAFTD      LEFT JOIN UBS_ACCOUNT_CLASSIFICATION_APPROVAL UACA ON UAFTD.ACCOUNT_NUMBER = UACA.ACCOUNT_KEY    WHERE      UACA.CAC_CLASFN_C LIKE 'MA%'       AND UACA.REG_APPRVL_STAT_C = '00'       AND UAFTD.CAC_HSTY_EVNT_C = '00028'     GROUP BY      UAFTD.ACCOUNT_NUMBER ),   INVESTMENT_TIME_HORIZON AS (    SELECT      UP02.PFL_ENTTY_I,      CASE WHEN UP03.PFL_CHCE_SHRT_T = 'Longer than 10 years (through several market cycles)' THEN '10' WHEN UP03.PFL_CHCE_SHRT_T = 'Less than 3 years' THEN '3' END AS INVESTMENT_TIME_HORIZON    FROM       UBS_PROFILE_02 AS UP02      LEFT JOIN UBS_PROFILE_01 AS UP01 ON UP02.PFL_I = UP01.PFL_I      LEFT JOIN UBS_PROFILE_03 AS UP03 ON UP03.PFL_ANS_CHCE_I = CONCAT('000000000', UP01.PFL_ANS_T)      AND UP03.PFL_QSN_I = UP01.PFL_QSN_I    WHERE      UP02.PFL_ENTTY_TYP_C = '0000000010'      AND UP01.PFL_TYP_I = '0000000060'      AND UP01.PFL_QSN_I = '0000000004'  ),  ACCOUNT_TYPE_CD AS (   SELECT       DISTINCT UACA.ACCOUNT_KEY,      CASE WHEN UACA.CAC_CLASFN_C = 'MAS'      AND UTBSFC.IP_ALTN_ID_TYP_C = 'FAM' THEN 'SigFig' ELSE UACA.CAC_CLASFN_C END AS ACCOUNT_TYPE_CD    FROM       UBS_ACCOUNT_CLASSIFICATION_APPROVAL UACA      JOIN UBS_ACCOUNT_TO_ACCOUNT_RELATIONSHIP UATAR ON UACA.ACCOUNT_KEY = UATAR.ACCOUNT_KEY       JOIN UBS_TRADE_BLOTTER_SIGFIG_FAMILY_CODE AS UTBSFC ON UATAR.PARTY_KEY = UTBSFC.IP_CLI_I    WHERE      UACA.CAC_CLASFN_C LIKE 'MA%' ),   IS_EMP_EMPREL AS(   SELECT       UACA.ACCOUNT_KEY,       UACA.CAC_CLASFN_C AS ACCOUNT_CATEGORY_CD    FROM       UBS_ACCOUNT_CLASSIFICATION_APPROVAL UACA    WHERE      UACA.CAC_CLASFN_C IN ('FR1', 'FR2')  ),  IP_ALTN_X AS(    SELECT      DISTINCT TBSFC.[IP_ALTN_X],      ATAR.ACCOUNT_KEY     FROM      [sp_ubs_APP].[sp_ubs_APP].[UBS_ACTIVE_CLIENT] AC       JOIN [sp_ubs_APP].[sp_ubs_APP].[UBS_TRADE_BLOTTER_SIGFIG_FAMILY_CODE] TBSFC ON AC.PARTY_KEY = TBSFC.IP_CLI_I      JOIN [sp_ubs_APP].[sp_ubs_APP].[UBS_ACCOUNT_TO_ACCOUNT_RELATIONSHIP] ATAR ON AC.PARTY_KEY = ATAR.PARTY_KEY     where       ATAR.RELATION_TYPE_CD = '38'  )  SELECT     DISTINCT UAM.ACCOUNT_KEY,     NULL AS TENANT_CD,    'C' AS ACCOUNT_CATEGORY_CD,    NULL AS ACCOUNT_CLASSIFICATION_CD,     FLN.ACCOUNT_FIRST_NAME,     FLN.ACCOUNT_LAST_NAME,    '' AS ACCOUNT_MAIDEN_NAME,     NULL AS ACCOUNT_MIDDLE_NAME,    NULL AS ACCOUNT_NAME,    RTRIM(     LTRIM(UAM.HOLDING_BRANCH_KEY)    ) + RTRIM(      LTRIM(UAM.ACCT_BASE_I)    ) AS ACCOUNT_NUMBER,    NULL AS ACCOUNT_OPENING_CHANNEL_CD,    UAM.ACCOUNT_SHORT_NAME AS ACCOUNT_OTHER_NAME,    NULL AS ACCOUNT_PRODUCT_CD,    NULL AS ACCOUNT_SOURCE_TYPE_CD,    CASE WHEN ASCD.ACCT_STATUS_CD = 'A' THEN 'O' WHEN ASCD.ACCT_STATUS_CD = 'D' THEN 'C' WHEN ASCD.ACCT_STATUS_CD = 'H' THEN 'P' WHEN ASCD.ACCT_STATUS_CD = 'N' THEN 'S' WHEN ASCD.ACCT_STATUS_CD = 'Q' THEN 'O' WHEN ASCD.ACCT_STATUS_CD = 'T' THEN 'C' WHEN ASCD.ACCT_STATUS_CD = 'U' THEN 'P' WHEN ASCD.ACCT_STATUS_CD = 'V' THEN 'P' WHEN ASCD.ACCT_STATUS_CD = 'W' THEN 'P' WHEN ASCD.ACCT_STATUS_CD = 'X' THEN 'C' WHEN ASCD.ACCT_STATUS_CD = 'Z' THEN 'C' END AS ACCOUNT_STATUS_CD,     NULL AS ACCOUNT_SUB_PRODUCT_CD,     ATC.ACCOUNT_TYPE_CD,    'USD' AS ACCT_CURR_CD,     NULL AS ACCT_CURR_CREDIT_LIMIT,     NULL AS ACCT_CURR_ST_ACCOUNT_ACTIVITY,    NULL AS ACCT_CURR_ST_ACCOUNT_VALUE,    CLAA.CLI_LIQ_ASET_A AS ACCT_CURR_ST_LIQUID_NET_WORTH,    CLAA.CLI_NET_WRTH_A AS ACCT_CURR_ST_TOTAL_NET_WORTH,     NULL AS AGG_UNIT_CATEGORY_ID,     NULL AS AGG_UNIT_CD,    NULL AS APPROVE_DATE,    NULL AS ATM_OVERDRAFT,     NULL AS BASE_CURR_CREDIT_LIMIT,     NULL AS BASE_CURR_ST_ACCOUNT_ACTIVITY,    NULL AS BASE_CURR_ST_ACCOUNT_VALUE,    CLAA.CLI_LIQ_ASET_A AS BASE_CURR_ST_LIQUID_NET_WORTH,    CLAA.CLI_NET_WRTH_A AS BASE_CURR_ST_TOTAL_NET_WORTH,     NULL AS BUSINESS_UNIT_CD,     NULL AS CLEARING_FIRM_ID,     NULL AS CLIENT_SOPHISTICATION_CD,     NULL AS COMMISSION_GROUP_CD,    NULL AS COMPANY_ID,    NULL AS CUSTOMER_TYPE,     NULL AS DISBURSMENT_AMOUNT,     CASE WHEN UAM.ACCT_OPEN_DATE = '' THEN NULL WHEN UAM.ACCT_OPEN_DATE <> '' THEN CONCAT(      CONVERT(        VARCHAR,        CAST(UAM.ACCT_OPEN_DATE AS DATE),        103      ),      ' 00:00:00.000'    ) END AS EFFECTIVE_DATE,    NULL AS EMPLOYEE_KEY,    NULL AS EXPIRATION_DATE,     NULL AS FACE_AMOUNT,    CASE WHEN FBED.FEE_BASED_ENROLL_DATE = ''    OR FBED.FEE_BASED_ENROLL_DATE IS NULL THEN (     CASE WHEN LEN(       CONCAT(          CONVERT(            VARCHAR,            CAST(AFTD.FEE_ENROLL_DATE AS DATE),            103          ),          ' 00:00:00.000'        )     ) <= '13' THEN NULL WHEN LEN(        CONCAT(         CONVERT(           VARCHAR,             CAST(AFTD.FEE_ENROLL_DATE AS DATE),             103         ),           ' 00:00:00.000'       )      ) <> '13' THEN CONCAT(        CONVERT(          VARCHAR,          CAST(AFTD.FEE_ENROLL_DATE AS DATE),          103        ),        ' 00:00:00.000'      ) END   ) WHEN FBED.FEE_BASED_ENROLL_DATE <> '' THEN CONCAT(     CONVERT(       VARCHAR,         CAST(         FBED.FEE_BASED_ENROLL_DATE AS DATE       ),         103     ),       ' 00:00:00.000'   ) END AS FEE_BASED_ENROLL_DATE,    CASE WHEN AFTD.FEE_TERM_DATE = '' THEN NULL WHEN AFTD.FEE_TERM_DATE <> '' THEN CONCAT(     CONVERT(       VARCHAR,         CAST(AFTD.FEE_TERM_DATE AS DATE),         103     ),       ' 00:00:00.000'   ) END AS FEE_BASED_TERM_DATE,    NULL AS FINANCIAL_INSTITUTION_CD,    UAM.HOLDING_BRANCH_KEY,    HI.HOUSEHOLD_ID,     NULL AS INITIAL_SOURCE_OF_FUND_CD,    IEC.INVESTMENT_EXPERIENCE_COM,     NULL AS INVESTMENT_EXPERIENCE_DEFAULT,    IEE.INVESTMENT_EXPERIENCE_EQ,    IECA.INVESTMENT_EXPERIENCE_FI,     NULL AS INVESTMENT_EXPERIENCE_FOREX,    NULL AS INVESTMENT_EXPERIENCE_MUF,     IECA.INVESTMENT_EXPERIENCE_OPT,     NULL AS INVESTMENT_OBJECTIVE_1_CD,    NULL AS INVESTMENT_OBJECTIVE_2_CD,     NULL AS INVESTMENT_OBJECTIVE_3_CD,    CASE WHEN UAM.INVESTMENT_OBJECTIVE_1_CD = 'A' THEN '3' WHEN UAM.INVESTMENT_OBJECTIVE_1_CD = 'B' THEN '4' WHEN UAM.INVESTMENT_OBJECTIVE_1_CD = 'I' THEN '2' END AS INVESTMENT_OBJECTIVE_CD,     ITH.INVESTMENT_TIME_HORIZON,    NULL AS IS_ACTIVE,     NULL AS IS_ANONYMOUS_ACCOUNT,     NULL AS IS_ARP,     CASE WHEN ID.CCOUNT >= '1' THEN 1 ELSE 0 END AS IS_DISCRETIONARY,     NULL AS IS_DIVIDEND,    ISNULL(IDR.IS_DVP_RVP, 0) AS IS_DVP_RVP,     NULL AS IS_EMPLOYEE_ACCOUNT,    CASE WHEN RTRIM(     LTRIM(UAM.ACCT_BASE_I)   ) LIKE 'L99%' THEN '1' ELSE '0' END AS IS_ERROR_ACCOUNT,     NULL AS IS_FOREIGN_FINANCIAL_ORG,     ISNULL(II.IS_INSTITUTIONAL, 0) AS IS_INSTITUTIONAL,     NULL AS IS_LIST_POST,     ISNULL(IMA.IS_MANAGED_ACCOUNT, 0) AS IS_MANAGED_ACCOUNT,    NULL AS IS_MARGIN_ACCOUNT,     NULL AS IS_NON_OPERATING_ENTITY,    NULL AS IS_NON_PHYSICAL_ADDRESS,     NULL AS IS_NON_RESIDENT,    NULL AS IS_ONLINE_ACCOUNT,     NULL AS IS_OPTION_APPROVED,     NULL AS IS_PASSIVELY_MANAGED,     NULL AS IS_PEP,     NULL AS IS_POS_PAY,     NULL AS IS_QIB,     NULL AS IS_QUALIFIED,     NULL AS IS_SEEKING_INVESTMENT_ADVICE,     NULL AS IS_SENSITIVE_SECTOR,    NULL AS IS_SINGLE_JOINT,     NULL AS IS_SOFT_DOLLAR,     NULL AS IS_STREET_SIDE,     NULL AS IS_SUSPECT,     CASE WHEN UAM.IS_TO_BE_DELETED = 'D' THEN 1 ELSE 0 END AS IS_TO_BE_DELETED,     IECA.IS_TRADING_EXPERIENCE,     NULL AS IS_VA_ACCOUNT_FLAG,     NULL AS IS_WITH_STANDING_TRANSFERS,     NULL AS ISSUE_STATE_PROVINCE_CD,    NULL AS ISSUER_KEY,    CASE WHEN LRD.LAST_REVIEW_DATE = '' THEN NULL WHEN LRD.LAST_REVIEW_DATE <> '' THEN CONCAT(     CONVERT(       VARCHAR,         CAST(LRD.LAST_REVIEW_DATE AS DATE),         103     ),       ' 00:00:00.000'   ) END AS LAST_REVIEW_DATE,     NULL AS LIQUIDITY_NEEDS,    NULL AS MAIL_CODE_CD,    UAM.ACCOUNT_KEY AS MASTER_ACCOUNT_KEY,     NULL AS MATURITY_DATE,    NULL AS NUMBER_OF_LOANS,     NULL AS NUMBER_OF_RELATED_PARTIES,    NULL AS ONGOING_SOURCE_OF_FUND_CD,     NULL AS OPENING_BRANCH_KEY,     NULL AS OPTION_APPROVAL_LEVEL_CD,     NULL AS OVERDRAFT_LIMIT,    NULL AS PAYMENT_DUE_DATE,    NULL AS PAYMENT_SCHEDULE_ID,     NULL AS PEER_CD,    NULL AS PREMIUM_AMOUNT,    PPK.PRIMARY_PARTY_KEY AS PRIMARY_PARTY_KEY,    UAM.PRIMARY_REPRESENTATIVE_KEY AS PRIMARY_REPRESENTATIVE_KEY,    'US' AS REGION_CD,     NULL AS REGION_ID,    NULL AS REINSTATEMENT_DATE,    NULL AS REOPEN_DATE,     FLN.SECTOR_CD,    NULL AS SEGMENT_CD,    NULL AS SOURCE_SYSTEM_CD,    SC.STATE_529_CD,     NULL AS STATEMENT_DATE,     NULL AS SURRENDER_AMOUNT,     NULL AS SURRENDER_PENALTY_AMOUNT,     FLN.TAX_BRACKET_CD,     NULL AS VERIFICATION_DATE,    VSI.VERIFICATION_STATUS_ID,    NULL AS SAM_POPULATION_GROUP_CD,     NULL AS SAM_ACCOUNT_ACTIVITY,     CASE WHEN UAM.FA_CONTROL_FLAG = 'Y' THEN 1 ELSE 0 END AS CUSTOM_BOOLEAN_01,     NULL AS CUSTOM_BOOLEAN_02,    NULL AS CUSTOM_BOOLEAN_03,     NULL AS CUSTOM_BOOLEAN_04,    NULL AS CUSTOM_BOOLEAN_05,     NULL AS CUSTOM_BOOLEAN_06,    NULL AS CUSTOM_BOOLEAN_07,     NULL AS CUSTOM_BOOLEAN_08,    NULL AS CUSTOM_BOOLEAN_09,     NULL AS CUSTOM_DATE_01,     NULL AS CUSTOM_DATE_02,     NULL AS CUSTOM_DATE_03,     NULL AS CUSTOM_DATE_04,     NULL AS CUSTOM_DATE_05,     NULL AS CUSTOM_DOUBLE_01,     NULL AS CUSTOM_DOUBLE_02,     NULL AS CUSTOM_DOUBLE_03,     NULL AS CUSTOM_DOUBLE_04,     NULL AS CUSTOM_DOUBLE_05,     NULL AS CUSTOM_DOUBLE_06,     NULL AS CUSTOM_DOUBLE_07,     NULL AS CUSTOM_INTEGER_01,    NULL AS CUSTOM_INTEGER_02,     NULL AS CUSTOM_INTEGER_03,    NULL AS CUSTOM_MEDIUM_STRING_01,     NULL AS CUSTOM_MEDIUM_STRING_02,    NULL AS CUSTOM_MEDIUM_STRING_03,     CASE WHEN IER.ACCOUNT_CATEGORY_CD = 'FR1' THEN 'E' WHEN IER.ACCOUNT_CATEGORY_CD = 'FR2' THEN 'ER' END AS CUSTOM_SMALL_STRING_01,    FAPA2.FA_DISCRETIONARY AS CUSTOM_SMALL_STRING_02,    FAPA5.FA_DISCRETIONARY AS CUSTOM_SMALL_STRING_03,    FLN.IP_TIN_I AS CUSTOM_SMALL_STRING_04,    IAX.IP_ALTN_X AS CUSTOM_SMALL_STRING_05,     NULL AS CUSTOM_SMALL_STRING_06,     NULL AS CUSTOM_SMALL_STRING_07,     NULL AS CUSTOM_SMALL_STRING_08,     NULL AS CUSTOM_SMALL_STRING_09,     NULL AS CUSTOM_SMALL_STRING_10,     NULL AS CUSTOM_SMALL_STRING_11,     NULL AS CUSTOM_SMALL_STRING_12,     NULL AS CUSTOM_SMALL_STRING_13,     NULL AS CUSTOM_SMALL_STRING_14,     NULL AS CUSTOM_SMALL_STRING_15,     NULL AS CUSTOM_SMALL_STRING_16,     NULL AS CUSTOM_SMALL_STRING_17,     NULL AS CUSTOM_SMALL_STRING_18,     NULL AS CUSTOM_SMALL_STRING_19,     NULL AS CUSTOM_SMALL_STRING_20,     NULL AS IS_EXTERNAL,    NULL AS IS_DORMANT,    NULL AS IS_HOLD_MAIL,    NULL AS RETURN_MAIL_IND,     NULL AS IS_HIGH_ASSET_ACCOUNT,    NULL AS MOBILE_PHONE_UPDATE_DATE,    NULL AS ADDRESS_UPDATE_DATE,     NULL AS PHONE_UPDATE_DATE,    NULL AS EMAIL_UPDATE_DATE,     NULL AS PHONE3_UPDATE_DATE,     NULL AS INFO_UPDATE_DATE,     NULL AS PHONE2_UPDATE_DATE,     NULL AS PASSWORD_UPDATE_DATE,     NULL AS NAME_UPDATE_DATE,     NULL AS PIN_UPDATE_DATE,    NULL AS ROW_UPDATE_DATE,     NULL AS CTR_ADDITIONAL_INFO   FROM    UBS_ACCOUNT_MASTER UAM     JOIN V_ACCOUNT_MASTER AS VAM ON UAM.ACCOUNT_KEY = VAM.ACCOUNT_KEY     LEFT JOIN FIRST_LAST_NAME FLN ON FLN.ACCOUNT_KEY = UAM.ACCOUNT_KEY    LEFT JOIN INVEST_EXPERIENCE_COM_AGGREGATED IECA ON IECA.ACCOUNT_KEY = UAM.ACCOUNT_KEY    LEFT JOIN PRIMARY_PARTY_KEY PPK ON PPK.ACCOUNT_KEY = UAM.ACCOUNT_KEY     LEFT JOIN ACCT_STATUS_CD ASCD ON ASCD.ACCT_STATUS_CD = UAM.ACCT_STAT_C    LEFT JOIN HOUSEHOLD_ID HI ON HI.ACCOUNT_KEY = UAM.ACCOUNT_KEY    LEFT JOIN IS_DISCRETIONARY ID ON ID.ACCOUNT_KEY = UAM.ACCOUNT_KEY    LEFT JOIN IS_DVP_RVP IDR ON IDR.ACCOUNT_KEY = UAM.ACCOUNT_KEY    LEFT JOIN ACCOUNT_CATEGORY_CD AC ON AC.ACCOUNT_KEY = UAM.ACCOUNT_KEY     LEFT JOIN FEE_BASED_ENROLL_DATE FBED ON FBED.ACCOUNT_KEY = UAM.ACCOUNT_KEY    LEFT JOIN INVEST_EXPERIENCE_COM IEC ON IEC.ACCOUNT_KEY = UAM.ACCOUNT_KEY     LEFT JOIN INVEST_EXPERIENCE_EQ IEE ON IEE.ACCOUNT_KEY = UAM.ACCOUNT_KEY     LEFT JOIN IS_INSTITUTIONAL II ON II.ACCOUNT_KEY = UAM.ACCOUNT_KEY     LEFT JOIN IS_MANAGED_ACCOUNT IMA ON IMA.ACCOUNT_KEY = UAM.ACCOUNT_KEY     LEFT JOIN LAST_REVIEW_DATE LRD ON LRD.ACCOUNT_KEY = UAM.ACCOUNT_KEY     LEFT JOIN VERIFICATION_STATUS_ID VSI ON VSI.ACCOUNT_KEY = UAM.ACCOUNT_KEY     LEFT JOIN CLI_LIQ_ASET_A CLAA ON CLAA.ACCOUNT_KEY = UAM.ACCOUNT_KEY     LEFT JOIN STATE_529_CD SC ON SC.ACCOUNT_KEY = UAM.ACCOUNT_KEY     LEFT JOIN ACCOUNT_FEE_TERM_DATE AS AFTD ON AFTD.ACCOUNT_NUMBER = UAM.ACCOUNT_KEY    LEFT JOIN INVESTMENT_TIME_HORIZON AS ITH ON ITH.PFL_ENTTY_I = UAM.ACCOUNT_KEY    LEFT JOIN ACCOUNT_TYPE_CD AS ATC ON ATC.ACCOUNT_KEY = UAM.ACCOUNT_KEY    LEFT JOIN IS_EMP_EMPREL IER ON UAM.ACCOUNT_KEY = IER.ACCOUNT_KEY     LEFT JOIN IP_ALTN_X IAX ON UAM.ACCOUNT_KEY = IAX.ACCOUNT_KEY    LEFT JOIN FA_DISCRETIONARY FAPA2 ON UAM.ACCOUNT_KEY = FAPA2.ACCOUNT_KEY     AND  FAPA2.FA_DISCRETIONARY='PA2'   LEFT JOIN FA_DISCRETIONARY FAPA5 ON UAM.ACCOUNT_KEY = FAPA5.ACCOUNT_KEY     AND  FAPA5.FA_DISCRETIONARY='PA5'    ]]>
			</query>
		</queries>
	</output>
	<output>
		<target dest="file" row-delimeter="~@^*^@~" col-delimeter="~##~">BRANCH.DAT</target>
		<queries>
			<prequery></prequery>
			<query>
				<![CDATA[SELECT   DISTINCT UBGI.BRANCH_KEY,   NULL AS TENANT_CD,   NULL AS APPROV_OFFICIAL_NAME,   NULL AS APPROV_OFFICIAL_TITLE,   UBGI.BRANCH_NAME,   UBGI.BRANCH_NUMBER,   NULL AS BRANCH_RSSD_ID,   NULL AS CONTACT_AGENCY,   NULL AS CONTACT_AREA_CD,   NULL AS CONTACT_FIRST_NAME,   NULL AS CONTACT_LAST_NAME,   NULL AS CONTACT_MIDDLE_NAME,   NULL AS CONTACT_TITLE,   NULL AS CTR_RESOLUTION_CD,   NULL AS EFFECTIVE_DATE,   NULL AS EXPIRATION_DATE,   NULL AS GEO_DEMOGRAPHIC_GROUP_CD,   NULL AS IS_EXEMPT_BRANCH,   NULL AS IS_TO_BE_DELETED,   NULL AS MANAGER_REP_KEY,   NULL AS ORGANIZATION_KEY,   'US' AS REGION_CD,   NULL AS REGULATOR_CD,   NULL AS ROUTING_TYPE_CD,   NULL AS SUB_REGION_CD,   NULL AS CUSTOM_BOOLEAN_01,   NULL AS CUSTOM_BOOLEAN_02,   NULL AS CUSTOM_DATE_01,   NULL AS CUSTOM_DATE_02,   NULL AS CUSTOM_DOUBLE_01,    CONCAT (UBGI.ADDRESS_1, UBGI.ADDRESS_2) AS CUSTOM_MEDIUM_STRING_01,   NULL AS CUSTOM_SMALL_STRING_01,   RTRIM(     CONCAT (       RTRIM(UBGI.CITY),       CONCAT(         STATE,         CONCAT(           UBGI.COUNTRY_CODE, UBGI.POSTAL_CODE         )       )     )   ) AS CUSTOM_SMALL_STRING_02,   UBGI.TEL_NO AS CUSTOM_SMALL_STRING_03,   UBGI.URL AS CUSTOM_SMALL_STRING_04,   (     CASE WHEN UBIO.ORG_STAT_C = 'AVAIL' THEN '1' WHEN UBIO.ORG_STAT_C = 'MERGED' THEN '1' WHEN UBIO.ORG_STAT_C = 'OPEN' THEN '1' WHEN UBIO.ORG_STAT_C = 'CLOSED' THEN '0' END   ) AS CUSTOM_SMALL_STRING_05,   NULL AS CUSTOM_SMALL_STRING_06,   NULL AS CUSTOM_SMALL_STRING_07,   NULL AS CUSTOM_SMALL_STRING_08,   NULL AS COUNTRY_CD,   NULL AS ROW_UPDATE_DATE,   NULL AS CTR_ADDITIONAL_INFO,   NULL AS CTR_REGULATOR_CODE_CD,   NULL AS BRANCH_ALTERNATE_NAME,   NULL AS CTR_FI_TYPE_CD,   NULL AS CTR_FI_TYPE_OTHER,   NULL AS CTR_FI_ID_NUMBER_TYPE_CD,   NULL AS FI_ID_NUMBER,   NULL AS CTR_GAMING_FI_TYPE_CD,   NULL AS CTR_GAMING_FI_TYPE_OTHER,   NULL AS IS_RESPONDENT FROM   UBS_BRANCH_GENERAL_INFORMATION UBGI   JOIN V_BRANCH VB ON VB.BRANCH_KEY = UBGI.BRANCH_KEY   LEFT JOIN UBS_BRANCH_GENERAL_INFO_ORG UBIO ON UBGI.BRANCH_KEY = UBIO.ORG_I WHERE   UBIO.ORG_STAT_C IN (     'AVAIL', 'CLOSED', 'MERGED', 'OPEN'   ) ]]>
			</query>
		</queries>
	</output>
    <output>
            <target dest="file" row-delimeter="~@^*^@~" col-delimeter="~##~">REPRESENTATIVE.DAT</target>
            <queries>
                    <prequery></prequery>
                    <query>
                            <![CDATA[WITH SSN_I AS (     SELECT   	DISTINCT R.[REPRESENTATIVE_KEY]         ,E.[EMPLOYEE_SSN_I]      FROM [sp_ubs_APP].[sp_ubs_APP].[UBS_EMPLOYEE] E       JOIN [sp_ubs_APP].[sp_ubs_APP].[UBS_FA_01] R ON E.EMPLOYEE_ID=R.EMPLOYEE_ID    )   SELECT     FA1.REPRESENTATIVE_KEY,      NULL AS TENANT_CD,        FA1.BRANCH_KEY,     EMPLOYEE_ID,     CASE         WHEN FIRST_NAME = '' THEN SPLIT_NAME         ELSE FIRST_NAME      END AS FIRST_NAME,        NULL AS HIRE_DATE,      CASE          WHEN EMP_STAT_C = 'A' THEN '1'            ELSE '0'        END AS IS_ACTIVE,       NULL AS IS_PRODUCING_MANAGER,      NULL AS IS_TO_BE_DELETED,     NULL AS IS_UNDER_SUPERVISION,        LAST_NAME,      NULL AS LOCATION_ID,      NULL AS PARTY_KEY,        NULL AS REGISTRATION_DATE,      NULL AS REPRESENTATIVE_TYPE_CD,       SOURCE_REP_ID,     NULL AS SUPERVISOR_NAME,     NULL AS CUSTOM_BOOLEAN_01,       NULL AS CUSTOM_BOOLEAN_02,     NULL AS CUSTOM_DATE_01,      NULL AS CUSTOM_DATE_02,       NULL AS CUSTOM_DOUBLE_01,      NULL AS CUSTOM_MEDIUM_STRING_01,      FA_ENTTY_TYP_C AS CUSTOM_SMALL_STRING_01,     FA_EMAIL AS CUSTOM_SMALL_STRING_02,      CASE          WHEN LEN(FA1.EMP_TEL_N) >= 3 THEN SUBSTRING(FA1.EMP_TEL_N, 1, 3)          ELSE FA1.EMP_TEL_N        END AS CUSTOM_SMALL_STRING_03,      CASE          WHEN LEN(FA1.EMP_TEL_N) > 3 THEN SUBSTRING(FA1.EMP_TEL_N, 4, LEN(FA1.EMP_TEL_N) - 3)          ELSE NULL     END AS CUSTOM_SMALL_STRING_04,       ESI.EMPLOYEE_SSN_I AS CUSTOM_SMALL_STRING_05,      NULL AS CUSTOM_SMALL_STRING_06,       NULL AS CUSTOM_SMALL_STRING_07,        NULL AS CUSTOM_SMALL_STRING_08,     NULL AS CUSTOM_SMALL_STRING_09,      NULL AS ROW_UPDATE_DATE   FROM       UBS_FA_01 FA1      JOIN V_REPRESENTATIVE VR ON FA1.REPRESENTATIVE_KEY = VR.REPRESENTATIVE_KEY        LEFT JOIN SSN_I ESI ON  VR.REPRESENTATIVE_KEY = ESI.REPRESENTATIVE_KEY  ]]>
                    </query>
            </queries>
    </output>
	<output>
																																											   
		   
						
		  
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																			   
		   
			
		  
		 
		<target dest="file" row-delimeter="~@^*^@~" col-delimeter="~##~">REPRESENTATIVE_SPLIT.DAT</target>
		<queries>
			<prequery></prequery>
			<query>
				<![CDATA[WITH SSN_I AS (     SELECT   	DISTINCT R.[REPRESENTATIVE_KEY]         ,E.[EMPLOYEE_SSN_I]      FROM [sp_ubs_APP].[sp_ubs_APP].[UBS_EMPLOYEE] E       JOIN [sp_ubs_APP].[sp_ubs_APP].[UBS_FA_01] R ON E.EMPLOYEE_ID=R.EMPLOYEE_ID    )   SELECT     A.REPRESENTATIVE_KEY,        B.SPLIT_KEY,        NULL AS TENANT_CD,      NULL AS IS_ACTIVE,        NULL AS IS_TO_BE_DELETED,       NULL AS NON_NATURAL_CD,        NULL AS SPLIT_NAME,     B.SPLIT_PERCENT,     NULL AS CUSTOM_BOOLEAN_01,       NULL AS CUSTOM_BOOLEAN_02,     NULL AS CUSTOM_DATE_01,      NULL AS CUSTOM_DATE_02,       NULL AS CUSTOM_DOUBLE_01,      NULL AS CUSTOM_MEDIUM_STRING_01,      ESI.EMPLOYEE_SSN_I AS CUSTOM_SMALL_STRING_01,     NULL AS CUSTOM_SMALL_STRING_02,      NULL AS CUSTOM_SMALL_STRING_03,       NULL AS CUSTOM_SMALL_STRING_04,        NULL AS CUSTOM_SMALL_STRING_05,     NULL AS ROW_UPDATE_DATE  FROM      UBS_FA_01 A       JOIN V_REPRESENTATIVE_SPLIT VRS ON VRS.REPRESENTATIVE_SPLIT = A.SOURCE_REP_ID      LEFT JOIN UBS_FA_02 B ON A.SOURCE_REP_ID = B.REPRESENTATIVE_SPLIT     LEFT JOIN SSN_I ESI ON  ESI.REPRESENTATIVE_KEY = A.REPRESENTATIVE_KEY]]>
			</query>
		</queries>
	</output>
	<output>
		<target dest="file" row-delimeter="~@^*^@~" col-delimeter="~##~">BROKER_STATE_REGISTRATION.DAT</target>
		<queries>
			<prequery></prequery>
			<query>
				<![CDATA[SELECT   DISTINCT UB5.REGISTERED_STATE_PROVINCE_CD,   UB6.REPRESENTATIVE_KEY,   NULL AS TENANT_CD,   NULL AS IS_TO_BE_DELETED,   NULL AS CUSTOM_BOOLEAN_01,   NULL AS CUSTOM_BOOLEAN_02,   NULL AS CUSTOM_DATE_01,   NULL AS CUSTOM_DATE_02,   NULL AS CUSTOM_DOUBLE_01,   NULL AS CUSTOM_MEDIUM_STRING_01,   NULL AS CUSTOM_SMALL_STRING_01,   NULL AS CUSTOM_SMALL_STRING_02,   NULL AS CUSTOM_SMALL_STRING_03,   NULL AS CUSTOM_SMALL_STRING_04,   NULL AS CUSTOM_SMALL_STRING_05,   NULL AS CUSTOM_SMALL_STRING_06,   NULL AS CUSTOM_SMALL_STRING_07,   NULL AS ROW_UPDATE_DATE FROM   UBS_BLR_06 UB6   JOIN V_BROKER_STATE VBS ON UB6.IP_I = VBS.IP_I   LEFT JOIN UBS_BLR_05 UB5 ON UB5.IP_I = UB6.IP_I WHERE   UB5.IP_RGS_TYP_C IN ('E', 'S', 'X')   AND UB5.RGS_STAT_C <> 'T'   And UB6.REPRESENTATIVE_KEY IS NOT NULL ]]>
			</query>
		</queries>
	</output>
	<output>
		<target dest="file" row-delimeter="~@^*^@~" col-delimeter="~##~">BROKER_LICENSE_TYPE.DAT</target>
		<queries>
			<prequery></prequery>
			<query>
				<![CDATA[SELECT   BLR1.SECURITY_EXAM_CD AS LICENSE_CD,   NULL AS TENANT_CD,   SECURITY_EXAM_DESC AS LICENSE_DESC,   NULL AS CUSTOM_BOOLEAN_01,   NULL AS CUSTOM_MEDIUM_STRING_01,   NULL AS CUSTOM_SMALL_STRING_01,   NULL AS CUSTOM_SMALL_STRING_02,   NULL AS CUSTOM_SMALL_STRING_03 FROM   UBS_BLR_01 BLR1   JOIN   V_BROKER_LICENSE_TYPE VBLT   ON BLR1.SECURITY_EXAM_CD = VBLT.SECURITY_EXAM_CD  ]]>
			</query>
		</queries>
	</output>
	<output>
		<target dest="file" row-delimeter="~@^*^@~" col-delimeter="~##~">REP_LICENSING.DAT</target>
		<queries>
			<prequery></prequery>
			<query>
				<![CDATA[SELECT   DISTINCT NULLIF(UB5.SECURITY_EXAM_CD, '') AS LICENSE_CD,   UB6.REPRESENTATIVE_KEY AS REPRESENTATIVE_KEY,   UB5.REGISTERED_STATE_PROVINCE_CD AS STATE_CD,   NULL AS TENANT_CD,   NULL AS IS_TO_BE_DELETED,   NULL AS CUSTOM_BOOLEAN_01,   NULL AS CUSTOM_BOOLEAN_02,   NULL AS CUSTOM_DATE_01,   NULL AS CUSTOM_DATE_02,   NULL AS CUSTOM_DOUBLE_01,   NULL AS CUSTOM_MEDIUM_STRING_01,   NULL AS CUSTOM_SMALL_STRING_01,   NULL AS CUSTOM_SMALL_STRING_02,   NULL AS CUSTOM_SMALL_STRING_03,   NULL AS CUSTOM_SMALL_STRING_04,   NULL AS CUSTOM_SMALL_STRING_05,   NULL AS CUSTOM_SMALL_STRING_06,   NULL AS CUSTOM_SMALL_STRING_07,   NULL AS CUSTOM_SMALL_STRING_08,   NULL AS ROW_UPDATE_DATE FROM   UBS_BLR_06 UB6 JOIN  V_BROKER_STATE VBS   ON VBS.IP_I = UB6.IP_I   LEFT JOIN UBS_BLR_05 UB5 ON UB5.IP_I = UB6.IP_I  LEFT JOIN UBS_BLR_01 UB1 ON UB5.SECURITY_EXAM_CD = UB1.SECURITY_EXAM_CD WHERE   UB5.IP_RGS_TYP_C IN ('E', 'S', 'X')   AND UB5.RGS_STAT_C <> 'T'   AND UB6.REPRESENTATIVE_KEY IS NOT NULL ]]>
			</query>
		</queries>
	</output>
	<output>
		<target dest="file" row-delimeter="~@^*^@~" col-delimeter="~##~">PRODUCT.DAT</target>
		<queries>
			<prequery></prequery>
			<query>
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																					
				<![CDATA[WITH PRODUCT_SUB_TYPE AS( SELECT DISTINCT UP3.PRODUCT_KEY, /*PRODUCT_TYPE_CD*/ CASE /*ALT: Alternative Investments*/ WHEN UP2.STMT_MAJOR_CD IN (001) AND UP2.STMT_MINOR_CD IN (043, 028, 002) THEN 'ALT' /*ANN: Annuity*/ WHEN UP3.PRODUCT_CLASSIFICATION_CD IN ('ILW') THEN 'ANN' WHEN UP2.STMT_MAJOR_CD IN (008) AND UP2.STMT_MINOR_CD IN (004) THEN 'ANN' /*CSE: Cash & Cash Equivalent*/ WHEN UP3.PRODUCT_CLASSIFICATION_CD IN ('BL','FAD','CPC','CPD') THEN 'CSE' WHEN UP2.STMT_MAJOR_CD IN (009, 020, 029) AND UP2.STMT_MINOR_CD IN (009, 035, 059, 060) THEN 'CSE' /*EQ: Equity*/ WHEN UP3.PRODUCT_CLASSIFICATION_CD IN ('ADR','CSTA','CSTB','CSTC','CSTK','DPRC','FSTK','RSTR','SBI','WTS') THEN 'EQ' WHEN UP2.STMT_MAJOR_CD IN (003) OR (UP2.STMT_MAJOR_CD IN (004, 005) AND UP3.PRO_TYP_C IN ('EQ')) THEN 'EQ' /*FI: Fixed Income*/ WHEN UP3.PRODUCT_CLASSIFICATION_CD IN ('ABS','BD','CMO','CPC','CPD','FAC','FAZ','FG','FNP','GP','GPM','GT','MBAC','MBCC','MBNR','MBVR','MBZ','N','PGP','PGU','PRGM','SBA','WIN') THEN 'FI' WHEN UP2.STMT_MAJOR_CD IN (009, 007) OR (UP2.STMT_MAJOR_CD IN (004, 005) AND UP3.PRO_TYP_C IN ('DB')) THEN 'FI' /*FUT: Futures*/ WHEN UP2.STMT_MAJOR_CD IN (002) AND UP2.STMT_MINOR_CD IN (041) THEN 'FUT' /*MFU: Mutual Fund*/ WHEN UP3.PRODUCT_CLASSIFICATION_CD IN ('MSGM','MUTC') THEN 'MFU' WHEN UP2.STMT_MAJOR_CD IN (015) AND UP2.STMT_MINOR_CD IN (034) THEN 'MFU' /*OTH: Other Products*/ WHEN UP3.PRODUCT_CLASSIFICATION_CD IN ('RTS','UNTE','UNTF','UNTM','UNTT') THEN 'OTH' WHEN UP2.STMT_MAJOR_CD IN (006, 008, 011, 019, 027, 028) AND UP2.STMT_MINOR_CD IN (019, 001) THEN 'OTH' /*INS: Insurance*/ WHEN UP3.PRODUCT_CLASSIFICATION_CD IN ('IFL', 'IHC', 'ILT', 'ILU', 'IVL') THEN 'INS' /*RTS: REIT*/ WHEN UP3.EDC_TYP_LVL4_C IN ('UZ', 'GR', 'NX') THEN 'RTS' /*OPT: OPTIONS*/ WHEN UP2.STMT_MAJOR_CD IN (017) AND UP2.STMT_MINOR_CD IN (008, 044) THEN 'OPT' /*STR: Structured Products*/ WHEN UP2.STMT_MAJOR_CD IN (024) AND UP2.STMT_MINOR_CD IN (050) THEN CASE WHEN UP3.EDC_TYP_LVL2_C IN ('SC') THEN 'FI' /*Product_Sub_Type condition*/ ELSE 'STR' END END AS PRODUCT_TYPE_CD, /*PRODUCT_SUB_TYPE_CD*/ CASE /* Type: ALT: Alternative Investments Sub_Type AI: Alternate Investments*/ WHEN UP2.STMT_MAJOR_CD IN (001) AND UP2.STMT_MINOR_CD IN (043, 028, 002) THEN 'AI' /* Type: ANN: Annuity Sub_type: FA :Fixed Annuities OAN :Other Annuities VA :Variable Annuities IMA :Immediate Annuities*/ WHEN UP2.STMT_MAJOR_CD IN (008) AND UP2.STMT_MINOR_CD IN (004) THEN CASE WHEN UP3.EDC_TYP_LVL2_C IN ('IF') THEN 'FA' WHEN UP3.EDC_TYP_LVL2_C IN ('OAN') THEN 'OAN' WHEN UP3.EDC_TYP_LVL2_C IN ('VA') THEN 'VA' WHEN UP3.PRODUCT_CLASSIFICATION_CD IN ('IIA') THEN 'IMA' ELSE 'OAN' END /* Type: CSE: Cash & Cash Equivalent SUB_Type: CA : Cash MMF: Money Market Funds - OTH */ WHEN UP3.PRODUCT_CLASSIFICATION_CD IN ('BL') THEN 'CA' WHEN UP2.STMT_MAJOR_CD IN (009, 020, 029) AND UP2.STMT_MINOR_CD IN (009, 035, 059, 060) THEN 'CA' WHEN UP3.PRODUCT_CLASSIFICATION_CD IN ('CPD','CPC','FAD') THEN 'MMF' /* Type: EQ :Equity Sub Type: ADR :American Depository Receipts ADS :American Depository Shares CEF :Closed-end Funds CFD :Contract for Delivery CS :Common Stock CVP :Convertible Preferred ECB :Convertible Bonds EN :Equity-linked Notes ESW :Equity Swap ETF :Exchange Traded Funds FE :Foreign Equities GDR :Global Depositary Receipt OEQ :Other Equities PF :Preferred Stock R :Rights REIT:REITs WT :Warrant */ WHEN UP3.PRODUCT_CLASSIFICATION_CD IN ('ADR') THEN 'ADR' WHEN UP3.PRODUCT_CLASSIFICATION_CD IN ('CSTA','CSTB','CSTC','SBI','CSTK','FSTK') THEN 'CS' WHEN UP3.PRODUCT_CLASSIFICATION_CD IN ('DPRC') THEN 'GDR' WHEN UP3.PRODUCT_CLASSIFICATION_CD IN ('WTS') THEN 'WT' WHEN UP3.PRODUCT_CLASSIFICATION_CD IN ('RSTR') THEN 'OEQ' WHEN UP2.STMT_MAJOR_CD IN (003) THEN CASE WHEN UP2.PCL_SUB_CLAS_C IN (205) THEN 'CVP' ELSE 'ECB' END WHEN UP2.STMT_MAJOR_CD IN (004, 005) AND UP3.PRO_TYP_C IN ('EQ') THEN CASE WHEN UP2.STMT_MAJOR_CD IN (004) THEN 'PF' WHEN UP2.STMT_MAJOR_CD IN (005) THEN 'OEQ' END /* Type: FI: Fixed Income Sub_Type: AB :Asset Backed Securities AD :Agencies Discount AG :Agencies AP :Agency Pass-through BA :Banker's Acceptance BF :Bond Futures CAP :Cap CBD :Corporate Bond - Distressed CBI :Corporate Bond - Investment Grade CBN :Corporate Bond - Non-Investment Grade CBO :Corporate Bond CDO :Collateralized Debt Obligations CDS :Credit Default Swap CLN :NULL CLO :Collateralized Loan Obligations CMO :Collateralized Mortgage Obligations CN :Corporate Note CP :Commercial Paper CVB :Convertible Bonds EM :Emerging Markets FB :Foreign Bonds FM :Freddie Mac FNMA:NULL FR :Repo FRR :Fixed Income Reverse Repos GB :Governmental Bond GLT :Gilt GNMA:GNMA / FNMA IRS :Interest Rate Swap MBD :Municipal Bond - Distressed MBI :Municipal Bond - Investment Grade MBN :Municipal Bond - Non-Investment Grade MBO :Municipal Bonds - Other MBS :Mortgage Backed Securities MM :Market Money OFI :Other Fixed Income PP :Private Pass-through RRF :Interest Rate Floor RS :Return Swaps SBB :Sell/Buy Back SC :Structured Credit SF :Structured Fund SH :Structured Hybrid SSW :Structured Swap STB :NULL SWO :Swaption (Swap Option) TB :T-Bill TN :T-Note TRE :Treasuries */ WHEN UP3.PRODUCT_CLASSIFICATION_CD IN ('ABS') THEN 'AB' WHEN UP3.PRODUCT_CLASSIFICATION_CD IN ('CPC','CPD') THEN 'CP' WHEN UP3.PRODUCT_CLASSIFICATION_CD IN ('FAC','SBA','WIN') THEN 'GB' WHEN UP3.PRODUCT_CLASSIFICATION_CD IN ('MBAC','MBNR','MBVR','MBCC') THEN 'MBO' WHEN UP3.PRODUCT_CLASSIFICATION_CD IN ('CMO','FG','FNP','GP','GPM','GT','PGP','PGU','PRGM') THEN 'MBS' WHEN UP3.PRODUCT_CLASSIFICATION_CD IN ('N') THEN 'TN' WHEN UP3.PRODUCT_CLASSIFICATION_CD IN ('BD') THEN 'TRE' WHEN UP3.PRODUCT_CLASSIFICATION_CD IN ('FAZ') THEN 'ZC' WHEN UP3.PRODUCT_CLASSIFICATION_CD IN ('MBZ') THEN 'OFI' WHEN UP2.STMT_MAJOR_CD IN (007) THEN 'FB' WHEN UP2.STMT_MAJOR_CD IN (009) THEN 'CD' WHEN UP2.STMT_MAJOR_CD IN (004, 005) AND UP3.PRO_TYP_C IN ('DB') THEN CASE WHEN UP2.STMT_MAJOR_CD IN (004) THEN 'CBO' WHEN UP2.STMT_MAJOR_CD IN (005) THEN CASE WHEN UP2.PCL_SUB_CLAS_T IN ('CORPORATE HIGH YIELD', 'CORPORATE INVESTMENT GRADE CREDIT') THEN 'CN' WHEN UP2.PCL_SUB_CLAS_T IN ('CONVERTIBLES') THEN 'CVB' WHEN UP2.PCL_SUB_CLAS_T IN ('EMERGING MARKETS') THEN 'EM' WHEN UP2.PCL_SUB_CLAS_T IN ('GOVERNMENT') THEN 'GB' WHEN UP2.PCL_SUB_CLAS_T IN ('MUNICIPALS') THEN 'MBO' ELSE 'OFI' END END /* Type: MFU: Mutual Fund Sub_Type: MUF: Mutual Fund OMF: Other Mutual Funds */ WHEN UP3.PRODUCT_CLASSIFICATION_CD IN ('MSGM','MUTC') THEN 'MUF' WHEN UP2.STMT_MAJOR_CD IN (015) AND UP2.STMT_MINOR_CD IN (034) THEN 'MUF' /* Type: OTH: Other Products Sub_Type AI :Alternate Investments ALL :All products - indicates all product sub types C :Currency HF :Hedge Fund MFS :Municipal Fund Securities MO :Commodity Options OOT :Other Products OS :Other Structured Products PCO :Physical Commodity PHY :Physical Commodity UN :Unit Investment Trusts VLI :Variable Life Insurance */ WHEN UP3.PRODUCT_CLASSIFICATION_CD IN ('RTS') THEN 'OOT' WHEN UP2.STMT_MAJOR_CD IN (006, 008, 011, 019, 027, 028) AND UP2.STMT_MINOR_CD IN (019, 001) THEN 'OOT' WHEN UP3.PRODUCT_CLASSIFICATION_CD IN ('UNTE','UNTF','UNTM','UNTT') THEN 'UN' /* Type: INS: Insurance Sub_Type: VLI: Variable Life Insurance*/ WHEN UP3.PRODUCT_CLASSIFICATION_CD IN ('IFL', 'IHC', 'ILT', 'ILU', 'IVL') THEN 'VLI' WHEN UP3.EDC_TYP_LVL4_C IN ('UZ', 'GR', 'NX') THEN 'PRE' /* BM :Base Metal BMO :Base Metal Option CF :Currency Futures CMF :Commodity Futures COL :NULL CRO :NULL CSW :NULL CTF :NULL EMS :NULL ETH :NULL FRA :Forward Rate Agreement FRT :NULL FSM :NULL FUO :Future Options GAO :NULL IF :Index Futures IRF :Interest Rate Futures MTF :NULL NAG :NULL NDF :Non-Deliverable Forward NGL :NULL NRF :Energy Futures OEN :NULL OFU :Other Futures OFW :Outright Forward PM :Precious Metal PMO :Precious Metal Option POW :Put Options PTC :NULL RFP :NULL SOF :NULL SSF :Single-stock Futures*/ WHEN UP2.STMT_MAJOR_CD IN (002) AND UP2.STMT_MINOR_CD IN (041) THEN 'PM' /* Type:OPT: OPTIONS Sub_Type: CO :Currency Options EO :Equity Options FO :Fixed Income Options IO :Index Options */ WHEN UP2.STMT_MAJOR_CD IN (017) AND UP2.STMT_MINOR_CD IN (008, 044) THEN CASE WHEN UP3.EDC_TYP_LVL2_C IN ('CC', 'CU') THEN 'CO' WHEN UP3.EDC_TYP_LVL2_C IN ('EC', 'EP') THEN 'EO' WHEN UP3.EDC_TYP_LVL2_C IN ('IC', 'IP') THEN 'IO' ELSE 'OOP' END /*Type: STR: Structured Products*/ WHEN UP2.STMT_MAJOR_CD IN (024) AND UP2.STMT_MINOR_CD IN (050) THEN CASE WHEN UP3.EDC_TYP_LVL2_C IN ('SC') THEN 'SC' ELSE 'OS' END END AS PRODUCT_SUB_TYPE_CD FROM [UBS_PRODUCT_03] UP3 LEFT JOIN [UBS_PRODUCT_02] UP2 ON UP2.PRO_I = UP3.PRO_I AND UP3.PRODUCT_KEY = UP2.PRODUCT_KEY) ,MORNING_STAR_RATING_CUSIP AS ( SELECT UP3.PRODUCT_KEY, CASE WHEN UMF4.MORNING_STAR_CATEGORY_RATING <> '' THEN UMF4.MORNING_STAR_CATEGORY_RATING END AS MORNING_STAR_CATEGORY_RATING FROM [UBS_PRODUCT_03] UP3 LEFT JOIN [UBS_MUTUAL_FUNDS_05] UMF5 ON UMF5.CUSIP_ID = UP3.CUSIP_ID LEFT JOIN [UBS_MUTUAL_FUNDS_04] UMF4 ON UMF4.PRODUCT_KEY = UMF5.PRODUCT_KEY WHERE UMF4.MS_RATING_VND_RATG_TYP_C = 1 AND UMF4.MS_RATING_VND_RATG_YR_N = 60 AND UP3.CUSIP_ID <> '' ), MORNING_STAR_RATING_SYMBOL AS ( SELECT UP3.PRODUCT_KEY, CASE WHEN UMF4.MORNING_STAR_CATEGORY_RATING <> '' THEN UMF4.MORNING_STAR_CATEGORY_RATING END AS MORNING_STAR_CATEGORY_RATING FROM [UBS_PRODUCT_03] UP3 LEFT JOIN [UBS_MUTUAL_FUNDS_05] UMF5 ON UMF5.SYMBOL = UP3.SYMBOL LEFT JOIN [UBS_MUTUAL_FUNDS_04] UMF4 ON UMF4.PRODUCT_KEY = UMF5.PRODUCT_KEY WHERE UMF4.MS_RATING_VND_RATG_TYP_C = 1 AND UMF4.MS_RATING_VND_RATG_YR_N = 60 AND UP3.SYMBOL <> '' ), MOODY_RATING AS ( SELECT CASE WHEN UP4.CR_OVRD_RATG_C = 'Y' THEN UP4.CR_OVRD_RATG_V ELSE CR_RATG_C END AS MOODY_RATING_ID, UP3.PRODUCT_KEY AS PRODUCT_KEY FROM [UBS_PRODUCT_03] UP3 LEFT JOIN [UBS_PRODUCT_04] UP4 ON UP4.PRO_I = UP3.PRO_I LEFT JOIN [UBS_PRODUCT_01] UP1 ON UP4.IP_CR_RATER_I = UP1.ISSUER_KEY WHERE (UP4.PRO_RATG_END_D > GETDATE() OR ISNULL(UP4.PRO_RATG_END_D, '') = ''  ) AND UP1.IP_PRO_ROLE_TYP_C = 'CR' AND UP1.IP_ABBR_X = 'MOODY' AND   RTRIM(LTRIM(UP4.CR_OVRD_RATG_C)) = (select CASE  WHEN count(*)>0 THEN 'Y' ELSE '' END from [UBS_PRODUCT_04] P04 where P04.PRO_I = UP3.PRO_I AND 	 CR_OVRD_RATG_C = 'Y')), SP_RATING AS ( SELECT CASE WHEN UP4.CR_OVRD_RATG_C = 'Y' THEN UP4.CR_OVRD_RATG_V ELSE CR_RATG_C END AS SP_RATING_ID, UP3.PRODUCT_KEY AS PRODUCT_KEY FROM [UBS_PRODUCT_03] UP3 LEFT JOIN [UBS_PRODUCT_04] UP4 ON UP4.PRO_I = UP3.PRO_I LEFT JOIN [UBS_PRODUCT_01] UP1 ON UP4.IP_CR_RATER_I = UP1.ISSUER_KEY WHERE (UP4.PRO_RATG_END_D > GETDATE() OR ISNULL(UP4.PRO_RATG_END_D, '') = '' ) AND UP1.IP_PRO_ROLE_TYP_C = 'CR' AND UP1.IP_ABBR_X = 'S&P' AND   RTRIM(LTRIM(UP4.CR_OVRD_RATG_C)) = (select CASE  WHEN count(*)>0 THEN 'Y' ELSE '' END from [UBS_PRODUCT_04] P04 where P04.PRO_I = UP3.PRO_I AND CR_OVRD_RATG_C = 'Y')), MIN_CALL_PRICE AS ( SELECT PRO_I, CASE WHEN CALL_DATE <> '' THEN CONCAT( CONVERT( VARCHAR, CAST(CALL_DATE AS DATE), 103 ), ' 00:00:00.000' ) END AS CALL_DATE, MIN(CALL_PRICE) AS MIN_CALL_PRICE FROM [UBS_PRODUCT_09] WHERE PRO_SCHD_TYP_C = 'CA' AND CAST(CALL_DATE AS date) >= CAST( GETDATE() AS date ) GROUP BY PRO_I, CALL_DATE ) SELECT UP3.PRODUCT_KEY AS PRODUCT_KEY, NULL AS TENANT_CD, CASE WHEN PST.PRODUCT_TYPE_CD IN ('ANN') THEN 'ANN' WHEN PST.PRODUCT_TYPE_CD IN ('EQ') THEN 'EQ' WHEN PST.PRODUCT_TYPE_CD IN ('FI') THEN 'FI' WHEN PST.PRODUCT_TYPE_CD IN ('INS') THEN 'INSU' WHEN PST.PRODUCT_TYPE_CD IN ('MFU') THEN 'FND' WHEN PST.PRODUCT_TYPE_CD IN ('RTS') THEN 'RLE' WHEN PST.PRODUCT_TYPE_CD IN ('ALT', 'CSE', 'FUT', 'OPT', 'OTH', 'RTS','STR') THEN 'OTH' END AS ASSET_CLASS_CD, MCP.CALL_DATE AS CALL_DATE, MCP.MIN_CALL_PRICE AS CALL_PRICE, CASE WHEN UP3.CALL_PUT_CD LIKE 'C%' THEN 'C' WHEN UP3.CALL_PUT_CD LIKE 'P%' THEN 'P' END AS CALL_PUT_CD, UP6.CONTRACT_SIZE AS CONTRACT_SIZE, UP3.COUNTRY_CD AS COUNTRY_CD, NULL AS CREDIT_RATING_CD, CASE WHEN UP3.CUSIP_ID <> '' THEN UP3.CUSIP_ID END AS CUSIP_ID, NULL AS DAY_COUNT_METHOD_IND, NULL AS DURATION, NULL AS FITCH_RATING_ID, NULL AS HOLDING_PERIOD_DAYS, CASE WHEN UP3.INVESTMENT_END_TYPE_CD IN ( 'MUTL', 'MUTU', 'MUTM', 'MUTN', 'MUTR', 'MFPM', 'MFPN', 'MFPO', 'MFPP', 'MFPR' ) Then 'O' WHEN UP3.INVESTMENT_END_TYPE_CD = 'MUTC' Then 'C' END AS INVESTMENT_END_TYPE_CD, CASE WHEN UP6.CONTRACT_END_DATE <> '' THEN CASE WHEN UP6.CONTRACT_END_DATE <= GETDATE() THEN 0 ELSE 1 END END AS IS_ACTIVE, NULL AS IS_EXEMPT_REGS, NULL AS IS_REGS, NULL AS IS_RULE_144A, NULL AS IS_TO_BE_DELETED, NULL AS IS_UNDER_RESTRICTION_REGS, UP3.ISIN_ID AS ISIN_ID, CASE WHEN UP3.ISSUE_DATE <> '' THEN CONCAT( CONVERT( VARCHAR, CAST(UP3.ISSUE_DATE AS DATE), 103 ), ' 00:00:00.000' ) END AS ISSUE_DATE, UP3.ISSUER_KEY AS ISSUER_KEY, NULL AS MARKET_MAJOR_INDEX_CD, CASE WHEN UP3.MATURITY_DATE <> '' THEN CONCAT( CONVERT( VARCHAR, CAST(UP3.MATURITY_DATE AS DATE), 103 ), ' 00:00:00.000' ) END AS MATURITY_DATE, NULL AS MATURITY_RATE, UMF1.FUND_FAMILY AS FUND_FAMILY_CD, UMF1.MF_INVESTMENT_OBJ_CD AS FUND_INVESTMENT_OBJ_CD, UMF1.FUND_TYPE AS FUND_LOAD_CD, NULL AS FUND_RATING_ID, UMF1.FUND_SHARE_CLASS_TYPE_CD AS FUND_SHARE_CLASS_CD, CASE WHEN MR.MOODY_RATING_ID <> '' THEN MR.MOODY_RATING_ID END AS MOODY_RATING_ID, ISNULL( MSRC.MORNING_STAR_CATEGORY_RATING, MSRS.MORNING_STAR_CATEGORY_RATING ) AS MORNING_STAR_RATING_ID, NULL AS NO_LEGS_QUANTITY, NULL AS NOTIONAL_OUTSTANDING, NULL AS OPTION_CLASS_ID, NULL AS OPTION_SERIES_ID, NULL AS PAR_VALUE, NULL AS PRICE_AFFECTING_TERMS_CD, NULL AS PRICING, CASE WHEN UP3.PRIMARY_EXCHANGE_CD <> '' THEN UP3.PRIMARY_EXCHANGE_CD END AS PRIMARY_EXCHANGE_CD, NULL AS PRODUCT_BETA, UP3.PRODUCT_CLASSIFICATION_CD AS PRODUCT_CLASSIFICATION_CD, UP3.PRODUCT_DESC_LINE_1 AS PRODUCT_DESC_LINE_1, UP3.PRODUCT_DESC_LINE_2 AS PRODUCT_DESC_LINE_2, UP3.PRODUCT_DESC_LINE_1 AS PRODUCT_NAME, PST.PRODUCT_SUB_TYPE_CD AS PRODUCT_SUB_TYPE_CD, PST.PRODUCT_TYPE_CD AS PRODUCT_TYPE_CD, NULL AS RESTRUCTURING_TYPE_CD, UP10.SECTOR_CD AS SECTOR_CD, CASE WHEN UP3.SEDOL_NUM <> '' THEN UP3.SEDOL_NUM END AS SEDOL_ID, NULL AS SENIORITY_TYPE_CD, NULL AS SETTLEMENT_METHOD_CD, CASE WHEN SPR.SP_RATING_ID <> '' THEN SPR.SP_RATING_ID END AS SP_RATING_ID, NULL AS STRATEGY_TYPE_CD, UP6.ORIG_CURR_STRIKE_PRICE AS ORIG_CURR_STRIKE_PRICE, CASE WHEN UP3.SYMBOL <> '' THEN UP3.SYMBOL END AS SYMBOL, NULL AS OPTION_EXERCISE_TYPE_CD, NULL AS UNDER_SEC_PRODUCT_SOURCE_CD, COALESCE(NULLIF(UP3.UNDERLYING_SEC_PRODUCT_KEY, ' '), UP3. PRODUCT_KEY) as UNDERLYING_SEC_PRODUCT_KEY , NULL AS CUSTOM_BOOLEAN_01, NULL AS CUSTOM_BOOLEAN_02, NULL AS CUSTOM_BOOLEAN_03, NULL AS CUSTOM_DATE_01, NULL AS CUSTOM_DATE_02, NULL AS CUSTOM_DATE_03, NULL AS CUSTOM_DOUBLE_01, NULL AS CUSTOM_DOUBLE_02, NULL AS CUSTOM_MEDIUM_STRING_01, NULL AS CUSTOM_MEDIUM_STRING_02, NULL AS PRODUCT_XREF_ID, NULL AS PRODUCT_XREF_TYPE, NULL AS CUSTOM_RATING_ID, NULL AS CUSTOM_RATING_TYPE, NULL AS CUSTOM_SMALL_STRING_01, NULL AS CUSTOM_SMALL_STRING_02, NULL AS CUSTOM_SMALL_STRING_03, NULL AS CUSTOM_SMALL_STRING_04, NULL AS CUSTOM_SMALL_STRING_05, NULL AS CUSTOM_SMALL_STRING_06, NULL AS CUSTOM_SMALL_STRING_07, NULL AS CUSTOM_SMALL_STRING_08, NULL AS CUSTOM_SMALL_STRING_09, NULL AS CUSTOM_SMALL_STRING_10, NULL AS CUSTOM_SMALL_STRING_11, NULL AS CUSTOM_SMALL_STRING_12, NULL AS CUSTOM_SMALL_STRING_13, NULL AS CUSTOM_SMALL_STRING_14, NULL AS CUSTOM_SMALL_STRING_15, NULL AS FLOATING_RATE_INDEX_KEY2, NULL AS FLOATING_RATE_INDEX_KEY, NULL AS REFERENCE_LEGAL_ENTITY_ID, NULL AS SWAP_RATE2, NULL AS PAYMENT_FREQUENCY, NULL AS SWAP_RATE, NULL AS NOTIONAL_CURRENCY2, NULL AS NOTIONAL_VALUE2, NULL AS UNDERLYING_SEC_PRODUCT_KEY2, NULL AS NOTIONAL_CURRENCY, NULL AS NOTIONAL_VALUE, CASE WHEN PST.PRODUCT_TYPE_CD IN ('EQ') THEN 'STK' WHEN PST.PRODUCT_TYPE_CD IN ('FI') THEN 'BND' WHEN PST.PRODUCT_TYPE_CD IN ('FUT') THEN 'FUT' WHEN PST.PRODUCT_TYPE_CD IN ('MFU') THEN 'FND' WHEN PST.PRODUCT_TYPE_CD IN ('OPT') THEN 'OPT' WHEN PST.PRODUCT_TYPE_CD IN ('ALT', 'ANN', 'CSE', 'INS', 'OTH', 'RTS','STR') THEN 'OTH' END AS INSTRUMENT_TYPE_CD, CASE WHEN PST.PRODUCT_SUB_TYPE_CD IN ('AI') THEN 'N/A' WHEN PST.PRODUCT_SUB_TYPE_CD IN ('FA') THEN 'FA' WHEN PST.PRODUCT_SUB_TYPE_CD IN ('OAN', 'IMA') THEN 'OAN' WHEN PST.PRODUCT_SUB_TYPE_CD IN ('VA') THEN 'VA' WHEN PST.PRODUCT_SUB_TYPE_CD IN ('CA') THEN 'CAS' WHEN PST.PRODUCT_SUB_TYPE_CD IN ('CVP') THEN 'CVP' WHEN PST.PRODUCT_SUB_TYPE_CD IN ('ECB') THEN 'ECB' WHEN PST.PRODUCT_SUB_TYPE_CD IN ('PF') THEN 'PF' WHEN PST.PRODUCT_SUB_TYPE_CD IN ('OEQ') THEN 'OEQ' WHEN PST.PRODUCT_SUB_TYPE_CD IN ('CBO') THEN 'CBO' WHEN PST.PRODUCT_SUB_TYPE_CD IN ('CN') THEN 'CN' WHEN PST.PRODUCT_SUB_TYPE_CD IN ('CVB') THEN 'OFI' WHEN PST.PRODUCT_SUB_TYPE_CD IN ('EM') THEN 'EM' WHEN PST.PRODUCT_SUB_TYPE_CD IN ('FB') THEN 'FB' WHEN PST.PRODUCT_SUB_TYPE_CD IN ('GB') THEN 'GB' WHEN PST.PRODUCT_SUB_TYPE_CD IN ('MBO') THEN 'MOT' WHEN PST.PRODUCT_SUB_TYPE_CD IN ('CD') THEN 'NCD' WHEN PST.PRODUCT_SUB_TYPE_CD IN ('OFI') THEN 'OFI' WHEN PST.PRODUCT_SUB_TYPE_CD IN ('PM') THEN 'PRM' WHEN PST.PRODUCT_SUB_TYPE_CD IN ('MUF') THEN 'MUF' WHEN PST.PRODUCT_SUB_TYPE_CD IN ('OMF') THEN 'OMF' WHEN PST.PRODUCT_SUB_TYPE_CD IN ('CO') THEN 'OOP' WHEN PST.PRODUCT_SUB_TYPE_CD IN ('EO') THEN 'EO' WHEN PST.PRODUCT_SUB_TYPE_CD IN ('IO') THEN 'EIO' WHEN PST.PRODUCT_SUB_TYPE_CD IN ('OOP') THEN 'OOP' WHEN PST.PRODUCT_SUB_TYPE_CD IN ('VLI') THEN 'VLI' WHEN PST.PRODUCT_SUB_TYPE_CD IN ('OOT') THEN 'OOT' WHEN PST.PRODUCT_SUB_TYPE_CD IN ('PRE') THEN 'REIT' WHEN PST.PRODUCT_SUB_TYPE_CD IN ('OS') THEN 'SPO' END AS PRODUCT_CLASS_SUB_TYPE_CD, CASE WHEN PST.PRODUCT_TYPE_CD IN ('ALT') THEN 'ALI' WHEN PST.PRODUCT_TYPE_CD IN ('ANN') THEN 'VA' WHEN PST.PRODUCT_TYPE_CD IN ('CSE') THEN 'CAS' WHEN PST.PRODUCT_TYPE_CD IN ('EQ') THEN 'CS' WHEN PST.PRODUCT_TYPE_CD IN ('FI') THEN 'OFI' WHEN PST.PRODUCT_TYPE_CD IN ('INS') THEN 'VLI' WHEN PST.PRODUCT_TYPE_CD IN ('FUT', 'OPT') THEN 'OOP' WHEN PST.PRODUCT_TYPE_CD IN ('MFU') THEN 'MUF' WHEN PST.PRODUCT_TYPE_CD IN ('OTH') THEN 'OOT' WHEN PST.PRODUCT_TYPE_CD IN ('RTS') THEN 'REIT' WHEN PST.PRODUCT_TYPE_CD IN ('STR') THEN 'SF' END AS PRODUCT_CLASS_TYPE_CD, NULL AS OPTION_DESIGNATION, CASE WHEN UMF1.ROA_FUND_LEVEL_CD = 'FUND FAMILY' THEN 'FundFamily' END AS FUND_TYPE_CD, NULL AS MAJOR_MINOR_IND, NULL AS SYS_DATA_SOURCE, NULL AS CONTRACT_START_DATE, CASE WHEN UP6.CONTRACT_END_DATE <> '' THEN CONCAT( CONVERT( VARCHAR, CAST(UP6.CONTRACT_END_DATE AS DATE), 103 ), ' 00:00:00.000' ) END AS CONTRACT_END_DATE, NULL AS CONTRACT_PERIODS, NULL AS POWER_HOURS, NULL AS SOURCE_SYSTEM_CD, NULL AS COMMODITY_PRODUCT_KEY, NULL AS BASE_CURR_STRIKE_PRICE, CASE WHEN PST.PRODUCT_TYPE_CD IN ('EQ') THEN 'STK' WHEN PST.PRODUCT_TYPE_CD IN ('FI') THEN 'BND' WHEN PST.PRODUCT_TYPE_CD IN ('FUT') THEN 'FUT' WHEN PST.PRODUCT_TYPE_CD IN ('MFU') THEN 'MFU' WHEN PST.PRODUCT_TYPE_CD IN ('OPT') THEN 'OPT' WHEN PST.PRODUCT_TYPE_CD IN ('ALT', 'ANN', 'CSE', 'INS', 'OTH', 'RTS', 'STR') THEN 'OTH' END AS INSTRUMENT_SUB_TYPE_CD, NULL AS FX_BASE_CURRENCY_CD, NULL AS FX_COUNTER_CURRENCY_CD, NULL AS INVESTMENT_GRADE_CD, NULL AS EXCHANGE_CD, NULL AS INCREMENT_PRICE, NULL AS BENCHMARK_ID, NULL AS ROW_UPDATE_DATE, NULL AS CONTRACT_PERIOD_LENGTH, '0' AS MORNING_STAR_CATEGORY_CD, NULL AS NEWS_PRODUCT_ID, ISNULL( MSRC.MORNING_STAR_CATEGORY_RATING, MSRS.MORNING_STAR_CATEGORY_RATING ) AS MORNING_STAR_RATING_CD, NULL AS ORIG_CURRENCY_CD, NULL AS SIMILAR_PRODUCT_KEY, 'HouseHold' AS ROA_CONSOLIDATION_LEVEL_CD, 'FundFamily' AS ROA_FUND_LEVEL_CD, CASE WHEN UMF1.FUND_SHARE_CLASS_TYPE_CD <> 'C' AND UMF1.FUND_TYPE = 'F' THEN 1 ELSE 0 END AS ROA_ELIGIBLE, NULL AS BARRIER_PRICE_INSTRUCTION1_CD, NULL AS BARRIER_PRICE_INSTRUCTION2_CD, NULL AS BARRIER_BASE_CURR_PRICE_LIMIT1, NULL AS BARRIER_ORIG_CURR_PRICE_LIMIT1, NULL AS BARRIER_BASE_CURR_PRICE_LIMIT2, NULL AS BARRIER_ORIG_CURR_PRICE_LIMIT2 FROM [UBS_PRODUCT_03] UP3 LEFT JOIN [UBS_PRODUCT_06] UP6 ON UP6.PRO_I = UP3.PRO_I LEFT JOIN [UBS_PRODUCT_10] UP10 ON UP10.PRO_I = UP3.PRO_I LEFT JOIN [UBS_MUTUAL_FUNDS_01] UMF1 ON UMF1.FUND_KEY = UP3.CUSIP_ID LEFT JOIN MORNING_STAR_RATING_CUSIP MSRC ON MSRC.PRODUCT_KEY = UP3.PRODUCT_KEY LEFT JOIN MORNING_STAR_RATING_SYMBOL MSRS ON MSRS.PRODUCT_KEY = UP3.PRODUCT_KEY LEFT JOIN MOODY_RATING MR ON MR.PRODUCT_KEY = UP3.PRODUCT_KEY LEFT JOIN SP_RATING SPR ON SPR.PRODUCT_KEY = UP3.PRODUCT_KEY LEFT JOIN PRODUCT_SUB_TYPE PST ON PST.PRODUCT_KEY = UP3.PRODUCT_KEY LEFT JOIN MIN_CALL_PRICE MCP ON MCP.PRO_I = UP3.PRO_I ]]>
			</query>
		</queries>
	</output>	
	<output>
		<target dest="file" row-delimeter="~@^*^@~" col-delimeter="~##~">ISSUER.DAT</target>
		<queries>
			<prequery></prequery>
			<query>
				<![CDATA[ SELECT  DISTINCT UP.ISSUER_KEY,   NULL AS TENANT_CD,   NULL AS IS_TO_BE_DELETED,   ISSUER_NAME,   NULL AS CUSTOM_BOOLEAN_01,   NULL AS CUSTOM_BOOLEAN_02,   NULL AS CUSTOM_DATE_01,   NULL AS CUSTOM_DATE_02,   NULL AS CUSTOM_DOUBLE_01,   NULL AS CUSTOM_MEDIUM_STRING_01,   NULL AS CUSTOM_SMALL_STRING_01,   NULL AS CUSTOM_SMALL_STRING_02,   NULL AS CUSTOM_SMALL_STRING_03,   NULL AS CUSTOM_SMALL_STRING_04,   NULL AS CUSTOM_SMALL_STRING_05,   NULL AS CUSTOM_SMALL_STRING_06,   NULL AS ROW_UPDATE_DATE FROM   UBS_PRODUCT_01 AS UP   JOIN V_ISSUER AS VI ON UP.ISSUER_KEY = VI.ISSUER_KEY WHERE   IP_PRO_ROLE_TYP_C = 'IS' ]]>
			</query>
		</queries>
	</output>
	<output>
		<target dest="file" row-delimeter="~@^*^@~" col-delimeter="~##~">PRODUCT_REGISTRATION.DAT</target>
		<queries>
			<prequery></prequery>
			<query>
				<![CDATA[SELECT     UP3.PRODUCT_KEY,     UP6.REGISTERED_STATE_PROVINCE_CD collate database_default,     NULL AS TENANT_CD,     NULL AS IS_TO_BE_DELETED,     NULL AS CUSTOM_BOOLEAN_01,     NULL AS CUSTOM_BOOLEAN_02,     NULL AS CUSTOM_DATE_01,     NULL AS CUSTOM_DATE_02,     NULL AS CUSTOM_DOUBLE_01,     NULL AS CUSTOM_MEDIUM_STRING_01,     NULL AS CUSTOM_SMALL_STRING_01,     NULL AS CUSTOM_SMALL_STRING_02,     NULL AS CUSTOM_SMALL_STRING_03,     NULL AS CUSTOM_SMALL_STRING_04,     NULL AS CUSTOM_SMALL_STRING_05,     NULL AS CUSTOM_SMALL_STRING_06,     NULL AS CUSTOM_SMALL_STRING_07,     NULL AS ROW_UPDATE_DATE   FROM     UBS_PRODUCT_03 UP3     JOIN V_PRODUCT_REGISTRATION AS VPR ON UP3.PRO_I = VPR.PRO_I     LEFT JOIN UBS_PRODUCT_06 UP6 ON UP6.PRO_I = UP3.PRO_I  union  SELECT   P03.PRODUCT_KEY,     SP.STATE_PROVINCE_CD collate database_default,    NULL AS TENANT_CD,     NULL AS IS_TO_BE_DELETED,     NULL AS CUSTOM_BOOLEAN_01,     NULL AS CUSTOM_BOOLEAN_02,     NULL AS CUSTOM_DATE_01,     NULL AS CUSTOM_DATE_02,     NULL AS CUSTOM_DOUBLE_01,     NULL AS CUSTOM_MEDIUM_STRING_01,     NULL AS CUSTOM_SMALL_STRING_01,     NULL AS CUSTOM_SMALL_STRING_02,     NULL AS CUSTOM_SMALL_STRING_03,     NULL AS CUSTOM_SMALL_STRING_04,     NULL AS CUSTOM_SMALL_STRING_05,     NULL AS CUSTOM_SMALL_STRING_06,     NULL AS CUSTOM_SMALL_STRING_07,     NULL AS ROW_UPDATE_DATE     FROM [OTC_BLUESKY_STAGING] OTC left join  [sp_ubs_UDM].[sp_ubs_UDM_CDS].[STATE_PROVINCE] SP    on  JURISDICTION collate database_default = STATE_PROVINCE_NAME collate database_default    inner join UBS_PRODUCT_03 P03    on OTC.CUSIP=P03.CUSIP_ID and OTC.BLUE_SKY_STATUS='Y' ]]>
			</query>
		</queries>
	</output>
	<output>
		<target dest="file" row-delimeter="~@^*^@~" col-delimeter="~##~">RISK_LEVEL.DAT</target>
		<queries>
			<prequery></prequery>
			<query>
				<![CDATA[SELECT DISTINCT  UAM.ACCOUNT_KEY AS ENTITY_KEY,   'ACCOUNT' AS ENTITY_TYPE_CD,   CASE WHEN UP03.PFL_ANS_CHCE_I = '0000000001' THEN 4 WHEN UP03.PFL_ANS_CHCE_I = '0000000004' THEN 2 WHEN UP03.PFL_ANS_CHCE_I = '0000000005' THEN 5 END AS RISK_LEVEL_CODE_CD,   'Tolerance' AS RISK_TYPE_CD,   NULL AS TENANT_CD,   NULL AS IS_TO_BE_DELETED,   NULL AS RISK_FACTOR_1,   NULL AS RISK_FACTOR_2,   NULL AS RISK_FACTOR_3,   NULL AS RISK_FACTOR_4,   NULL AS RISK_LEVEL_VALUE,   NULL AS CUSTOM_BOOLEAN_01,   NULL AS CUSTOM_BOOLEAN_02,   NULL AS CUSTOM_DATE_01,   NULL AS CUSTOM_DATE_02,   NULL AS CUSTOM_DOUBLE_01,   NULL AS CUSTOM_MEDIUM_STRING_01,   NULL AS CUSTOM_SMALL_STRING_01,   NULL AS CUSTOM_SMALL_STRING_02,   NULL AS CUSTOM_SMALL_STRING_03,   NULL AS CUSTOM_SMALL_STRING_04,   NULL AS CUSTOM_SMALL_STRING_05,   NULL AS CUSTOM_SMALL_STRING_06,   NULL AS CUSTOM_SMALL_STRING_07,   NULL AS CUSTOM_SMALL_STRING_08,   NULL AS ROW_UPDATE_DATE FROM   UBS_PROFILE_02 AS UP02   JOIN V_RISK_LEVEL AS VRL ON UP02.PFL_ENTTY_I = VRL.ACCOUNT_KEY   LEFT JOIN UBS_ACCOUNT_MASTER AS UAM ON UAM.ACCOUNT_KEY = UP02.PFL_ENTTY_I   LEFT JOIN UBS_PROFILE_01 AS UP01 ON UP02.PFL_I = UP01.PFL_I   LEFT JOIN UBS_PROFILE_03 AS UP03 ON UP03.PFL_ANS_CHCE_I = CONCAT('000000000', UP01.PFL_ANS_T)   AND UP03.PFL_QSN_I = UP01.PFL_QSN_I WHERE   UP02.PFL_ENTTY_TYP_C = '0000000010'   AND UP01.PFL_TYP_I = '0000000060'   AND UP01.PFL_QSN_I = '0000000001'   AND UAM.ACCOUNT_KEY IS NOT NULL ]]>
			</query>
		</queries>
	</output>
	<output>
		<target dest="file" row-delimeter="~@^*^@~" col-delimeter="~##~">BREAKPOINT_SCHEDULE.DAT</target>
		<queries>
			<prequery></prequery>
			<query>
				<![CDATA[WITH CUSIP_ID AS (   SELECT     DISTINCT UMF6.PRODUCT_KEY AS ID,     UP3.PRODUCT_KEY   FROM     UBS_MUTUAL_FUNDS_06 UMF6     LEFT JOIN UBS_MUTUAL_FUNDS_05 UMF5 ON UMF5.PRODUCT_KEY = UMF6.PRODUCT_KEY     LEFT JOIN UBS_PRODUCT_03 UP3 ON UMF5.CUSIP_ID = UP3.CUSIP_ID   WHERE     UMF5.CUSIP_ID <> '' ), SYMBOL AS (   SELECT  DISTINCT UMF6.PRODUCT_KEY AS ID,     UP3.PRODUCT_KEY   FROM     UBS_MUTUAL_FUNDS_06 UMF6     LEFT JOIN UBS_MUTUAL_FUNDS_05 UMF5 ON UMF5.PRODUCT_KEY = UMF6.PRODUCT_KEY     LEFT JOIN UBS_PRODUCT_03 UP3 ON UMF5.SYMBOL = UP3.SYMBOL   WHERE     UMF5.SYMBOL <> '' ) SELECT DISTINCT  UMF6.INVESTMENT_AMT_RANGE_FROM,   ISNULL(C.PRODUCT_KEY, S.PRODUCT_KEY) AS PRODUCT_KEY,   NULL AS TENANT_CD,   RTRIM(UMF6.BRK_SALES_LOAD_PERCENT) AS BRK_SALES_LOAD_PERCENT,   NULL AS EFFECTIVE_DATE,   UMF6.INVESTMENT_AMT_RANGE_TO,   NULL AS IS_TO_BE_DELETED,   NULL AS CUSTOM_BOOLEAN_01,   NULL AS CUSTOM_BOOLEAN_02,   NULL AS CUSTOM_DATE_01,   NULL AS CUSTOM_DATE_02,   NULL AS CUSTOM_DOUBLE_01,   NULL AS CUSTOM_DOUBLE_02,   NULL AS CUSTOM_DOUBLE_03,   NULL AS CUSTOM_MEDIUM_STRING_01,   NULL AS CUSTOM_SMALL_STRING_01,   NULL AS CUSTOM_SMALL_STRING_02,   NULL AS CUSTOM_SMALL_STRING_03,   NULL AS CUSTOM_SMALL_STRING_04,   NULL AS CUSTOM_SMALL_STRING_05,   NULL AS ROW_UPDATE_DATE FROM   UBS_MUTUAL_FUNDS_06 UMF6   JOIN V_BREAKPOINT_SCHEDULE AS VBS ON UMF6.PRODUCT_KEY = VBS.PRODUCT_KEY   LEFT JOIN CUSIP_ID C ON C.ID = UMF6.PRODUCT_KEY   LEFT JOIN SYMBOL S ON S.ID = UMF6.PRODUCT_KEY WHERE   ISNULL(C.PRODUCT_KEY, S.PRODUCT_KEY) IS NOT NULL ]]>
			</query>
		</queries>
	</output>	
	<output>
		<target dest="file" row-delimeter="~@^*^@~" col-delimeter="~##~">FUND_FAMILY.DAT</target>
		<queries>
			<prequery></prequery>
			<query>
				<![CDATA[SELECT   UMF.MF_FAMILY_CD,   NULL AS TENANT_CD,   MF_FAMILY_DESC,   NULL AS CUSTOM_BOOLEAN_01,   NULL AS CUSTOM_MEDIUM_STRING_01,   NULL AS CUSTOM_SMALL_STRING_01,   NULL AS CUSTOM_SMALL_STRING_02,   NULL AS CUSTOM_SMALL_STRING_03 FROM   UBS_MUTUAL_FUNDS_02 AS UMF   JOIN V_FUND_FAMILY AS VFF ON UMF.MF_FAMILY_CD = VFF.MF_FAMILY_CD ]]>
			</query>
		</queries>
	</output>
	<output>
		<target dest="file" row-delimeter="~@^*^@~" col-delimeter="~##~">FUND_INVESTMENT_OBJECTIVE.DAT</target>
		<queries>
			<prequery></prequery>
			<query>
				<![CDATA[SELECT   DISTINCT UMF.MF_INVESTMENT_OBJ_CD,   NULL AS TENANT_CD,   NULL AS MF_INVESTMENT_OBJ_DESC,   NULL AS CUSTOM_BOOLEAN_01,   NULL AS CUSTOM_MEDIUM_STRING_01,   NULL AS CUSTOM_SMALL_STRING_01,   NULL AS CUSTOM_SMALL_STRING_02,   NULL AS CUSTOM_SMALL_STRING_03 FROM   UBS_MUTUAL_FUNDS_01 AS UMF   JOIN V_FUND_INVESTMENT_OBJECTIVE AS VFIO ON UMF.MF_INVESTMENT_OBJ_CD = VFIO.MF_INVESTMENT_OBJ_CD]]>
			</query>
		</queries>
	</output>
	<output>
		<target dest="file" row-delimeter="~@^*^@~" col-delimeter="~##~">CONTRACT.DAT</target>
		<queries>
			<prequery></prequery>
			<query>
				<![CDATA[ SELECT   DISTINCT A.CONTRACT_KEY,   NULL AS TENANT_CD,   B.ACCT_UAN AS ACCOUNT_KEY,   CONCAT(     CONVERT(       VARCHAR,       CAST(ANNUITIZED_DATE AS DATE),       103     ),     ' 00:00:00.000'   ) as ANNUITIZED_DATE,   NULL AS ANNUITY_PRODUCT_NAME,   BASE_COMMITMENT_AMT,   NULL AS CONTRACT_CLOSE_DATE,   CONTRACT_NAME,   CONTRACT_NUMBER,   NULL AS CONTRACT_OPEN_DATE,   NULL AS CONTRACT_TYPE_CD,   INSURANCE_ORG_KEY,   NULL AS IS_TO_BE_DELETED,   NULL AS CUSTOM_BOOLEAN_01,   NULL AS CUSTOM_BOOLEAN_02,   NULL AS CUSTOM_DATE_01,   NULL AS CUSTOM_DATE_02,   NULL AS CUSTOM_DOUBLE_01,   NULL AS CUSTOM_MEDIUM_STRING_01,   NULL AS CUSTOM_SMALL_STRING_01,   NULL AS CUSTOM_SMALL_STRING_02,   NULL AS CUSTOM_SMALL_STRING_03,   NULL AS CUSTOM_SMALL_STRING_04,   NULL AS CUSTOM_SMALL_STRING_05,   NULL AS ROW_UPDATE_DATE FROM   UBS_INSURANCE_01 A  JOIN  V_INSURANCE_01 VI1  ON A.CONTRACT_KEY = VI1.CONTRACT_KEY   LEFT JOIN UBS_ACCOUNT_CONVERSION B ON A.ACCOUNT_KEY = B.ACCOUNT_NUMBER  ]]>
			</query>
		</queries>
	</output>
	<output>
		<target dest="file" row-delimeter="~@^*^@~" col-delimeter="~##~">COMPOSITE_PRODUCT.DAT</target>
		<queries>
			<prequery></prequery>
			<query>
				<![CDATA[SELECT   DISTINCT B.PRODUCT_KEY AS COMPOSITE_PRODUCT_KEY,   C.PRODUCT_KEY,   NULL AS TENANT_CD,   NULL AS IS_TO_BE_DELETED,   PERCENTAGE_ALLOCATION,   QUANTITY_ALLOCATION,   NULL AS CUSTOM_BOOLEAN_01,   NULL AS CUSTOM_BOOLEAN_02,   NULL AS CUSTOM_DATE_01,   NULL AS CUSTOM_DATE_02,   NULL AS CUSTOM_DOUBLE_01,   NULL AS CUSTOM_DOUBLE_02,   NULL AS CUSTOM_MEDIUM_STRING_01,   NULL AS CUSTOM_SMALL_STRING_01,   NULL AS CUSTOM_SMALL_STRING_02,   NULL AS CUSTOM_SMALL_STRING_03,   NULL AS CUSTOM_SMALL_STRING_04,   NULL AS CUSTOM_SMALL_STRING_05,   NULL AS ROW_UPDATE_DATE,   NULL AS IS_PRIMARY FROM   UBS_INSURANCE_02 A   JOIN   V_INSURANCE_02 VI2   ON VI2.CONTRACT_NUMBER  = A.CONTRACT_NUMBER   LEFT JOIN UBS_INSURANCE_01 B ON A.CONTRACT_NUMBER = B.CONTRACT_NUMBER   LEFT JOIN UBS_PRODUCT_03 C ON C.CUSIP_ID = A.COMPOSITE_KEY   LEFT JOIN UBS_PRODUCT_02 D ON C.PRODUCT_KEY = D.PRODUCT_KEY WHERE   D.STMT_MAJOR_CD = '008'   and D.STMT_MINOR_CD = '004' ]]>
			</query>
		</queries>
	</output>
	<output>
		<target dest="file" row-delimeter="~@^*^@~" col-delimeter="~##~">RR_INSURANCE_APPOINTMENT.DAT</target>
		<queries>
			<prequery></prequery>
			<query>
				<![CDATA[ SELECT   DISTINCT RTRIM(     LTRIM(INSURANCE_ORG_KEY)   ) AS ORGANIZATION_KEY,   RTRIM(     LTRIM(UI.REPRESENTATIVE_KEY)   ) AS REPRESENTATIVE_KEY,   NULL AS TENANT_CD,   NULL AS IS_ACTIVE,   NULL AS IS_TO_BE_DELETED,   NULL AS CUSTOM_BOOLEAN_01,   NULL AS CUSTOM_BOOLEAN_02,   NULL AS CUSTOM_BOOLEAN_03,   NULL AS CUSTOM_DATE_01,   NULL AS CUSTOM_DATE_02,   NULL AS CUSTOM_DOUBLE_01,   NULL AS CUSTOM_MEDIUM_STRING_01,   NULL AS CUSTOM_SMALL_STRING_01,   NULL AS CUSTOM_SMALL_STRING_02,   NULL AS CUSTOM_SMALL_STRING_03,   NULL AS CUSTOM_SMALL_STRING_04,   NULL AS CUSTOM_SMALL_STRING_05,   NULL AS ROW_UPDATE_DATE FROM   UBS_INSURANCE_01 UI    JOIN  V_INSURANCE_01 VI1  ON UI.CONTRACT_KEY = VI1.CONTRACT_KEY   inner join UBS_FA_01 FA on LTRIM(UI.REPRESENTATIVE_KEY) = FA.REPRESENTATIVE_KEY ]]>
			</query>
		</queries>
	</output>
	<output>
	<target dest="table" truncate="false">BATCH_STATUS</target>
	<queries>
	<prequery></prequery>
	<query>
		select top 1 SUBSTRING(FILE_NAME,20,10) as BATCH_DATE,'BATCH_END' as PARAMETER,'YES' as STATUS from UBS_STG_ACCOUNT_MASTER order by BATCH_DATE DESC;
	</query>
	</queries>
	</output>
</outputs>